question_id,query,difficulty,dataset,description ,plan,type,columns,evidence,response,agent_error,agent_time,planRecall,jaccard,planPrecision,precision,recall,execution_error
468,"What is the Simplified Chinese translation of the name of the set ""Eighth Edition""?",moderate,card_games,"retrieve sets, filter eigth edition,get value ,retrieve set translations, join ","{""plans"": [{""function"": ""http://127.0.0.1:5200/retrieve"",""filter_dict"": {""product"": ""http://127.0.0.1:5000/products/card_games/sets""}},{""function"": ""http://127.0.0.1:5200/filter"", ""filter_dict"": {""conditions"": {""name"": ""Eighth Edition""}}},{""function"": ""http://127.0.0.1:5200/retrieve"",""filter_dict"": {""product"": ""http://127.0.0.1:5000/products/card_games/set_translations""}},{""function"": ""http://127.0.0.1:5200/filter"",""filter_dict"": {""conditions"": {""language"": ""Chinese Simplified""}}},{""function"":'combination', 'filter_dict': {""columns_left"": ""code"", ""columns_right"": ""setCode"", ""type"": ""equals"", ""values"": [""None""]}}]}",-,-,Eighth Edition is the name of card set which refers to name = 'Eighth Edition'; Simplified Chinese refers to language = 'Chinese Simplified'; translation of the name refers to translation,"{'plans': [{'function': 'http://127.0.0.1:5000/products/card_games/set_translations', 'filter_dict': {'product': 'card_games'}}, {'function': 'http://127.0.0.1:5200/filter', 'filter_dict': {'product': 'http://127.0.0.1:5000/products/card_games/set_translations', 'conditions': {'language': 'Simplified Chinese', 'setCode': 'Eighth Edition'}}}, {'function': 'http://127.0.0.1:5200/filter', 'filter_dict': {'product': 'translation'}}]}",0,21.40672254562378,0.0,0.0,0.0,0,0,1
344,List all the mythic rarity print cards banned in gladiator format.,moderate,card_games,"retrieve cards, filter rarity mythic, retrieve legalities, filter format gladiator status banned, combine uuid, uuid","{'plans': [{'function': 'http://127.0.0.1:5200/retrieve','filter_dict': {'product': 'http://127.0.0.1:5000/products/card_games/cards'}},{""function"": ""http://127.0.0.1:5200/filter"", ""values"": {""conditions"": {""rarity"": ""mythic""}}},{'function': 'http://127.0.0.1:5200/retrieve','filter_dict': {'product': 'http://127.0.0.1:5000/products/card_games/legalities'}},{""function"": ""http://127.0.0.1:5200/filter"", ""values"": {""conditions"": {""format"": ""gladiator"",""status"":""Banned""}}},{""function"":'combination', 'filter_dict':{'columns_left': 'uuid', 'columns_right': 'uuid', 'type': 'equals','values': ['None']}}]}",-,-,mythic rarity printing refers to rarity = 'mythic'; card banned refers to status = 'Banned'; in gladiator format refers to format = 'gladiator';,"{'plans': [{'function': 'http://127.0.0.1:5000/products/card_games/cards', 'filter_dict': {'product': 'cards'}}, {'function': 'http://127.0.0.1:5200/filter', 'filter_dict': {'product': 'http://127.0.0.1:5000/products/card_games/cards', 'conditions': {'rarity': 'mythic'}}}, {'function': 'http://127.0.0.1:5000/products/card_games/legalities', 'filter_dict': {'product': 'legalities'}}, {'function': 'http://127.0.0.1:5200/filter', 'filter_dict': {'product': 'http://127.0.0.1:5000/products/card_games/legalities', 'conditions': {'format': 'gladiator', 'status': 'banned'}}}, {'function': 'combination', 'filter_dict': {'columns_left': [{'id': 'A numerical dataset consisting of unique integer identifiers for cards.'}, {'artist': 'A string data type representing the name of the artist who illustrated the card art.'}, {'asciiName': 'A string representing the ASCII code formatted card name without special unicode characters.'}, {'availability': ""A list of available printing types for a card, formatted as comma-separated values (CSV). Example values include 'arena', 'dreamcast', 'mtgo', 'paper', 'shandalar'.""}, {'borderColor': ""A string data type representing the border color of a card, with possible values including 'black', 'borderless', 'gold', 'silver', and 'white'.""}, {'cardKingdomFoilId': 'Numerical data in float format representing card Kingdom Foil Ids, with a note on the significance of pairing with non-null card Kingdom Ids.'}, {'cardKingdomId': 'A numerical dataset containing float values representing the card Kingdom Id and a list of colors in the color indicator.'}, {'colorIdentity': 'Comma-separated values (CSV) containing uppercase letters representing color identity and associated text descriptions.'}, {'colorIndicator': 'A list of color indicators represented as text in a comma-separated values format, allowing for possible null values.'}, {'colors': ""A list of colors represented in a comma-separated values (CSV) format, detailing colors found in manaCost and colorIndicator, with potential absence of values for cards labeled 'Devoid'.""}, {'convertedManaCost': 'Numerical data representing the converted mana cost of a card, formatted as a float. Higher values indicate a higher cost in converted mana.'}, {'duelDeck': 'A mixed data type array that can contain null or two strings, representing the duel deck identifier and its description.'}, {'edhrecRank': ""Numerical data in float format representing the EDHRec rank of a card, with an additional integer field for the card's rank in EDH.""}, {'faceConvertedManaCost': ""Numerical data representing the converted mana cost (CMC) of a card, formatted as a float. A higher value indicates a higher cost in converted mana for the card's face.""}, {'faceName': ""A string data type representing the name displayed on a card's face.""}, {'flavorName': 'A string representing the promotional name of a special card, which is displayed above the true card name and has no game function.'}, {'flavorText': 'A collection of flavor text entries, formatted as strings with quotes and author attribution, providing thematic or narrative context without game function.'}, {'frameEffects': 'This data consists of text entries in a comma-separated values (CSV) format, detailing various visual frame effects related to a specific context, with a focus on different types of frame effects.'}, {'frameVersion': ""Mixed data type containing a year format (YYYY), text descriptions of card frame versions, and integer values. Examples of text include '1993', '1997', '2003', '2015', and 'future'.""}, {'hand': 'Numerical data representing the starting maximum hand size total modifier, formatted as a float. The value can be positive (e.g., +1, +2), negative (e.g., -1), or neutral (0), indicated by a preceding + or - character.'}, {'hasAlternativeDeckLimit': 'Numerical data representing whether a card allows an alternative deck limit, formatted as integers where 0 indicates disallow and 1 indicates allow.'}, {'hasContentWarning': ""Numerical data in integer format indicating whether a card has sensitive content, where '0' means no sensitive content and '1' means it has sensitive content.""}, {'hasFoil': 'Numerical data in integer format indicating whether a card can be found in foil (0: cannot be found, 1: can be found).'}, {'hasNonFoil': 'Numerical data in integer format indicating whether a card can be found in non-foil, where 0 means cannot be found and 1 means can be found.'}, {'isAlternative': ""Numerical data in integer format indicating whether a card is an alternate variation of an original printing, where 0 means 'not an alternate' and 1 means 'is an alternate'.""}, {'isFullArt': 'Numerical data representing whether a card has full artwork, formatted as integers where 0 indicates no full artwork and 1 indicates full artwork.'}, {'isOnlineOnly': ""A numerical data type represented as integers indicating whether a card is available only in online game variations, where 0 means 'not online only' and 1 means 'is online only'.""}, {'isOversized': ""Numerical data representing whether a card is oversized, formatted as integers where 0 indicates 'not oversized' and 1 indicates 'oversized'.""}, {'isPromo': 'Numerical data in integer format indicating whether a card is a promotional printing (0 for not, 1 for yes).'}, {'isReprint': 'Numerical data representing whether a card has been reprinted, with 0 indicating it has not been reprinted and 1 indicating it has been reprinted.'}, {'isReserved': 'This data represents a numerical value indicating whether a card is on the Magic: The Gathering Reserved List, formatted as an integer.'}, {'isStarter': ""Numerical data in integer format indicating whether a card is found in a starter deck, where 0 means 'not a starter' and 1 means 'is a starter'.""}, {'isStorySpotlight': 'This data represents a numerical value in integer format indicating whether a card is a Story Spotlight card, where 0 means it is not a Story Spotlight and 1 means it is.'}, {'isTextless': 'Numerical data representing whether a card has a text box, formatted as integers where 0 indicates the presence of a text box and 1 indicates its absence.'}, {'isTimeshifted': 'Numerical data represented as integers indicating whether a card is time shifted, with a specific focus on the feature of certain sets where a card may have a different frame version.'}, {'keywords': 'Comma-separated values representing abilities or keywords associated with a card.'}, {'layout': ""A string representing the type of card layout, specifically indicating 'token' for token cards.""}, {'leadershipSkills': 'A text data type that indicates the legality of a card in various formats (brawl, commander, oathbreaker) as boolean values or null, along with a list of leadership skills formats for commander legality.'}, {'life': 'Numerical data representing a life total modifier, formatted as a float or NaN, with a preceding plus or minus character followed by an integer.'}, {'loyalty': 'Mixed data format containing strings, integers, and floats, representing various attributes of a loyalty card, including a starting loyalty value and additional notes on usage.'}, {'manaCost': 'Data type is texts formatted as {<character(s)}{<character(s)}{<character(s)} where the first part represents manaCost, the second part is a description of the mana cost, and the third part is a text note regarding the mana cost being unconverted.'}, {'mcmId': ""Numerical data in float format, with an identifier 'mcmId' followed by text that is not useful.""}, {'mcmMetaId': 'Numerical data in float format, associated with mcmMetaId and labeled as NOT USEFUL.'}, {'mtgArenaId': ""Numerical data in float format, with an identifier 'mtgArenaId' that is not useful.""}, {'mtgjsonV4Id': 'Data type is text with a specific format of UUID, representing unique identifiers for items.'}, {'mtgoFoilId': 'Numerical data in float format, specifically for mtgoFoilId, which is not useful.'}, {'mtgoId': 'Numerical data in float format, specifically for mtgoId, with additional text indicating it is not useful.'}, {'multiverseId': 'Numerical data in floating point format, representing multiverse identifiers.'}, {'name': 'A string data type representing the name of a card, which may include delimiters for cards with multiple faces.'}, {'number': 'Alphanumeric strings representing card numbers.'}, {'originalReleaseDate': 'The original release date in ISO 8601 format (YYYY/MM/DD) for promotional cards printed outside of a cycle window, such as Secret Lair Drop promotions.'}, {'originalText': 'String descriptions of card abilities and effects, including the original text as printed on the card.'}, {'originalType': 'String representing the original type and subtype of a card in a collectible card game, including any supertypes and subtypes.'}, {'otherFaceIds': 'A list of card UUIDs in the format xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx representing counterparts of a card, such as transformed or melded faces.'}, {'power': 'Mixed data type containing integers, floats, special characters, and strings, with specific references to card power and its meanings.'}, {'printings': 'A list of set printing codes for cards, formatted as uppercase text in a comma-separated values (CSV) format.'}, {'promoTypes': 'A list of promotional types for a card in comma-separated values format.'}, {'purchaseUrls': 'A collection of URLs for purchasing cards from various online retailers, including Card Kingdom, Card Kingdom Foil, Cardmarket, and TCGPlayer.'}, {'rarity': 'String values representing rarity categories for card printing.'}, {'scryfallId': 'A collection of text data identified by UUIDs, including a Scryfall ID and an irrelevant text field.'}, {'scryfallIllustrationId': 'A UUID formatted text representing a unique identifier for a Scryfall illustration.'}, {'scryfallOracleId': 'Data type is text formatted as a UUID, specifically for Scryfall Oracle IDs, which are not useful.'}, {'setCode': ""A string data type representing the set printing code that a card is from, labeled as 'setCode'.""}, {'side': 'A string identifier representing the side of a card, used for cards with multiple faces. An empty value indicates the card has a single face.'}, {'subtypes': 'Comma-separated values representing categories or types of card subtypes found after an em-dash.'}, {'supertypes': 'A list of card supertypes represented as comma-separated values or single words, detailing the union of subtypes and supertypes related to commonsense evidence.'}, {'tcgplayerProductId': 'Numerical data in float format representing TCGPlayer product IDs.'}, {'text': 'A string containing the rules text of a card.'}, {'toughness': 'Mixed data containing strings and numerical values (integers and floats), including special characters and NaN, representing the toughness of a card.'}, {'type': ""Data representing card types in a collectible card game, formatted as 'Creature — [Type]', 'Plane — [Name]', 'Artifact Creature — [Name]', etc. Includes various card types such as 'Artifact', 'Creature', 'Planeswalker', and more.""}, {'types': 'A list of all card types in string format, including Unâ€‘sets and gameplay variants.'}, {'uuid': 'A UUID (Universally Unique Identifier) in the format xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx, generated by MTGJSON, representing a unique identifier for each entry.'}, {'variations': 'Data consists of text entries formatted as UUIDs or comma-separated UUIDs.'}, {'watermark': 'A string data type representing the name of the watermark on a card.'}], 'columns_right': [{'id': 'Numerical data in integer format representing a unique identifier for a legality.'}, {'format': 'A string data type representing different rules for playing, with each value corresponding to a specific format of play.'}, {'status': ""A string data type representing the status of an item, which can include values such as 'legal', 'banned', or 'restricted'.""}, {'uuid': 'A dataset containing text entries associated with unique identifiers in UUID format.'}], 'type': 'inner join', 'values': ['uuid']}}]}",0,122.5186996459961,0.0,0.0,0.0,0,0,1
340,Which are the cards that have incredibly powerful foils.,simple,card_games,retrieve cards filter cardKingdomFoilId empty cardKingdomId not empty,"{""plans"":[{""function"":""http://127.0.0.1:5200/retrieve"",""filter_dict"":{""product"":""http://127.0.0.1:5000/products/card_games/cards""}},{""function"":""http://127.0.0.1:5200/filter"",""filter_dict"":{""conditions"":{""cardKingdomFoilId"":""not empty"",""cardKingdomId"":""not empty""}}}]}",index,id,incredibly poweful foils refers to cardKingdomFoilId is not null AND cardKingdomId is not null,"{'plans': [{'function': 'http://127.0.0.1:5000/products/codebase_community/posts', 'filter_dict': {'product': 'codebase_community'}}, {'function': 'http://127.0.0.1:5200/filter', 'filter_dict': {'conditions': {'cardKingdomFoilId': {'not_null': True}, 'cardKingdomId': {'not_null': True}}}}, {'function': 'combination', 'filter_dict': {'columns_left': [{'Id': 'Numerical data in integer format representing post IDs.'}, {'PostTypeId': 'Numerical data in integer format representing the Post Type Id, which is the identifier for a specific post type.'}, {'AcceptedAnswerId': 'Numerical data in float format representing a value, and an integer representing the accepted answer ID of a post.'}, {'CreaionDate': 'Creation date of the post in datetime format YYYY-MM-DD HH:MM:SS'}, {'Score': 'Numerical data representing the score of a post, formatted as integers.'}, {'ViewCount': 'Numerical data representing the view count of a post, formatted as a float. Higher values indicate greater popularity.'}, {'Body': 'HTML formatted text containing paragraphs and code snippets for the body of a post.'}, {'OwnerUserId': 'Numerical data in float format representing a value, and an integer representing the Owner User Id.'}, {'LasActivityDate': 'Last Activity Date in datetime format, represented as YYYY-MM-DD HH:MM:SS.'}, {'Title': 'A string format data representing the title of a post.'}, {'Tags': ""Data consists of text entries formatted as <category1><category2><category3>, with tags indicating the post's subject matter.""}, {'AnswerCount': 'Numerical data representing the total number of answers to a post, formatted as an integer.'}, {'CommentCount': 'Numerical data representing the total number of comments on a post, formatted as integers.'}, {'FavoriteCount': 'Numerical data representing the total number of favorites for a post, formatted as a float. Higher values indicate more valuable posts.'}, {'LastEditorUserId': 'Numerical data in float format representing a value, and an integer representing the ID of the last editor.'}, {'LastEditDate': 'Dates in the format YYYY-MM-DD HH:MM:SS representing the last edit date and time.'}, {'CommunityOwnedDate': 'Community Owned Date in datetime format, represented as YYYY-MM-DD HH:MM:SS.'}, {'ParentId': 'This data consists of a numerical value in float format representing the ParentId of a post. It indicates the ID of the parent post, where an integer value is used. If the ParentId is null, it signifies that the post is a root post; otherwise, it is a child post of another post.'}, {'ClosedDate': 'ClosedDate represents the date and time when a post is marked as closed, formatted as YYYY-MM-DD HH:MM:SS. A null or empty value indicates the post is not well-finished, while a non-null value signifies that the post is well-finished.'}, {'OwnerDisplayName': 'A string representing the display name of the post owner.'}, {'LastEditorDisplayName': 'A string representing the display name of the last editor.'}], 'columns_right': [{'Id': 'Numerical data in integer format representing post IDs.'}, {'PostTypeId': 'Numerical data in integer format representing the Post Type Id, which is the identifier for a specific post type.'}, {'AcceptedAnswerId': 'Numerical data in float format representing a value, and an integer representing the accepted answer ID of a post.'}, {'CreaionDate': 'Creation date of the post in datetime format YYYY-MM-DD HH:MM:SS'}, {'Score': 'Numerical data representing the score of a post, formatted as integers.'}, {'ViewCount': 'Numerical data representing the view count of a post, formatted as a float. Higher values indicate greater popularity.'}, {'Body': 'HTML formatted text containing paragraphs and code snippets for the body of a post.'}, {'OwnerUserId': 'Numerical data in float format representing a value, and an integer representing the Owner User Id.'}, {'LasActivityDate': 'Last Activity Date in datetime format, represented as YYYY-MM-DD HH:MM:SS.'}, {'Title': 'A string format data representing the title of a post.'}, {'Tags': ""Data consists of text entries formatted as <category1><category2><category3>, with tags indicating the post's subject matter.""}, {'AnswerCount': 'Numerical data representing the total number of answers to a post, formatted as an integer.'}, {'CommentCount': 'Numerical data representing the total number of comments on a post, formatted as integers.'}, {'FavoriteCount': 'Numerical data representing the total number of favorites for a post, formatted as a float. Higher values indicate more valuable posts.'}, {'LastEditorUserId': 'Numerical data in float format representing a value, and an integer representing the ID of the last editor.'}, {'LastEditDate': 'Dates in the format YYYY-MM-DD HH:MM:SS representing the last edit date and time.'}, {'CommunityOwnedDate': 'Community Owned Date in datetime format, represented as YYYY-MM-DD HH:MM:SS.'}, {'ParentId': 'This data consists of a numerical value in float format representing the ParentId of a post. It indicates the ID of the parent post, where an integer value is used. If the ParentId is null, it signifies that the post is a root post; otherwise, it is a child post of another post.'}, {'ClosedDate': 'ClosedDate represents the date and time when a post is marked as closed, formatted as YYYY-MM-DD HH:MM:SS. A null or empty value indicates the post is not well-finished, while a non-null value signifies that the post is well-finished.'}, {'OwnerDisplayName': 'A string representing the display name of the post owner.'}, {'LastEditorDisplayName': 'A string representing the display name of the last editor.'}], 'type': 'self-combination'}}]}",0,52.33511805534363,0.0,0.0,0.0,0,0,1
341,What are the borderless cards available without powerful foils?,simple,card_games,retrieve cards filter cardKingdomFoilId empty cardKingdomId not empty borderColor` = 'borderless,"{""plans"":[{""function"":""http://127.0.0.1:5200/retrieve"",""filter_dict"":{""product"":""http://127.0.0.1:5000/products/card_games/cards""}},{""function"":""http://127.0.0.1:5200/filter"",""filter_dict"":{""conditions"":{""cardKingdomFoilId"":""not empty"",""cardKingdomId"":""not empty"",""borderColor"":""borderless""}}}]}",index,id,borderless' refers to borderColor; poweful foils refers to cardKingdomFoilId paired with cardKingdomId AND cardKingdomId is not null,"{'plans': [{'function': 'http://127.0.0.1:5000/products/codebase_community/posts', 'filter_dict': {'product': 'codebase_community'}}, {'function': 'http://127.0.0.1:5200/filter', 'filter_dict': {'product': 'http://127.0.0.1:5000/products/codebase_community/posts', 'conditions': {'borderColor': 'borderless'}}}, {'function': 'http://127.0.0.1:5200/filter', 'filter_dict': {'product': 'http://127.0.0.1:5000/products/codebase_community/posts', 'conditions': {'cardKingdomId': {'not_null': True}, 'cardKingdomFoilId': {'not_null': True}}}}, {'function': 'http://127.0.0.1:5200/filter', 'filter_dict': {'product': 'borderless cards', 'conditions': {'cardKingdomId': None, 'cardKingdomFoilId': None}}}, {'function': 'combination', 'filter_dict': {'columns_left': [{'id': 'A numerical dataset consisting of unique integer identifiers for cards.'}, {'artist': 'A string data type representing the name of the artist who illustrated the card art.'}, {'asciiName': 'A string representing the ASCII code formatted card name without special unicode characters.'}, {'availability': ""A list of available printing types for a card, formatted as comma-separated values (CSV). Example values include 'arena', 'dreamcast', 'mtgo', 'paper', 'shandalar'.""}, {'borderColor': ""A string data type representing the border color of a card, with possible values including 'black', 'borderless', 'gold', 'silver', and 'white'.""}, {'cardKingdomFoilId': 'Numerical data in float format representing card Kingdom Foil Ids, with a note on the significance of pairing with non-null card Kingdom Ids.'}, {'cardKingdomId': 'A numerical dataset containing float values representing the card Kingdom Id and a list of colors in the color indicator.'}, {'colorIdentity': 'Comma-separated values (CSV) containing uppercase letters representing color identity and associated text descriptions.'}, {'colorIndicator': 'A list of color indicators represented as text in a comma-separated values format, allowing for possible null values.'}, {'colors': ""A list of colors represented in a comma-separated values (CSV) format, detailing colors found in manaCost and colorIndicator, with potential absence of values for cards labeled 'Devoid'.""}, {'convertedManaCost': 'Numerical data representing the converted mana cost of a card, formatted as a float. Higher values indicate a higher cost in converted mana.'}, {'duelDeck': 'A mixed data type array that can contain null or two strings, representing the duel deck identifier and its description.'}, {'edhrecRank': ""Numerical data in float format representing the EDHRec rank of a card, with an additional integer field for the card's rank in EDH.""}, {'faceConvertedManaCost': ""Numerical data representing the converted mana cost (CMC) of a card, formatted as a float. A higher value indicates a higher cost in converted mana for the card's face.""}, {'faceName': ""A string data type representing the name displayed on a card's face.""}, {'flavorName': 'A string representing the promotional name of a special card, which is displayed above the true card name and has no game function.'}, {'flavorText': 'A collection of flavor text entries, formatted as strings with quotes and author attribution, providing thematic or narrative context without game function.'}, {'frameEffects': 'This data consists of text entries in a comma-separated values (CSV) format, detailing various visual frame effects related to a specific context, with a focus on different types of frame effects.'}, {'frameVersion': ""Mixed data type containing a year format (YYYY), text descriptions of card frame versions, and integer values. Examples of text include '1993', '1997', '2003', '2015', and 'future'.""}, {'hand': 'Numerical data representing the starting maximum hand size total modifier, formatted as a float. The value can be positive (e.g., +1, +2), negative (e.g., -1), or neutral (0), indicated by a preceding + or - character.'}, {'hasAlternativeDeckLimit': 'Numerical data representing whether a card allows an alternative deck limit, formatted as integers where 0 indicates disallow and 1 indicates allow.'}, {'hasContentWarning': ""Numerical data in integer format indicating whether a card has sensitive content, where '0' means no sensitive content and '1' means it has sensitive content.""}, {'hasFoil': 'Numerical data in integer format indicating whether a card can be found in foil (0: cannot be found, 1: can be found).'}, {'hasNonFoil': 'Numerical data in integer format indicating whether a card can be found in non-foil, where 0 means cannot be found and 1 means can be found.'}, {'isAlternative': ""Numerical data in integer format indicating whether a card is an alternate variation of an original printing, where 0 means 'not an alternate' and 1 means 'is an alternate'.""}, {'isFullArt': 'Numerical data representing whether a card has full artwork, formatted as integers where 0 indicates no full artwork and 1 indicates full artwork.'}, {'isOnlineOnly': ""A numerical data type represented as integers indicating whether a card is available only in online game variations, where 0 means 'not online only' and 1 means 'is online only'.""}, {'isOversized': ""Numerical data representing whether a card is oversized, formatted as integers where 0 indicates 'not oversized' and 1 indicates 'oversized'.""}, {'isPromo': 'Numerical data in integer format indicating whether a card is a promotional printing (0 for not, 1 for yes).'}, {'isReprint': 'Numerical data representing whether a card has been reprinted, with 0 indicating it has not been reprinted and 1 indicating it has been reprinted.'}, {'isReserved': 'This data represents a numerical value indicating whether a card is on the Magic: The Gathering Reserved List, formatted as an integer.'}, {'isStarter': ""Numerical data in integer format indicating whether a card is found in a starter deck, where 0 means 'not a starter' and 1 means 'is a starter'.""}, {'isStorySpotlight': 'This data represents a numerical value in integer format indicating whether a card is a Story Spotlight card, where 0 means it is not a Story Spotlight and 1 means it is.'}, {'isTextless': 'Numerical data representing whether a card has a text box, formatted as integers where 0 indicates the presence of a text box and 1 indicates its absence.'}, {'isTimeshifted': 'Numerical data represented as integers indicating whether a card is time shifted, with a specific focus on the feature of certain sets where a card may have a different frame version.'}, {'keywords': 'Comma-separated values representing abilities or keywords associated with a card.'}, {'layout': ""A string representing the type of card layout, specifically indicating 'token' for token cards.""}, {'leadershipSkills': 'A text data type that indicates the legality of a card in various formats (brawl, commander, oathbreaker) as boolean values or null, along with a list of leadership skills formats for commander legality.'}, {'life': 'Numerical data representing a life total modifier, formatted as a float or NaN, with a preceding plus or minus character followed by an integer.'}, {'loyalty': 'Mixed data format containing strings, integers, and floats, representing various attributes of a loyalty card, including a starting loyalty value and additional notes on usage.'}, {'manaCost': 'Data type is texts formatted as {<character(s)}{<character(s)}{<character(s)} where the first part represents manaCost, the second part is a description of the mana cost, and the third part is a text note regarding the mana cost being unconverted.'}, {'mcmId': ""Numerical data in float format, with an identifier 'mcmId' followed by text that is not useful.""}, {'mcmMetaId': 'Numerical data in float format, associated with mcmMetaId and labeled as NOT USEFUL.'}, {'mtgArenaId': ""Numerical data in float format, with an identifier 'mtgArenaId' that is not useful.""}, {'mtgjsonV4Id': 'Data type is text with a specific format of UUID, representing unique identifiers for items.'}, {'mtgoFoilId': 'Numerical data in float format, specifically for mtgoFoilId, which is not useful.'}, {'mtgoId': 'Numerical data in float format, specifically for mtgoId, with additional text indicating it is not useful.'}, {'multiverseId': 'Numerical data in floating point format, representing multiverse identifiers.'}, {'name': 'A string data type representing the name of a card, which may include delimiters for cards with multiple faces.'}, {'number': 'Alphanumeric strings representing card numbers.'}, {'originalReleaseDate': 'The original release date in ISO 8601 format (YYYY/MM/DD) for promotional cards printed outside of a cycle window, such as Secret Lair Drop promotions.'}, {'originalText': 'String descriptions of card abilities and effects, including the original text as printed on the card.'}, {'originalType': 'String representing the original type and subtype of a card in a collectible card game, including any supertypes and subtypes.'}, {'otherFaceIds': 'A list of card UUIDs in the format xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx representing counterparts of a card, such as transformed or melded faces.'}, {'power': 'Mixed data type containing integers, floats, special characters, and strings, with specific references to card power and its meanings.'}, {'printings': 'A list of set printing codes for cards, formatted as uppercase text in a comma-separated values (CSV) format.'}, {'promoTypes': 'A list of promotional types for a card in comma-separated values format.'}, {'purchaseUrls': 'A collection of URLs for purchasing cards from various online retailers, including Card Kingdom, Card Kingdom Foil, Cardmarket, and TCGPlayer.'}, {'rarity': 'String values representing rarity categories for card printing.'}, {'scryfallId': 'A collection of text data identified by UUIDs, including a Scryfall ID and an irrelevant text field.'}, {'scryfallIllustrationId': 'A UUID formatted text representing a unique identifier for a Scryfall illustration.'}, {'scryfallOracleId': 'Data type is text formatted as a UUID, specifically for Scryfall Oracle IDs, which are not useful.'}, {'setCode': ""A string data type representing the set printing code that a card is from, labeled as 'setCode'.""}, {'side': 'A string identifier representing the side of a card, used for cards with multiple faces. An empty value indicates the card has a single face.'}, {'subtypes': 'Comma-separated values representing categories or types of card subtypes found after an em-dash.'}, {'supertypes': 'A list of card supertypes represented as comma-separated values or single words, detailing the union of subtypes and supertypes related to commonsense evidence.'}, {'tcgplayerProductId': 'Numerical data in float format representing TCGPlayer product IDs.'}, {'text': 'A string containing the rules text of a card.'}, {'toughness': 'Mixed data containing strings and numerical values (integers and floats), including special characters and NaN, representing the toughness of a card.'}, {'type': ""Data representing card types in a collectible card game, formatted as 'Creature — [Type]', 'Plane — [Name]', 'Artifact Creature — [Name]', etc. Includes various card types such as 'Artifact', 'Creature', 'Planeswalker', and more.""}, {'types': 'A list of all card types in string format, including Unâ€‘sets and gameplay variants.'}, {'uuid': 'A UUID (Universally Unique Identifier) in the format xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx, generated by MTGJSON, representing a unique identifier for each entry.'}, {'variations': 'Data consists of text entries formatted as UUIDs or comma-separated UUIDs.'}, {'watermark': 'A string data type representing the name of the watermark on a card.'}], 'columns_right': [{'Id': 'Numerical data in integer format representing post IDs.'}, {'PostTypeId': 'Numerical data in integer format representing the Post Type Id, which is the identifier for a specific post type.'}, {'AcceptedAnswerId': 'Numerical data in float format representing a value, and an integer representing the accepted answer ID of a post.'}, {'CreaionDate': 'Creation date of the post in datetime format YYYY-MM-DD HH:MM:SS'}, {'Score': 'Numerical data representing the score of a post, formatted as integers.'}, {'ViewCount': 'Numerical data representing the view count of a post, formatted as a float. Higher values indicate greater popularity.'}, {'Body': 'HTML formatted text containing paragraphs and code snippets for the body of a post.'}, {'OwnerUserId': 'Numerical data in float format representing a value, and an integer representing the Owner User Id.'}, {'LasActivityDate': 'Last Activity Date in datetime format, represented as YYYY-MM-DD HH:MM:SS.'}, {'Title': 'A string format data representing the title of a post.'}, {'Tags': ""Data consists of text entries formatted as <category1><category2><category3>, with tags indicating the post's subject matter.""}, {'AnswerCount': 'Numerical data representing the total number of answers to a post, formatted as an integer.'}, {'CommentCount': 'Numerical data representing the total number of comments on a post, formatted as integers.'}, {'FavoriteCount': 'Numerical data representing the total number of favorites for a post, formatted as a float. Higher values indicate more valuable posts.'}, {'LastEditorUserId': 'Numerical data in float format representing a value, and an integer representing the ID of the last editor.'}, {'LastEditDate': 'Dates in the format YYYY-MM-DD HH:MM:SS representing the last edit date and time.'}, {'CommunityOwnedDate': 'Community Owned Date in datetime format, represented as YYYY-MM-DD HH:MM:SS.'}, {'ParentId': 'This data consists of a numerical value in float format representing the ParentId of a post. It indicates the ID of the parent post, where an integer value is used. If the ParentId is null, it signifies that the post is a root post; otherwise, it is a child post of another post.'}, {'ClosedDate': 'ClosedDate represents the date and time when a post is marked as closed, formatted as YYYY-MM-DD HH:MM:SS. A null or empty value indicates the post is not well-finished, while a non-null value signifies that the post is well-finished.'}, {'OwnerDisplayName': 'A string representing the display name of the post owner.'}, {'LastEditorDisplayName': 'A string representing the display name of the last editor.'}], 'type': 'Combine the filtered borderless cards with the exclusion filter applied.'}}]}",0,126.81079959869383,0.0,0.0,0.0,0,0,1
477,"Which of these artists have designed a card in the set Coldsnap, Jeremy Jarvis, Aaron Miller or Chippy?",challenging,card_games,"retrieve cards, filter artist Jeremy Jarvis, Aaron Miller or Chippy, retrieve sets, filter name Coldsnap, combine code setCode","{'plans': [{'function': 'http://127.0.0.1:5200/retrieve','filter_dict': {'product': 'http://127.0.0.1:5000/products/card_games/cards'}},{""function"": ""http://127.0.0.1:5200/filter"", ""values"": {""conditions"": {""artist"": [""Jeremy Jarvis"",""Aaron Miller"",""Chippy""]}}},{'function': 'http://127.0.0.1:5200/retrieve','filter_dict': {'product': 'http://127.0.0.1:5000/products/card_games/sets'}},{""function"": ""http://127.0.0.1:5200/filter"", ""values"": {""conditions"": {""name"": ""Coldsnap""}}},{""function"":'combination', 'filter_dict':{'columns_left': 'setCode', 'columns_right': 'code', 'type': 'equals','values': ['None']}}]}",-,-,"card set Coldsnap refers to name = 'Coldsnap'; Jeremy Jarvis, Aaron Miller or Chippy are the name of artists which refers to artist IN ('Jeremy Jarvis', 'Aaron Miller','Chippy');","{'plans': [{'function': 'http://127.0.0.1:5000/products/card_games/cards', 'filter_dict': {'product': 'card_games'}}, {'function': 'http://127.0.0.1:5200/filter', 'filter_dict': {'product': 'http://127.0.0.1:5000/products/card_games/cards', 'conditions': {'name': 'Coldsnap', 'artist': ['Jeremy Jarvis', 'Aaron Miller', 'Chippy']}}}]}",0,17.846866846084595,0.0,0.0,0.0,0,0,1
806,Provide the eye colour of the superhero who has Karen Beecher-Duncan as their full name.,simple,superhero,"retriev superhero, filter name,get value, retrieve colr, join","{""plans"":[{""function"":""http://127.0.0.1:5200/retrieve"",""filter_dict"":{""product"":""http://127.0.0.1:5000/products/superhero/superhero""}},{""function"":""http://127.0.0.1:5200/filter"",""filter_dict"":{""conditions"":{""full_name"":""Karen Beecher-Duncan""}}},{""function"":""http://127.0.0.1:5200/retrieve"",""filter_dict"":{""product"":""http://127.0.0.1:5000/products/superhero/colour""}} ,{""function"":'combination', 'filter_dict': {""columns_left"":""eye_colour_id"",""columns_right"":""id"",""type"":""equals"",""values"":[""None""]}}]}",-,-,eye colour refers to colour.colour where eye_colour_id = colour.id; Karen Beecher-Duncan is the full name of superhero;,"{'plans': [{'function': 'http://127.0.0.1:5000/products/codebase_community/posts', 'filter_dict': {'product': 'codebase_community'}}, {'function': 'http://127.0.0.1:5000/products/codebase_community/posts', 'filter_dict': {'product': 'codebase_community'}}, {'function': 'http://127.0.0.1:5200/filter', 'filter_dict': {'conditions': {'full_name': 'Karen Beecher-Duncan'}}}, {'function': 'http://127.0.0.1:5200/filter', 'filter_dict': {'conditions': {'id': 'eye_colour_id'}}}, {'function': 'combination', 'filter_dict': {'columns_left': [{'Id': 'Numerical data in integer format representing post IDs.'}, {'PostTypeId': 'Numerical data in integer format representing the Post Type Id, which is the identifier for a specific post type.'}, {'AcceptedAnswerId': 'Numerical data in float format representing a value, and an integer representing the accepted answer ID of a post.'}, {'CreaionDate': 'Creation date of the post in datetime format YYYY-MM-DD HH:MM:SS'}, {'Score': 'Numerical data representing the score of a post, formatted as integers.'}, {'ViewCount': 'Numerical data representing the view count of a post, formatted as a float. Higher values indicate greater popularity.'}, {'Body': 'HTML formatted text containing paragraphs and code snippets for the body of a post.'}, {'OwnerUserId': 'Numerical data in float format representing a value, and an integer representing the Owner User Id.'}, {'LasActivityDate': 'Last Activity Date in datetime format, represented as YYYY-MM-DD HH:MM:SS.'}, {'Title': 'A string format data representing the title of a post.'}, {'Tags': ""Data consists of text entries formatted as <category1><category2><category3>, with tags indicating the post's subject matter.""}, {'AnswerCount': 'Numerical data representing the total number of answers to a post, formatted as an integer.'}, {'CommentCount': 'Numerical data representing the total number of comments on a post, formatted as integers.'}, {'FavoriteCount': 'Numerical data representing the total number of favorites for a post, formatted as a float. Higher values indicate more valuable posts.'}, {'LastEditorUserId': 'Numerical data in float format representing a value, and an integer representing the ID of the last editor.'}, {'LastEditDate': 'Dates in the format YYYY-MM-DD HH:MM:SS representing the last edit date and time.'}, {'CommunityOwnedDate': 'Community Owned Date in datetime format, represented as YYYY-MM-DD HH:MM:SS.'}, {'ParentId': 'This data consists of a numerical value in float format representing the ParentId of a post. It indicates the ID of the parent post, where an integer value is used. If the ParentId is null, it signifies that the post is a root post; otherwise, it is a child post of another post.'}, {'ClosedDate': 'ClosedDate represents the date and time when a post is marked as closed, formatted as YYYY-MM-DD HH:MM:SS. A null or empty value indicates the post is not well-finished, while a non-null value signifies that the post is well-finished.'}, {'OwnerDisplayName': 'A string representing the display name of the post owner.'}, {'LastEditorDisplayName': 'A string representing the display name of the last editor.'}], 'columns_right': [{'Id': 'Numerical data in integer format representing post IDs.'}, {'PostTypeId': 'Numerical data in integer format representing the Post Type Id, which is the identifier for a specific post type.'}, {'AcceptedAnswerId': 'Numerical data in float format representing a value, and an integer representing the accepted answer ID of a post.'}, {'CreaionDate': 'Creation date of the post in datetime format YYYY-MM-DD HH:MM:SS'}, {'Score': 'Numerical data representing the score of a post, formatted as integers.'}, {'ViewCount': 'Numerical data representing the view count of a post, formatted as a float. Higher values indicate greater popularity.'}, {'Body': 'HTML formatted text containing paragraphs and code snippets for the body of a post.'}, {'OwnerUserId': 'Numerical data in float format representing a value, and an integer representing the Owner User Id.'}, {'LasActivityDate': 'Last Activity Date in datetime format, represented as YYYY-MM-DD HH:MM:SS.'}, {'Title': 'A string format data representing the title of a post.'}, {'Tags': ""Data consists of text entries formatted as <category1><category2><category3>, with tags indicating the post's subject matter.""}, {'AnswerCount': 'Numerical data representing the total number of answers to a post, formatted as an integer.'}, {'CommentCount': 'Numerical data representing the total number of comments on a post, formatted as integers.'}, {'FavoriteCount': 'Numerical data representing the total number of favorites for a post, formatted as a float. Higher values indicate more valuable posts.'}, {'LastEditorUserId': 'Numerical data in float format representing a value, and an integer representing the ID of the last editor.'}, {'LastEditDate': 'Dates in the format YYYY-MM-DD HH:MM:SS representing the last edit date and time.'}, {'CommunityOwnedDate': 'Community Owned Date in datetime format, represented as YYYY-MM-DD HH:MM:SS.'}, {'ParentId': 'This data consists of a numerical value in float format representing the ParentId of a post. It indicates the ID of the parent post, where an integer value is used. If the ParentId is null, it signifies that the post is a root post; otherwise, it is a child post of another post.'}, {'ClosedDate': 'ClosedDate represents the date and time when a post is marked as closed, formatted as YYYY-MM-DD HH:MM:SS. A null or empty value indicates the post is not well-finished, while a non-null value signifies that the post is well-finished.'}, {'OwnerDisplayName': 'A string representing the display name of the post owner.'}, {'LastEditorDisplayName': 'A string representing the display name of the last editor.'}], 'type': 'Combine', 'values': {'left_key': 'eye_colour_id', 'right_key': 'id'}}}]}",0,64.78305172920227,0.25,0.1428571428571428,0.25,0,0,1
737,What is Copycat's race?,simple,superhero,"retrieve superhero, filter hero name, retrieve race join","{""plans"":[{""function"":""http://127.0.0.1:5200/retrieve"",""filter_dict"":{""product"":""http://127.0.0.1:5000/products/superhero/superhero"",}},{""function"":""http://127.0.0.1:5200/filter"",""filter_dict"":{""conditions"":{""superhero_name"":""Copycat""}}},{""function"":""http://127.0.0.1:5200/retrieve"",""filter_dict"":{""product"":""http://127.0.0.1:5000/products/superhero/race"",}},{""function"":'combination', 'filter_dict': {""columns_left"":""race_id"",""columns_right"":""id"",""type"":""equals"",""values"":[""None""]}}]}",-,-,Copycat is the superhero_name;,"{'plans': [{'function': 'http://127.0.0.1:5000/products/superhero/superhero', 'filter_dict': {'product': 'superhero'}}, {'function': 'http://127.0.0.1:5200/filter', 'filter_dict': {'conditions': {'superhero_name': 'Copycat'}}}, {'function': 'http://127.0.0.1:5000/products/formula_1/races', 'filter_dict': {'product': 'race'}}, {'function': 'combination', 'filter_dict': {'columns_left': [{'Id': 'Numerical data in integer format representing post IDs.'}, {'PostTypeId': 'Numerical data in integer format representing the Post Type Id, which is the identifier for a specific post type.'}, {'AcceptedAnswerId': 'Numerical data in float format representing a value, and an integer representing the accepted answer ID of a post.'}, {'CreaionDate': 'Creation date of the post in datetime format YYYY-MM-DD HH:MM:SS'}, {'Score': 'Numerical data representing the score of a post, formatted as integers.'}, {'ViewCount': 'Numerical data representing the view count of a post, formatted as a float. Higher values indicate greater popularity.'}, {'Body': 'HTML formatted text containing paragraphs and code snippets for the body of a post.'}, {'OwnerUserId': 'Numerical data in float format representing a value, and an integer representing the Owner User Id.'}, {'LasActivityDate': 'Last Activity Date in datetime format, represented as YYYY-MM-DD HH:MM:SS.'}, {'Title': 'A string format data representing the title of a post.'}, {'Tags': ""Data consists of text entries formatted as <category1><category2><category3>, with tags indicating the post's subject matter.""}, {'AnswerCount': 'Numerical data representing the total number of answers to a post, formatted as an integer.'}, {'CommentCount': 'Numerical data representing the total number of comments on a post, formatted as integers.'}, {'FavoriteCount': 'Numerical data representing the total number of favorites for a post, formatted as a float. Higher values indicate more valuable posts.'}, {'LastEditorUserId': 'Numerical data in float format representing a value, and an integer representing the ID of the last editor.'}, {'LastEditDate': 'Dates in the format YYYY-MM-DD HH:MM:SS representing the last edit date and time.'}, {'CommunityOwnedDate': 'Community Owned Date in datetime format, represented as YYYY-MM-DD HH:MM:SS.'}, {'ParentId': 'This data consists of a numerical value in float format representing the ParentId of a post. It indicates the ID of the parent post, where an integer value is used. If the ParentId is null, it signifies that the post is a root post; otherwise, it is a child post of another post.'}, {'ClosedDate': 'ClosedDate represents the date and time when a post is marked as closed, formatted as YYYY-MM-DD HH:MM:SS. A null or empty value indicates the post is not well-finished, while a non-null value signifies that the post is well-finished.'}, {'OwnerDisplayName': 'A string representing the display name of the post owner.'}, {'LastEditorDisplayName': 'A string representing the display name of the last editor.'}], 'columns_right': [{'Id': 'Numerical data in integer format representing post IDs.'}, {'PostTypeId': 'Numerical data in integer format representing the Post Type Id, which is the identifier for a specific post type.'}, {'AcceptedAnswerId': 'Numerical data in float format representing a value, and an integer representing the accepted answer ID of a post.'}, {'CreaionDate': 'Creation date of the post in datetime format YYYY-MM-DD HH:MM:SS'}, {'Score': 'Numerical data representing the score of a post, formatted as integers.'}, {'ViewCount': 'Numerical data representing the view count of a post, formatted as a float. Higher values indicate greater popularity.'}, {'Body': 'HTML formatted text containing paragraphs and code snippets for the body of a post.'}, {'OwnerUserId': 'Numerical data in float format representing a value, and an integer representing the Owner User Id.'}, {'LasActivityDate': 'Last Activity Date in datetime format, represented as YYYY-MM-DD HH:MM:SS.'}, {'Title': 'A string format data representing the title of a post.'}, {'Tags': ""Data consists of text entries formatted as <category1><category2><category3>, with tags indicating the post's subject matter.""}, {'AnswerCount': 'Numerical data representing the total number of answers to a post, formatted as an integer.'}, {'CommentCount': 'Numerical data representing the total number of comments on a post, formatted as integers.'}, {'FavoriteCount': 'Numerical data representing the total number of favorites for a post, formatted as a float. Higher values indicate more valuable posts.'}, {'LastEditorUserId': 'Numerical data in float format representing a value, and an integer representing the ID of the last editor.'}, {'LastEditDate': 'Dates in the format YYYY-MM-DD HH:MM:SS representing the last edit date and time.'}, {'CommunityOwnedDate': 'Community Owned Date in datetime format, represented as YYYY-MM-DD HH:MM:SS.'}, {'ParentId': 'This data consists of a numerical value in float format representing the ParentId of a post. It indicates the ID of the parent post, where an integer value is used. If the ParentId is null, it signifies that the post is a root post; otherwise, it is a child post of another post.'}, {'ClosedDate': 'ClosedDate represents the date and time when a post is marked as closed, formatted as YYYY-MM-DD HH:MM:SS. A null or empty value indicates the post is not well-finished, while a non-null value signifies that the post is well-finished.'}, {'OwnerDisplayName': 'A string representing the display name of the post owner.'}, {'LastEditorDisplayName': 'A string representing the display name of the last editor.'}], 'type': 'Join', 'values': 'race_id'}}]}",0,62.01623892784119,0.25,0.1428571428571428,0.25,0,0,1
773,Please list the superhero names of all the superheroes that have blue eyes and blond hair.,challenging,superhero,"retrieve super heros, retrieve color, filter colour blond, combine id, hair colour id, retrieve colour, filter colour blue, combine eyecolour id, id","{'plans': [{'function': 'http://127.0.0.1:5200/retrieve','filter_dict': {'product': 'http://127.0.0.1:5000/products/superhero/superhero'}},{'function': 'http://127.0.0.1:5200/retrieve','filter_dict': {'product': 'http://127.0.0.1:5000/products/superhero/colour'}},{""function"": ""http://127.0.0.1:5200/filter"", ""values"": {""conditions"": {""colour"": ""Blond""}}},{""function"":'combination', 'filter_dict':{'columns_left': 'hair_colour_id', 'columns_right': 'id', 'type': 'equals','values': ['None']}},{'function': 'http://127.0.0.1:5200/retrieve','filter_dict': {'product': 'http://127.0.0.1:5000/products/superhero/colour'}},{""function"": ""http://127.0.0.1:5200/filter"", ""values"": {""conditions"": {""colour"": ""Blue""}}},{""function"":'combination', 'filter_dict':{'columns_left': 'eye_colour_id', 'columns_right': 'id', 'type': 'equals','values': ['None']}}]}",index,id,"which superhero refers to superhero_name; the same eyes, hair and skin colour refers to hair_colour_id = skin_colour_id AND hair_colour_id = eye_colour_id; publisher refers to publisher_name;","{'plans': [{'function': 'http://127.0.0.1:5000/products/superhero/superhero', 'filter_dict': {'product': 'superhero'}}, {'function': 'http://127.0.0.1:5000/products/superhero/colour', 'filter_dict': {'product': 'colour'}}, {'function': 'http://127.0.0.1:5200/filter', 'filter_dict': {'product': 'http://127.0.0.1:5000/products/superhero/colour', 'conditions': {'colour': 'Blue'}}}, {'function': 'http://127.0.0.1:5200/filter', 'filter_dict': {'product': 'http://127.0.0.1:5000/products/superhero/colour', 'conditions': {'colour': 'Blond'}}}, {'function': 'combination', 'filter_dict': {'columns_left': [{'eye_colour_id': 'Numerical data in integer format representing unique identifiers for colors.'}, {'colour': 'Text data representing color names for various attributes of a superhero, such as skin, eye, and hair color.'}], 'columns_right': [{'hair_colour_id': 'Numerical data in integer format representing unique identifiers for colors.'}, {'colour': 'Text data representing color names for various attributes of a superhero, such as skin, eye, and hair color.'}], 'type': 'rename'}}, {'function': 'http://127.0.0.1:5200/filter', 'filter_dict': {'product': 'http://127.0.0.1:5000/products/superhero/superhero', 'conditions': {'eye_colour_id': 'Blue', 'hair_colour_id': 'Blond'}}}]}",0,36.3662338256836,0.0,0.0,0.0,0,0,1
751,List down at least five superpowers of male superheroes.,moderate,superhero,"retrieve heros, retrieve gender filter male, retrieve superpowers combine","{""plans"":[{""function"":""http://127.0.0.1:5200/retrieve"",""filter_dict"":{""product"":""http://127.0.0.1:5000/products/superhero/superhero""}},{""function"":""http://127.0.0.1:5200/retrieve"",""filter_dict"":{""product"":""http://127.0.0.1:5000/products/superhero/gender""}},{""function"":""http://127.0.0.1:5200/filter"",""filter_dict"":{""conditions"":{""gender"":""male""}}},{""function"":'combination', 'filter_dict': {""columns_left"": ""gender_id"", ""columns_right"": ""id"", ""type"": ""equals"", ""values"": [""None""]}},{""function"":""http://127.0.0.1:5200/retrieve"",""filter_dict"":{""product"":""http://127.0.0.1:5000/products/superhero/hero_power""}},{""function"":'combination', 'filter_dict': {""columns_left"": ""id"", ""columns_right"": ""hero_id"", ""type"": ""equals"", ""values"": [""None""]}},{""function"":""http://127.0.0.1:5200/retrieve"",""filter_dict"":{""product"":""http://127.0.0.1:5000/products/superhero/superpower""}},{""function"":'combination', 'filter_dict': {""columns_left"": ""power_id"", ""columns_right"": ""id"", ""type"": ""equals"", ""values"": [""None""]}}]}",-,-,male refers to gender = 'Male'; superpowers refers to power_name;,"{'plans': [{'function': 'http://127.0.0.1:5000/products/superhero/gender', 'filter_dict': {'product': 'gender'}}, {'function': 'http://127.0.0.1:5200/filter', 'filter_dict': {'product': 'http://127.0.0.1:5000/products/superhero/gender', 'conditions': {'gender': 'Male'}}}, {'function': 'http://127.0.0.1:5000/products/superhero/hero_power', 'filter_dict': {'product': 'hero_power'}}, {'function': 'http://127.0.0.1:5200/filter', 'filter_dict': {'product': 'http://127.0.0.1:5000/products/superhero/hero_power', 'conditions': {'hero_id': 'filtered male superhero IDs'}}}, {'function': 'combination', 'filter_dict': {'columns_left': [{'id': 'Numerical data in integer format representing unique identifiers for gender.'}, {'gender': ""Categorical data representing the gender of a superhero, with possible values 'Male', 'Female', or null.""}], 'columns_right': [{'hero_id': 'A numerical dataset containing integer values representing the unique identifier for superheroes.'}, {'power_id': 'Numerical data in integer format representing the power ID associated with superhero attributes and abilities.'}], 'type': 'Combine filtered gender data with filtered hero_power data'}}, {'function': 'http://127.0.0.1:5000/products/superhero/superpower', 'filter_dict': {'product': 'superpower'}}, {'function': 'combination', 'filter_dict': {'columns_left': [{'hero_id': 'A numerical dataset containing integer values representing the unique identifier for superheroes.'}, {'power_id': 'Numerical data in integer format representing the power ID associated with superhero attributes and abilities.'}], 'columns_right': [{'id': 'Numerical data in integer format representing unique identifiers for superpowers.'}, {'power_name': 'A list of strings containing superpower names and associated text descriptions.'}], 'type': 'Combine', 'values': 'power_id'}}, {'function': 'http://127.0.0.1:5200/filter', 'filter_dict': {'product': 'http://127.0.0.1:5000/products/superhero/superpower', 'conditions': {'power_name': {'unique_count': 5}}}}]}",0,54.81763744354248,0.0,0.0,0.0,0,0,1
786,How many heroes have the highest attribute value in strength?,moderate,superhero,"retrieve heros, retrieve gender filter male, retriev attribute filter strength, retrieve hero_attriubute max, combine, count","{""plans"":[{""function"":""http://127.0.0.1:5200/retrieve"",""filter_dict"":{""product"":""http://127.0.0.1:5000/products/superhero/attribute"",}},{""function"":""http://127.0.0.1:5200/filter"",""filter_dict"":{""conditions"":{""attribute_name"":""Strength""}}},{""function"":""http://127.0.0.1:5200/retrieve"",""filter_dict"":{""product"":""http://127.0.0.1:5000/products/superhero/hero_attribute"",}},{""function"":""http://127.0.0.1:5200/filter"",""filter_dict"":{""conditions"":{""attribute_value"":100}}},{""function"":'combination', 'filter_dict': {""columns_left"":""id"",""columns_right"":""attribute_id"",""type"":""equals"",""values"":[""None""]}},{""function"":""http://127.0.0.1:5200/retrieve"",""filter_dict"":{""product"":""http://127.0.0.1:5000/products/superhero/superhero"",}},{""function"":'combination', 'filter_dict': {""columns_left"":""hero_id"",""columns_right"":""id"",""type"":""equals"",""values"":[""None""]}},{""function"":""http://127.0.0.1:5200/count"",""filter_dict"":{""columns"":[""hero_id""]}}]}",-,-,highest attribute value in strength refers to MAX(attribute_value) WHERE attribute_name = 'Strength';,"{'plans': [{'function': 'http://127.0.0.1:5000/products/codebase_community/posts', 'filter_dict': {'product': 'codebase_community'}}, {'function': 'http://127.0.0.1:5200/filter', 'filter_dict': {'product': 'http://127.0.0.1:5000/products/codebase_community/posts', 'conditions': {'attribute_name': 'Strength'}}}, {'function': 'http://127.0.0.1:5000/products/codebase_community/posts', 'filter_dict': {'product': 'codebase_community'}}, {'function': 'http://127.0.0.1:5200/filter', 'filter_dict': {'conditions': {'attribute_id': 'id'}}}, {'function': 'http://127.0.0.1:5200/max', 'filter_dict': {'product': 'http://127.0.0.1:5000/products/codebase_community/posts', 'columns': ['attribute_value']}}, {'function': 'http://127.0.0.1:5200/filter', 'filter_dict': {'conditions': {'attribute_value': 'max'}}}, {'function': 'http://127.0.0.1:5200/count', 'filter_dict': {'product': 'http://127.0.0.1:5000/products/codebase_community/posts', 'columns': 'hero_id', 'unique': True}}]}",0,47.13094091415405,0.0,0.0,0.0,0,0,1
872,"In the race No. 45, for the driver who had the Q3 time as 0:01:33, what is his abbreviated code?",simple,fromula_1,"retrieve qualifying, filter q3 = val, race id, get values,  retrieve drivers, join","{""plans"":[{""function"":""http://127.0.0.1:5200/retrieve"",""filter_dict"":{""product"":""http://127.0.0.1:5000/products/formula_1/qualifying""}},{""function"":""http://127.0.0.1:5200/filter"",""filter_dict"":{""conditions"":{""raceId"":45,""q3"":{""max"":""1:34"",""min"":""1:33""}}}},{""function"":""http://127.0.0.1:5200/retrieve"",""filter_dict"":{""product"":""http://127.0.0.1:5000/products/formula_1/drivers""}},{""function"":'combination', 'filter_dict': {""columns_left"": ""driverId"", ""columns_right"": ""driverId"", ""type"": ""equals"", ""values"": [""None""]}}]}",-,-,race number refers to raceId; had the Q3 time as 0:0M:SS refers to q3 LIKE 'M:SS%',"{'plans': [{'function': 'http://127.0.0.1:5000/products/formula_1/qualifying', 'filter_dict': {'product': 'qualifying'}}, {'function': 'http://127.0.0.1:5000/products/formula_1/drivers', 'filter_dict': {'product': 'formula_1/drivers'}}, {'function': 'combine', 'filter_dict': {'qualifying_data': {'driverId': ""filtered qualifying data where raceId = 45 and q3 LIKE '1:33%'""}, 'drivers_data': {'code': 'filtered drivers data where driverId matches the driverId from the filtered qualifying data'}}}]}",0,26.31528043746948,0.0,0.0,0.0,0,0,1
875,Show me the season page of year when the race No. 901 took place.,simple,fromula_1,"retriev race, filter 901, get value, retriev seasons, join ","{""plans"": [{""function"": ""http://127.0.0.1:5200/retrieve"", ""filter_dict"": {""product"": ""http://127.0.0.1:5000/products/formula_1/races""}},{""function"": ""http://127.0.0.1:5200/filter"", ""filter_dict"": {""raceId"": 901}},{""function"": ""http://127.0.0.1:5200/retrieve"",""filter_dict"":{""product"": ""http://127.0.0.1:5000/products/formula_1/seasons""}},{""function"":'combination', 'filter_dict': {""columns_left"": ""year"", ""columns_right"": ""year"", ""type"": ""equals"", ""values"": [""None""]}}]}",-,-,the season page refers to url; race number refers to raceId;,"{'plans': [{'function': 'http://127.0.0.1:5000/products/formula_1/races', 'filter_dict': {'product': 'formula_1/races'}}, {'function': 'http://127.0.0.1:5200/filter', 'filter_dict': {'conditions': {'raceId': 901}}}, {'function': 'http://127.0.0.1:5000/products/formula_1/seasons', 'filter_dict': {'product': 'formula_1'}}, {'function': 'combination', 'filter_dict': {'columns_left': [{'Id': 'Numerical data in integer format representing post IDs.'}, {'PostTypeId': 'Numerical data in integer format representing the Post Type Id, which is the identifier for a specific post type.'}, {'AcceptedAnswerId': 'Numerical data in float format representing a value, and an integer representing the accepted answer ID of a post.'}, {'CreaionDate': 'Creation date of the post in datetime format YYYY-MM-DD HH:MM:SS'}, {'Score': 'Numerical data representing the score of a post, formatted as integers.'}, {'ViewCount': 'Numerical data representing the view count of a post, formatted as a float. Higher values indicate greater popularity.'}, {'Body': 'HTML formatted text containing paragraphs and code snippets for the body of a post.'}, {'OwnerUserId': 'Numerical data in float format representing a value, and an integer representing the Owner User Id.'}, {'LasActivityDate': 'Last Activity Date in datetime format, represented as YYYY-MM-DD HH:MM:SS.'}, {'Title': 'A string format data representing the title of a post.'}, {'Tags': ""Data consists of text entries formatted as <category1><category2><category3>, with tags indicating the post's subject matter.""}, {'AnswerCount': 'Numerical data representing the total number of answers to a post, formatted as an integer.'}, {'CommentCount': 'Numerical data representing the total number of comments on a post, formatted as integers.'}, {'FavoriteCount': 'Numerical data representing the total number of favorites for a post, formatted as a float. Higher values indicate more valuable posts.'}, {'LastEditorUserId': 'Numerical data in float format representing a value, and an integer representing the ID of the last editor.'}, {'LastEditDate': 'Dates in the format YYYY-MM-DD HH:MM:SS representing the last edit date and time.'}, {'CommunityOwnedDate': 'Community Owned Date in datetime format, represented as YYYY-MM-DD HH:MM:SS.'}, {'ParentId': 'This data consists of a numerical value in float format representing the ParentId of a post. It indicates the ID of the parent post, where an integer value is used. If the ParentId is null, it signifies that the post is a root post; otherwise, it is a child post of another post.'}, {'ClosedDate': 'ClosedDate represents the date and time when a post is marked as closed, formatted as YYYY-MM-DD HH:MM:SS. A null or empty value indicates the post is not well-finished, while a non-null value signifies that the post is well-finished.'}, {'OwnerDisplayName': 'A string representing the display name of the post owner.'}, {'LastEditorDisplayName': 'A string representing the display name of the last editor.'}], 'columns_right': [{'Id': 'Numerical data in integer format representing post IDs.'}, {'PostTypeId': 'Numerical data in integer format representing the Post Type Id, which is the identifier for a specific post type.'}, {'AcceptedAnswerId': 'Numerical data in float format representing a value, and an integer representing the accepted answer ID of a post.'}, {'CreaionDate': 'Creation date of the post in datetime format YYYY-MM-DD HH:MM:SS'}, {'Score': 'Numerical data representing the score of a post, formatted as integers.'}, {'ViewCount': 'Numerical data representing the view count of a post, formatted as a float. Higher values indicate greater popularity.'}, {'Body': 'HTML formatted text containing paragraphs and code snippets for the body of a post.'}, {'OwnerUserId': 'Numerical data in float format representing a value, and an integer representing the Owner User Id.'}, {'LasActivityDate': 'Last Activity Date in datetime format, represented as YYYY-MM-DD HH:MM:SS.'}, {'Title': 'A string format data representing the title of a post.'}, {'Tags': ""Data consists of text entries formatted as <category1><category2><category3>, with tags indicating the post's subject matter.""}, {'AnswerCount': 'Numerical data representing the total number of answers to a post, formatted as an integer.'}, {'CommentCount': 'Numerical data representing the total number of comments on a post, formatted as integers.'}, {'FavoriteCount': 'Numerical data representing the total number of favorites for a post, formatted as a float. Higher values indicate more valuable posts.'}, {'LastEditorUserId': 'Numerical data in float format representing a value, and an integer representing the ID of the last editor.'}, {'LastEditDate': 'Dates in the format YYYY-MM-DD HH:MM:SS representing the last edit date and time.'}, {'CommunityOwnedDate': 'Community Owned Date in datetime format, represented as YYYY-MM-DD HH:MM:SS.'}, {'ParentId': 'This data consists of a numerical value in float format representing the ParentId of a post. It indicates the ID of the parent post, where an integer value is used. If the ParentId is null, it signifies that the post is a root post; otherwise, it is a child post of another post.'}, {'ClosedDate': 'ClosedDate represents the date and time when a post is marked as closed, formatted as YYYY-MM-DD HH:MM:SS. A null or empty value indicates the post is not well-finished, while a non-null value signifies that the post is well-finished.'}, {'OwnerDisplayName': 'A string representing the display name of the post owner.'}, {'LastEditorDisplayName': 'A string representing the display name of the last editor.'}], 'type': 'Combine', 'values': ['year']}}]}",0,62.1855525970459,0.0,0.0,0.0,0,0,1
933,What was Lewis Hamilton's final rank in the 2008 Chinese Grand Prix?,moderate,fromula_1,"retrieve drivers, filter name, retrieve races, filter 2008 chinese, retrieve races, join ","{""plans"":[{""function"":""http://127.0.0.1:5200/retrieve"",""filter_dict"":{""product"":""http://127.0.0.1:5000/products/formula_1/drivers""}},{""function"": ""http://127.0.0.1:5200/filter"", ""filter_dict"": {""conditions"": {""forename"": ""Lewis"",""surname"": ""Hamilton""}}},{""function"": ""http://127.0.0.1:5200/retrieve"",""filter_dict"": {""product"": ""http://127.0.0.1:5000/products/formula_1/results""}},{""function"": 'combination','filter_dict': {""columns_left"": ""driverId"", ""columns_right"": ""driverId"", ""type"": ""equals"",""values"": [""None""]}},{""function"": ""http://127.0.0.1:5200/retrieve"", ""filter_dict"": {""product"": ""http://127.0.0.1:5000/products/formula_1/races""}},{""function"": ""http://127.0.0.1:5200/filter"", ""filter_dict"": {""conditions"": {""year"": ""2008"",""name"": ""Chinese Grand Prix""}}},{""function"": 'combination','filter_dict': {""columns_left"": ""raceId"", ""columns_right"": ""raceId"", ""type"": ""equals"", ""values"": [""None""]}}]}",-,-,Lewis Hamilton refers to the full name of the driver; Full name of the driver refers to drivers.forename and drivers.surname; final rank refers to positionOrder; Chinese Grand Prix refers to races.name = 'Chinese Grand Prix';,"{'plans': [{'function': 'http://127.0.0.1:5000/products/formula_1/races', 'filter_dict': {'product': 'races'}}, {'function': 'http://127.0.0.1:5200/filter', 'filter_dict': {'product': 'http://127.0.0.1:5000/products/formula_1/races', 'conditions': {'year': 2008, 'name': 'Chinese Grand Prix'}}}, {'function': 'http://127.0.0.1:5000/products/formula_1/driverStandings', 'filter_dict': {'product': 'driverStandings'}}, {'function': 'http://127.0.0.1:5200/filter', 'filter_dict': {'product': 'http://127.0.0.1:5000/products/formula_1/driverStandings', 'conditions': {'forename': 'Lewis', 'surname': 'Hamilton'}}}, {'function': 'combination', 'filter_dict': {'columns_left': [{'raceId': 'Numerical data in integer format representing a unique identification number for a race, labeled as raceId.'}, {'year': 'Numerical data representing years in integer format.'}, {'round': 'Numerical data in integer format, specifically rounded integers.'}, {'circuitId': 'Numerical data representing circuit identifiers, formatted as integers.'}, {'name': 'A string representing the name of a race.'}, {'date': 'A list of dates in the format YYYY-MM-DD, possibly representing start and end dates with a duration in between.'}, {'time': 'Time data representing the time of a location in HH:MM:SS format.'}, {'url': 'A collection of texts in URL format related to the introduction of races.'}], 'columns_right': [{'driverStandingsId': 'DriverStandingsId is a numerical data type represented as an integer, serving as a unique identification number for driver standing records.'}, {'raceId': 'Numerical data in integer format representing race identifiers (raceId) and constructor reference names (id) for various races.'}, {'driverId': 'Numerical data in integer format representing unique identifiers for drivers.'}, {'points': 'Numerical data representing the points acquired in each race, formatted as a float.'}, {'position': 'Numerical data representing the position or track of circuits, formatted as integers.'}, {'positionText': 'Numerical data in integer format representing position text, which is a textual description of a position but is not particularly useful.'}, {'wins': 'Numerical data representing wins, formatted as integers.'}], 'type': 'combine', 'values': ['raceId', 'driverId']}}, {'function': 'http://127.0.0.1:5000/products/formula_1/results', 'filter_dict': {'product': 'formula_1_results'}}, {'function': 'http://127.0.0.1:5200/filter', 'filter_dict': {'conditions': {'raceId': 'value_to_filter_by', 'driverId': 'value_to_filter_by'}}}]}",0,50.49134016036987,0.0,0.0,0.0,0,0,1
892,State the driver with the most points scored. Find his full name with that points.,moderate,fromula_1,"retrieve results, sum points group by driverm, get values, retrieve drivers join","{""plans"": [{""function"": ""http://127.0.0.1:5200/retrieve"",""filter_dict"": {""product"": ""http://127.0.0.1:5000/products/formula_1/drivers""}},{""function"": ""http://127.0.0.1:5200/retrieve"",""filter_dict"": {""product"": ""http://127.0.0.1:5000/products/formula_1/driverStandings""}},{""function"": ""http://127.0.0.1:5200/sum"", ""filter_dict"": {""group_by"": ""driverId"", ""column"": ""points""}},{""function"": ""http://127.0.0.1:5200/max"", ""filter_dict"": {""columns"": ""driverId"", ""rows"": 1}},{""function"":'combination', 'filter_dict': {""columns_left"": ""driverId"", ""columns_right"": ""driverId"", ""type"": ""equals"", ""values"": [""None""]}}]}",-,-,the most points scored refers to max(points); Full name of the driver refers to drivers.forename and drivers.surname;,"{'plans': [{'function': 'http://127.0.0.1:5000/products/formula_1/driverStandings', 'filter_dict': {'product': 'driverStandings'}}, {'function': 'http://127.0.0.1:5200/sortby', 'filter_dict': {'columns': 'points', 'ascending': 'False'}}, {'function': 'http://127.0.0.1:5200/filter', 'filter_dict': {'product': 'driverStandings', 'conditions': {'driverId': 'top_record_driverId'}}}, {'function': 'http://127.0.0.1:5000/products/formula_1/driverStandings', 'filter_dict': {'product': 'driverStandings'}}, {'function': 'combination', 'filter_dict': {'columns_left': [{'Id': 'Numerical data in integer format representing post IDs.'}, {'PostTypeId': 'Numerical data in integer format representing the Post Type Id, which is the identifier for a specific post type.'}, {'AcceptedAnswerId': 'Numerical data in float format representing a value, and an integer representing the accepted answer ID of a post.'}, {'CreaionDate': 'Creation date of the post in datetime format YYYY-MM-DD HH:MM:SS'}, {'Score': 'Numerical data representing the score of a post, formatted as integers.'}, {'ViewCount': 'Numerical data representing the view count of a post, formatted as a float. Higher values indicate greater popularity.'}, {'Body': 'HTML formatted text containing paragraphs and code snippets for the body of a post.'}, {'OwnerUserId': 'Numerical data in float format representing a value, and an integer representing the Owner User Id.'}, {'LasActivityDate': 'Last Activity Date in datetime format, represented as YYYY-MM-DD HH:MM:SS.'}, {'Title': 'A string format data representing the title of a post.'}, {'Tags': ""Data consists of text entries formatted as <category1><category2><category3>, with tags indicating the post's subject matter.""}, {'AnswerCount': 'Numerical data representing the total number of answers to a post, formatted as an integer.'}, {'CommentCount': 'Numerical data representing the total number of comments on a post, formatted as integers.'}, {'FavoriteCount': 'Numerical data representing the total number of favorites for a post, formatted as a float. Higher values indicate more valuable posts.'}, {'LastEditorUserId': 'Numerical data in float format representing a value, and an integer representing the ID of the last editor.'}, {'LastEditDate': 'Dates in the format YYYY-MM-DD HH:MM:SS representing the last edit date and time.'}, {'CommunityOwnedDate': 'Community Owned Date in datetime format, represented as YYYY-MM-DD HH:MM:SS.'}, {'ParentId': 'This data consists of a numerical value in float format representing the ParentId of a post. It indicates the ID of the parent post, where an integer value is used. If the ParentId is null, it signifies that the post is a root post; otherwise, it is a child post of another post.'}, {'ClosedDate': 'ClosedDate represents the date and time when a post is marked as closed, formatted as YYYY-MM-DD HH:MM:SS. A null or empty value indicates the post is not well-finished, while a non-null value signifies that the post is well-finished.'}, {'OwnerDisplayName': 'A string representing the display name of the post owner.'}, {'LastEditorDisplayName': 'A string representing the display name of the last editor.'}], 'columns_right': [{'Id': 'Numerical data in integer format representing post IDs.'}, {'PostTypeId': 'Numerical data in integer format representing the Post Type Id, which is the identifier for a specific post type.'}, {'AcceptedAnswerId': 'Numerical data in float format representing a value, and an integer representing the accepted answer ID of a post.'}, {'CreaionDate': 'Creation date of the post in datetime format YYYY-MM-DD HH:MM:SS'}, {'Score': 'Numerical data representing the score of a post, formatted as integers.'}, {'ViewCount': 'Numerical data representing the view count of a post, formatted as a float. Higher values indicate greater popularity.'}, {'Body': 'HTML formatted text containing paragraphs and code snippets for the body of a post.'}, {'OwnerUserId': 'Numerical data in float format representing a value, and an integer representing the Owner User Id.'}, {'LasActivityDate': 'Last Activity Date in datetime format, represented as YYYY-MM-DD HH:MM:SS.'}, {'Title': 'A string format data representing the title of a post.'}, {'Tags': ""Data consists of text entries formatted as <category1><category2><category3>, with tags indicating the post's subject matter.""}, {'AnswerCount': 'Numerical data representing the total number of answers to a post, formatted as an integer.'}, {'CommentCount': 'Numerical data representing the total number of comments on a post, formatted as integers.'}, {'FavoriteCount': 'Numerical data representing the total number of favorites for a post, formatted as a float. Higher values indicate more valuable posts.'}, {'LastEditorUserId': 'Numerical data in float format representing a value, and an integer representing the ID of the last editor.'}, {'LastEditDate': 'Dates in the format YYYY-MM-DD HH:MM:SS representing the last edit date and time.'}, {'CommunityOwnedDate': 'Community Owned Date in datetime format, represented as YYYY-MM-DD HH:MM:SS.'}, {'ParentId': 'This data consists of a numerical value in float format representing the ParentId of a post. It indicates the ID of the parent post, where an integer value is used. If the ParentId is null, it signifies that the post is a root post; otherwise, it is a child post of another post.'}, {'ClosedDate': 'ClosedDate represents the date and time when a post is marked as closed, formatted as YYYY-MM-DD HH:MM:SS. A null or empty value indicates the post is not well-finished, while a non-null value signifies that the post is well-finished.'}, {'OwnerDisplayName': 'A string representing the display name of the post owner.'}, {'LastEditorDisplayName': 'A string representing the display name of the last editor.'}], 'type': 'combine', 'values': ['forename', 'surname', 'points']}}]}",0,67.84824562072754,0.0,0.0,0.0,0,0,1
988,List down top 3 German drivers who has the shortest average pit stop duration and were born between 1980-1985.,challenging,fromula_1,"retrieve racesm filter Singapore Grand Prix, year 2009, retrieve results, filter position 1 ","{'plans': [{'function': 'http://127.0.0.1:5200/retrieve','filter_dict': {'product': 'http://127.0.0.1:5000/products/formula_1/drivers'}},{'function': 'http://127.0.0.1:5200/filter', ""values"": {""conditions"": {""nationality"":""German"", ""dob"":{""min"":""1980-01-01"", ""max"": ""1985-12-31""}}}},{'function': 'http://127.0.0.1:5200/retrieve','filter_dict': {'product': 'http://127.0.0.1:5000/products/formula_1/pitStops'}},{""function"":""http://127.0.0.1:5200/mean"",""filter_dict"":{""columns"":""milliseconds"",""group_by"":""driverId""}},{'function':'combination', 'filter_dict':{'columns_left': 'driverId', 'columns_right': 'driverId', 'type': 'equals','values': ['None']}},{""function"":""http://127.0.0.1:5200/min"",""filter_dict"":{""column"":""milliseconds"",""rows"":3}}]}",-,-,"Full name of the driver refers to drivers.forename and drivers.surname; born between 1980-1985 refers to 1980<= year(dob) <=1985; Average pitstop duration refers to Divide(SUM(duration),COUNT(duration)); shortest average refers to Min(avg(duration));","{'plans': [{'function': 'http://127.0.0.1:5000/products/formula_1/driverStandings', 'filter_dict': {'product': 'driverStandings'}}, {'function': 'http://127.0.0.1:5000/products/formula_1/pitStops', 'filter_dict': {'product': 'pitStops'}}, {'function': 'http://127.0.0.1:5200/filter', 'filter_dict': {'product': 'http://127.0.0.1:5000/products/formula_1/driverStandings', 'conditions': {'dob': {'year': {'min': 1980, 'max': 1985}}, 'nationality': 'German'}}}, {'function': 'http://127.0.0.1:5200/mean', 'filter_dict': {'product': 'http://127.0.0.1:5000/products/formula_1/pitStops', 'group_by': None, 'columns': ['duration']}}, {'function': 'combination', 'filter_dict': {'columns_left': ['driverId', 'forename', 'surname'], 'columns_right': ['driverId', 'average(duration)'], 'type': 'inner', 'values': 'driverId'}}, {'function': 'http://127.0.0.1:5200/returnResult', 'filter_dict': {}}]}",0,41.8690402507782,0.0,0.0,0.0,0,0,1
1096,Calculate the average overall rating of Pietro Marino.,moderate,football,"retrieve player, filter for name, retrieve attributes, mean group by player, combine","{""plans"":[{""function"":""http://127.0.0.1:5200/retrieve"",""filter_dict"":{""product"":""http://127.0.0.1:5000/products/european_football_2/Player""}},{""function"":""http://127.0.0.1:5200/filter"",""filter_dict"":{""conditions"":{""player_name"":""Pietro Marino""}}},{""function"":""http://127.0.0.1:5200/retrieve"",""filter_dict"":{""product"":""http://127.0.0.1:5000/products/european_football_2/Player_Attributes""}},{""function"":""http://127.0.0.1:5200/mean"",""filter_dict"":{""group_by"":[""player_api_id""],""columns"":[""overall_rating""]}},{""function"":'combination', 'filter_dict': {""columns_left"": ""player_api_id"", ""columns_right"": ""player_api_id"", ""type"": ""equals"", ""values"": [""None""]}}]}",-,-,Pietro Marino refers to player_name = 'Pietro Marino'; average overall rating AVG(T1.overall_rating),"{'plans': [{'function': 'http://127.0.0.1:5000/products/codebase_community/posts', 'filter_dict': {'product': 'codebase_community'}}, {'function': 'http://127.0.0.1:5000/products/codebase_community/posts', 'filter_dict': {'product': 'codebase_community'}}, {'function': 'http://127.0.0.1:5200/filter', 'filter_dict': {'conditions': {'forename': 'Pietro', 'surname': 'Marino'}}}, {'function': 'http://127.0.0.1:5200/filter', 'filter_dict': {'product': 'http://127.0.0.1:5000/products/codebase_community/posts', 'conditions': {'driverId': 'Pietro Marino'}}}, {'function': 'http://127.0.0.1:5200/mean', 'filter_dict': {'group_by': None, 'columns': ['Score']}}, {'function': 'combination', 'filter_dict': {'columns_left': [{'Id': 'Numerical data in integer format representing post IDs.'}, {'PostTypeId': 'Numerical data in integer format representing the Post Type Id, which is the identifier for a specific post type.'}, {'AcceptedAnswerId': 'Numerical data in float format representing a value, and an integer representing the accepted answer ID of a post.'}, {'CreaionDate': 'Creation date of the post in datetime format YYYY-MM-DD HH:MM:SS'}, {'Score': 'Numerical data representing the score of a post, formatted as integers.'}, {'ViewCount': 'Numerical data representing the view count of a post, formatted as a float. Higher values indicate greater popularity.'}, {'Body': 'HTML formatted text containing paragraphs and code snippets for the body of a post.'}, {'OwnerUserId': 'Numerical data in float format representing a value, and an integer representing the Owner User Id.'}, {'LasActivityDate': 'Last Activity Date in datetime format, represented as YYYY-MM-DD HH:MM:SS.'}, {'Title': 'A string format data representing the title of a post.'}, {'Tags': ""Data consists of text entries formatted as <category1><category2><category3>, with tags indicating the post's subject matter.""}, {'AnswerCount': 'Numerical data representing the total number of answers to a post, formatted as an integer.'}, {'CommentCount': 'Numerical data representing the total number of comments on a post, formatted as integers.'}, {'FavoriteCount': 'Numerical data representing the total number of favorites for a post, formatted as a float. Higher values indicate more valuable posts.'}, {'LastEditorUserId': 'Numerical data in float format representing a value, and an integer representing the ID of the last editor.'}, {'LastEditDate': 'Dates in the format YYYY-MM-DD HH:MM:SS representing the last edit date and time.'}, {'CommunityOwnedDate': 'Community Owned Date in datetime format, represented as YYYY-MM-DD HH:MM:SS.'}, {'ParentId': 'This data consists of a numerical value in float format representing the ParentId of a post. It indicates the ID of the parent post, where an integer value is used. If the ParentId is null, it signifies that the post is a root post; otherwise, it is a child post of another post.'}, {'ClosedDate': 'ClosedDate represents the date and time when a post is marked as closed, formatted as YYYY-MM-DD HH:MM:SS. A null or empty value indicates the post is not well-finished, while a non-null value signifies that the post is well-finished.'}, {'OwnerDisplayName': 'A string representing the display name of the post owner.'}, {'LastEditorDisplayName': 'A string representing the display name of the last editor.'}], 'columns_right': [{'Id': 'Numerical data in integer format representing post IDs.'}, {'PostTypeId': 'Numerical data in integer format representing the Post Type Id, which is the identifier for a specific post type.'}, {'AcceptedAnswerId': 'Numerical data in float format representing a value, and an integer representing the accepted answer ID of a post.'}, {'CreaionDate': 'Creation date of the post in datetime format YYYY-MM-DD HH:MM:SS'}, {'Score': 'Numerical data representing the score of a post, formatted as integers.'}, {'ViewCount': 'Numerical data representing the view count of a post, formatted as a float. Higher values indicate greater popularity.'}, {'Body': 'HTML formatted text containing paragraphs and code snippets for the body of a post.'}, {'OwnerUserId': 'Numerical data in float format representing a value, and an integer representing the Owner User Id.'}, {'LasActivityDate': 'Last Activity Date in datetime format, represented as YYYY-MM-DD HH:MM:SS.'}, {'Title': 'A string format data representing the title of a post.'}, {'Tags': ""Data consists of text entries formatted as <category1><category2><category3>, with tags indicating the post's subject matter.""}, {'AnswerCount': 'Numerical data representing the total number of answers to a post, formatted as an integer.'}, {'CommentCount': 'Numerical data representing the total number of comments on a post, formatted as integers.'}, {'FavoriteCount': 'Numerical data representing the total number of favorites for a post, formatted as a float. Higher values indicate more valuable posts.'}, {'LastEditorUserId': 'Numerical data in float format representing a value, and an integer representing the ID of the last editor.'}, {'LastEditDate': 'Dates in the format YYYY-MM-DD HH:MM:SS representing the last edit date and time.'}, {'CommunityOwnedDate': 'Community Owned Date in datetime format, represented as YYYY-MM-DD HH:MM:SS.'}, {'ParentId': 'This data consists of a numerical value in float format representing the ParentId of a post. It indicates the ID of the parent post, where an integer value is used. If the ParentId is null, it signifies that the post is a root post; otherwise, it is a child post of another post.'}, {'ClosedDate': 'ClosedDate represents the date and time when a post is marked as closed, formatted as YYYY-MM-DD HH:MM:SS. A null or empty value indicates the post is not well-finished, while a non-null value signifies that the post is well-finished.'}, {'OwnerDisplayName': 'A string representing the display name of the post owner.'}, {'LastEditorDisplayName': 'A string representing the display name of the last editor.'}], 'type': 'Combine', 'values': ""Combine the filtered 'drivers' data with the processed average points from 'results'.""}}]}",0,75.59255838394165,0.0,0.0,0.0,0,0,1
1145,Which top 4 leagues had the most games in the 2015-2016 season?,simple,football,"retrieve match, filter by season, count group by, max,retrieve legue, combine","{""plans"":[{""function"":""http://127.0.0.1:5200/retrieve"",""filter_dict"":{""product"":""http://127.0.0.1:5000/products/european_football_2/Match""}},{""function"":""http://127.0.0.1:5200/filter"",""filter_dict"":{""season"":""2015/2016""}},{""function"":""http://127.0.0.1:5200/count"",""filter_dict"":{""group_by"":[""league_id""],""columns"":[""league_id""]}},{""function"":""http://127.0.0.1:5200/max"",""filter_dict"":{""rows"":4,""columns"":[""count""]}},{""function"":""http://127.0.0.1:5200/retrieve"",""filter_dict"":{""product"":""http://127.0.0.1:5000/products/european_football_2/League""}},{""function"":'combination', 'filter_dict': {""columns_left"": ""league_id"", ""columns_right"": ""id"", ""type"": ""equals"", ""values"": [""None""]}}]}",-,-,in the 2015-2016 season refers to season = '2015/2016'; league with most games refers to League.name where MAX(COUNT(id)); ,"{'plans': [{'function': 'http://127.0.0.1:5000/products/european_football_2/Match', 'filter_dict': {'product': 'Match'}}, {'function': 'http://127.0.0.1:5200/filter', 'filter_dict': {'product': 'http://127.0.0.1:5000/products/european_football_2/Match', 'conditions': {'season': '2015/2016'}}}, {'function': 'http://127.0.0.1:5200/count', 'filter_dict': {'product': 'count'}}, {'function': 'http://127.0.0.1:5000/products/european_football_2/League', 'filter_dict': {'product': 'League'}}, {'function': 'combination', 'filter_dict': {'columns_left': [{'id': 'A numerical dataset containing unique integer IDs for matches.'}, {'country_id': 'A numerical dataset containing country IDs represented as integers.'}, {'league_id': 'Numerical data representing league IDs in integer format.'}, {'season': 'Text data representing the season of a match in the format YYYY/YYYY.'}, {'stage': 'Numerical data representing the stage of a match, formatted as integers.'}, {'date': 'Dates in the format YYYY-MM-DD HH:MM:SS representing the date and time of a match.'}, {'match_api_id': 'Numerical data in integer format representing the unique identifier for a match API.'}, {'home_team_api_id': 'Numerical data representing the home team API ID as an integer.'}, {'away_team_api_id': 'Numerical data in integer format representing the API ID of the away team.'}, {'home_team_goal': 'Numerical data representing the goals scored by the home team, formatted as integers.'}, {'away_team_goal': 'Numerical data representing the goals scored by the away team, formatted as integers.'}, {'home_player_X1': 'Numerical data representing home player statistics, formatted as float or NaN.'}, {'home_player_X2': 'Numerical data representing home player performance, formatted as a float or NaN for missing values.'}, {'home_player_X3': 'Numerical data representing home player statistics, formatted as float or NaN.'}, {'home_player_X4': ""Numerical data representing a float value for the variable 'home_player_X4'.""}, {'home_player_X5': 'Numerical data representing home player statistics, formatted as float or NaN.'}, {'home_player_X6': ""Numerical data representing the home player's performance metric, formatted as a float.""}, {'home_player_X7': 'Numerical data representing home player statistics, formatted as float or NaN.'}, {'home_player_X8': 'Numerical data representing home player statistics, formatted as float or NaN.'}, {'home_player_X9': ""Numerical data representing a float value for the variable 'home_player_X9'.""}, {'home_player_X10': 'Numerical data representing home player statistics, formatted as float or NaN.'}, {'home_player_X11': ""Numerical data representing the home player's performance metrics, formatted as a float.""}, {'away_player_X1': 'Numerical data representing player statistics, formatted as float values or NaN for missing data.'}, {'away_player_X2': ""Numerical data representing the away player's performance metric, formatted as a float or NaN for missing values.""}, {'away_player_X3': 'Numerical data representing the performance or statistics of an away player, formatted as a float.'}, {'away_player_X4': ""Numerical data representing a float value for the variable 'away_player_X4'.""}, {'away_player_X5': 'Numerical data representing the performance or statistics of an away player, formatted as a float.'}, {'away_player_X6': ""Numerical data representing the away player's performance metric, formatted as a float or NaN for missing values.""}, {'away_player_X7': ""Numerical data representing the away player's performance metric, formatted as a float or NaN for missing values.""}, {'away_player_X8': 'Numerical data representing the performance or statistics of an away player, formatted as a float.'}, {'away_player_X9': ""Numerical data representing a float value for the variable 'away_player_X9'.""}, {'away_player_X10': 'Numerical data representing the performance or statistics of an away player, formatted as a float.'}, {'away_player_X11': 'Numerical data representing player statistics, formatted as float values or NaN for missing data.'}, {'home_player_Y1': 'Numerical data representing home player statistics, formatted as float or NaN.'}, {'home_player_Y2': 'Numerical data representing home player statistics, formatted as float values or NaN for missing data.'}, {'home_player_Y3': 'Numerical data representing home player statistics, formatted as float or NaN.'}, {'home_player_Y4': ""Numerical data representing the home player's performance metric, formatted as a float or NaN for missing values.""}, {'home_player_Y5': ""Numerical data representing the home player's performance metric, formatted as a float.""}, {'home_player_Y6': ""Numerical data representing the home player's Y6 score, formatted as a float.""}, {'home_player_Y7': 'Numerical data representing home player statistics, formatted as float or NaN.'}, {'home_player_Y8': ""Numerical data representing the home player's performance metric, formatted as a float.""}, {'home_player_Y9': 'Numerical data representing home player statistics, formatted as float or NaN.'}, {'home_player_Y10': ""Numerical data representing the home player's performance metric, formatted as a float.""}, {'home_player_Y11': ""Numerical data representing the home player's performance metric, formatted as a float.""}, {'away_player_Y1': ""Numerical data representing the away player's Y1 position, formatted as a float or NaN for missing values.""}, {'away_player_Y2': ""Numerical data representing the away player's Y2 value, formatted as a float or NaN.""}, {'away_player_Y3': 'Numerical data representing the performance or statistics of an away player, formatted as a float or NaN for missing values.'}, {'away_player_Y4': 'Numerical data representing the performance or statistics of an away player, formatted as a float or NaN for missing values.'}, {'away_player_Y5': 'Numerical data representing away player statistics, formatted as float or NaN.'}, {'away_player_Y6': 'Numerical data representing the performance or statistics of an away player, formatted as a float.'}, {'away_player_Y7': 'Numerical data representing the performance or statistics of an away player, formatted as a float.'}, {'away_player_Y8': 'Numerical data representing the performance or statistics of an away player, formatted as a float or NaN for missing values.'}, {'away_player_Y9': ""Numerical data representing the away player's performance metric, formatted as a float or NaN for missing values.""}, {'away_player_Y10': ""Numerical data representing the away player's performance metric, formatted as a float.""}, {'away_player_Y11': 'Numerical data representing the performance or statistics of an away player, formatted as a float or NaN for missing values.'}, {'home_player_1': 'Numerical data representing the performance or statistics of home player 1, formatted as a float.'}, {'home_player_2': 'Numerical data representing a float value associated with home_player_2.'}, {'home_player_3': 'Numerical data representing a float value for the home player 3.'}, {'home_player_4': 'Numerical data representing a float value for home_player_4.'}, {'home_player_5': 'Numerical data representing a float value for home player 5.'}, {'home_player_6': 'Numerical data representing a float value for home_player_6.'}, {'home_player_7': 'Numerical data representing a floating-point value for home player 7.'}, {'home_player_8': 'Numerical data representing a float value for home player 8.'}, {'home_player_9': 'Numerical data representing a floating-point value for home player 9.'}, {'home_player_10': 'Numerical data representing a float value for the home player, specifically player number 10.'}, {'home_player_11': 'Numerical data representing the performance or statistics of the home player, formatted as a float.'}, {'away_player_1': 'Numerical data in floating point format representing statistics for away player 1.'}, {'away_player_2': 'Numerical data representing a float value for away_player_2.'}, {'away_player_3': ""Numerical data representing a float value for the away player's performance metric.""}, {'away_player_4': ""Numerical data representing a float value for the variable 'away_player_4'.""}, {'away_player_5': ""Numerical data representing a float value for the variable 'away_player_5'.""}, {'away_player_6': 'Numerical data representing the performance or statistics of away player 6, formatted as a float or NaN for missing values.'}, {'away_player_7': ""Numerical data representing a float value for the variable 'away_player_7'.""}, {'away_player_8': ""Numerical data representing a float value for 'away_player_8'.""}, {'away_player_9': ""Numerical data representing a float value for the variable 'away_player_9'.""}, {'away_player_10': ""Numerical data representing a float value for the away player, specifically labeled as 'away_player_10'.""}, {'away_player_11': 'Numerical data representing the performance or statistics of the away player, formatted as a float.'}, {'goal': 'This data represents a goal event in a sports match, formatted as XML-like text. It includes details such as goal value, player ID, team ID, elapsed time, and various statistics related to the goal.'}, {'shoton': ""Structured data representing statistics of shots on goal in a match, including the number of shots on target and blocked shots, with 'shoton' as an integer value.""}, {'shotoff': 'Structured data representing shot off events in a match, including statistics and player information. The format includes integers for various metrics, strings for event types, and coordinates as an array of integers.'}, {'foulcommit': 'XML data containing sports foul commit events, structured with fields for fouls committed (integer), event incident type (integer), elapsed time (integer), player identifiers (integer), optional subtype (text), team identifier (integer), sort order (integer), and a unique event ID (integer).'}, {'card': 'This data represents match card information in a structured format, including attributes such as comments, statistics, event types, elapsed time, card types, player identifiers, sorting order, team identifiers, and unique card IDs. The format is XML-like, encapsulated within <card> tags.'}, {'cross': 'Structured data representing match events related to crosses, including statistics such as the number of crosses and corners, player and team identifiers, event types, elapsed time, and coordinates of the event.'}, {'corner': 'This data represents a corner kick event in a match, including various attributes such as corner count, player involved, coordinates, elapsed time, and event type. The format includes text and integer types.'}, {'possession': 'XML data containing possession statistics with fields for possession value, event incident type, elapsed time, subtype, sort order, home and away possession integers, and optional statistics.'}, {'B365H': 'Numerical data representing float values, specifically for B365H.'}, {'B365D': 'Numerical data representing odds or values, formatted as float or NaN (Not a Number).'}, {'B365A': 'Numerical data in float format representing B365A values.'}, {'BWH': 'Numerical data representing body weight and height in float format.'}, {'BWD': 'Numerical data in float format representing BWD values.'}, {'BWA': 'Numerical data in float format, representing a value labeled as BWA.'}, {'IWH': 'Numerical data in float format, possibly representing a measurement or value related to IWH.'}, {'IWD': 'Numerical data in float format or NaN, representing potentially missing values.'}, {'IWA': 'Numerical data in float format, representing IWA values.'}, {'LBH': 'Numerical data in float format representing LBH (Length, Breadth, Height) measurements.'}, {'LBD': 'Numerical data in float format representing LBD values.'}, {'LBA': 'Numerical data in float format representing LBA (Logical Block Addressing) values.'}, {'PSH': 'Numerical data in float format representing PSH values.'}, {'PSD': 'Numerical data in float format representing Power Spectral Density (PSD).'}, {'PSA': 'Numerical data representing PSA levels, formatted as a float.'}, {'WHH': 'Numerical data in float format, possibly representing a measurement or value.'}, {'WHD': 'Numerical data in float format, possibly representing a measurement or value labeled as WHD.'}, {'WHA': 'Numerical data in float format, possibly representing a measurement or value.'}, {'SJH': ""Numerical data in float format, possibly representing a measurement or value associated with 'SJH'.""}, {'SJD': 'Numerical data in float format, labeled as SJD.'}, {'SJA': 'Numerical data in float format, possibly representing a measurement or value related to SJA.'}, {'VCH': 'Numerical data in float format representing VCH values.'}, {'VCD': 'Numerical data in float format representing VCD (Volatile Organic Compounds) measurements.'}, {'VCA': 'Numerical data in float format representing VCA values.'}, {'GBH': 'Numerical data representing GBH values in float format.'}, {'GBD': 'Numerical data representing a float value, possibly related to GBD (Global Burden of Disease) metrics.'}, {'GBA': 'Numerical data in float format representing GBA values.'}, {'BSH': 'Numerical data in float format, labeled as BSH.'}, {'BSD': 'Numerical data in float format, possibly representing a value related to BSD.'}, {'BSA': 'Numerical data representing Body Surface Area (BSA) in float format.'}], 'columns_right': [{'id': 'Numerical data in integer format representing unique identifiers for leagues.'}, {'country_id': 'Numerical data representing unique country identifiers in integer format.'}, {'name': 'String representing the name of a football league.'}], 'type': 'inner', 'values': {'left_key': 'league_id', 'right_key': 'id'}}}]}",0,121.08472228050232,0.0,0.0,0.0,0,0,1
1147,Please name one player whose overall strength is the greatest.,simple,football,"retrieve player attributes, max overall_attributes 1, retrieve player, combine ","{""plans"":[{""function"":""http://127.0.0.1:5200/retrieve"",""filter_dict"":{""product"":""http://127.0.0.1:5000/products/european_football_2/Player_Attributes""}},{""function"":""http://127.0.0.1:5200/max"",""filter_dict"":{""column"":""overall_rating"",""rows"":1}},{""function"":""http://127.0.0.1:5200/retrieve"",""filter_dict"":{""product"":""http://127.0.0.1:5000/products/european_football_2/Player""}},{""function"":'combination', 'filter_dict': {""columns_left"": ""player_api_id"", ""columns_right"": ""player_api_id"", ""type"": ""equals"", ""values"": [""None""]}}]}",-,-,overall strength is the greatest refers to MAX(overall_rating),"{'plans': [{'function': 'http://127.0.0.1:5000/products/european_football_2/Player_Attributes', 'filter_dict': {'product': 'Player_Attributes'}}, {'function': 'http://127.0.0.1:5200/max', 'filter_dict': {'product': 'http://127.0.0.1:5000/products/european_football_2/Player_Attributes', 'columns': ['overall_rating']}}, {'function': 'http://127.0.0.1:5200/max', 'filter_dict': {'columns': ['overall_rating'], 'rows': 1, 'product': 'http://127.0.0.1:5000/products/european_football_2/Player_Attributes'}}, {'function': 'http://127.0.0.1:5000/products/european_football_2/Player', 'filter_dict': {'product': 'Player'}}, {'function': 'combination', 'filter_dict': {'columns_left': [{'id': 'A numerical dataset containing unique integer IDs for players.'}, {'player_fifa_api_id': 'Numerical data representing the FIFA API ID of a player, formatted as an integer.'}, {'player_api_id': 'Numerical data in integer format representing the player API ID.'}, {'date': 'A collection of date and time entries formatted as YYYY-MM-DD HH:MM:SS, including additional text fields.'}, {'overall_rating': 'Numerical data representing the overall rating of a player, formatted as an integer between 0 and 100, calculated by FIFA. A higher rating indicates stronger overall strength.'}, {'potential': 'Numerical data representing the potential score of a player, formatted as a float. The potential score ranges from 0 to 100, with higher values indicating greater player potential.'}, {'preferred_foot': ""A string representing a player's preferred foot when attacking, which can be either 'right' or 'left'.""}, {'attacking_work_rate': ""Categorical data representing a player's attacking work rate, formatted as string values including 'stoc', 'norm', 'low', 'medium', 'high', 'le', 'y', and NaN. The values indicate the player's involvement in attacking actions, with descriptions for each level of work rate.""}, {'defensive_work_rate': ""Mixed data type containing integers and strings, representing various attributes of a player's defensive work rate, including a qualitative assessment of their defensive behavior during gameplay.""}, {'crossing': ""Crossing score is a numerical value in float format, ranging from 0 to 100, that quantifies a player's ability to perform crosses into the opponent's box, with higher scores indicating better performance.""}, {'finishing': ""Numerical data representing a player's finishing rate as a float, calculated by FIFA, with a value range of 0 to 100.""}, {'heading_accuracy': ""Numerical data representing the player's heading accuracy as a float value, calculated by FIFA, ranging from 0 to 100.""}, {'short_passing': ""A numerical data type representing a player's short passing score as a float, calculated by FIFA, with a range of 0 to 100.""}, {'volleys': ""Numerical data representing a player's volley score, formatted as a float, with values ranging from 0 to 100, calculated by FIFA.""}, {'dribbling': ""Numerical data representing a player's dribbling score as a float, calculated by FIFA, ranging from 0 to 100.""}, {'curve': ""Numerical data representing a player's curve score as a float, ranging from 0 to 100, calculated by FIFA.""}, {'free_kick_accuracy': ""Free kick accuracy is a numerical value representing a player's ability to successfully execute free kicks, formatted as a float and ranging from 0 to 100, calculated by FIFA.""}, {'long_passing': ""A numerical data type representing a player's long passing score as a float, calculated by FIFA, with a range of 0 to 100.""}, {'ball_control': ""Numerical data representing a player's ball control score, formatted as a float, with a range from 0 to 100, calculated by FIFA.""}, {'acceleration': ""Numerical data representing a player's acceleration score, formatted as a float, with a range of 0 to 100, calculated by FIFA.""}, {'sprint_speed': ""Numerical data representing a player's sprint speed, formatted as a float, with values ranging from 0 to 100, calculated by FIFA.""}, {'agility': ""Numerical data representing a player's agility as a float value, calculated by FIFA, ranging from 0 to 100.""}, {'reactions': ""Numerical data representing the player's reactions score, a float value calculated by FIFA, ranging from 0 to 100.""}, {'balance': ""Numerical data representing a player's balance score, formatted as a float, with a range of 0 to 100, calculated by FIFA.""}, {'shot_power': ""Numerical data representing a player's shot power, formatted as a float, with a value range of 0 to 100, calculated by FIFA.""}, {'jumping': ""Numerical data representing a player's jumping score, formatted as a float, with a range of 0 to 100, calculated by FIFA.""}, {'stamina': ""Numerical data representing the player's stamina score as a float, ranging from 0 to 100, calculated by FIFA.""}, {'strength': ""Numerical data representing a player's strength score as a float, calculated by FIFA, ranging from 0 to 100.""}, {'long_shots': ""Numerical data representing a player's long shots score, formatted as a float, with a range of 0 to 100, calculated by FIFA.""}, {'aggression': ""Numerical data representing a player's aggression score as a float, calculated by FIFA, ranging from 0 to 100.""}, {'interceptions': ""Numerical data representing a player's interceptions score, formatted as a float, with a range of 0 to 100, calculated by FIFA.""}, {'positioning': ""Numerical data representing a player's positioning score, formatted as an integer between 0 and 100, calculated by FIFA.""}, {'vision': ""Numerical data representing a player's vision score in FIFA, formatted as a float, with a range of 0 to 100.""}, {'penalties': ""Numerical data representing a player's penalties score, formatted as a float, with a range of 0 to 100, calculated by FIFA.""}, {'marking': ""Numerical data representing a player's marking score, formatted as a float, with a value range of 0 to 100, calculated by FIFA.""}, {'standing_tackle': ""A numerical score representing a player's standing tackle ability, formatted as a float, with a range from 0 to 100, calculated by FIFA.""}, {'sliding_tackle': ""A numerical data point representing a player's sliding tackle score, formatted as a float, with a range from 0 to 100, calculated by FIFA.""}, {'gk_diving': ""Numerical data representing a player's goalkeeping diving score, formatted as a float, with a range of 0 to 100, calculated by FIFA.""}, {'gk_handling': ""Numerical data representing a player's goalkeeping handling score, formatted as a float, with a value range of 0 to 100, calculated by FIFA.""}, {'gk_kicking': ""Numerical data representing a player's goalkeeping kicking score, formatted as a float, with a range from 0 to 100, calculated by FIFA.""}, {'gk_positioning': ""Numerical data representing a player's goalkeeping positioning score, formatted as a float, with a value range of 0 to 100, calculated by FIFA.""}, {'gk_reflexes': ""Numerical data representing a player's goalkeeping reflexes score, formatted as a float, with a range from 0 to 100, calculated by FIFA.""}], 'columns_right': [{'id': 'A numerical dataset containing unique player IDs represented as integers.'}, {'player_api_id': 'Numerical data in integer format representing the player API ID.'}, {'player_name': ""A collection of player names formatted as strings, typically in the format 'First Last'.""}, {'player_fifa_api_id': 'Numerical data representing the FIFA API ID of a player, formatted as an integer.'}, {'birthday': ""Player's birthday in datetime format, represented as YYYY-MM-DD HH:MM:SS, indicating the exact date and time of birth.""}, {'height': ""Numerical data representing the player's height in integers.""}, {'weight': ""Numerical data representing the player's weight in integers.""}], 'type': 'join', 'values': ['player_api_id']}}, {'function': 'http://127.0.0.1:5200/max', 'filter_dict': {'columns': ['overall_rating'], 'rows': 1}}]}",0,80.05351495742798,0.0,0.0,0.0,0,0,1
1032,Give the name of the league with the highest matches of all time and how many matches were played in the said league.,moderate,football,"retrieve match, group by count league_id, max, retrieve league, combine","{""plans"":[{""function"":""http://127.0.0.1:5200/retrieve"",""filter_dict"":{""product"":""http://127.0.0.1:5000/products/european_football_2/Match""}},{""function"":""http://127.0.0.1:5200/count"",""filter_dict"":{""group_by"":[""league_id""],""column"":""league_id""}},{""function"":""http://127.0.0.1:5200/max"",""filter_dict"":{""column"":""count"",""rows"":1}},{""function"":""http://127.0.0.1:5200/retrieve"",""filter_dict"":{""product"":""http://127.0.0.1:5000/products/european_football_2/League""}},{""function"":'combination', 'filter_dict': {""columns_left"": ""league_id"", ""columns_right"": ""id"", ""type"": ""equals"", ""values"": [""None""]}}]}",-,-,league with highest matches of all time refers to MAX(COUNT(league_id));,"{'plans': [{'function': 'http://127.0.0.1:5000/products/european_football_2/Match', 'filter_dict': {'product': 'Match'}}, {'function': 'http://127.0.0.1:5200/count', 'filter_dict': {'columns': 'league_id', 'unique': 'False'}}, {'function': 'http://127.0.0.1:5200/sortby', 'filter_dict': {'columns': 'match_count', 'ascending': 'False'}}, {'function': 'http://127.0.0.1:5000/products/european_football_2/League', 'filter_dict': {'product': 'League'}}, {'function': 'combination', 'filter_dict': {'columns_left': ['id', 'name'], 'columns_right': ['league_id', 'match_count'], 'type': 'join', 'values': {'on': 'league_id'}}}]}",0,30.494065523147583,0.0,0.0,0.0,0,0,1
1114,"""What was the average overall rating for Marko Arnautovic from 2007/2/22 to 2016/4/21?""",challenging,football,"retrieve player, filter player_name, retrieve player attrbutes filter date, combine, mean","{'plans': [{'function': 'http://127.0.0.1:5200/retrieve','filter_dict': {'product': 'http://127.0.0.1:5000/products/european_football_2/Player'}},{""function"": ""http://127.0.0.1:5200/filter"", ""values"": {""conditions"": {""player_name"": ""Marko Arnautovic""}}},{'function': 'http://127.0.0.1:5200/retrieve','filter_dict': {'product': 'http://127.0.0.1:5000/products/european_football_2/Player_Attributes'}},{""function"": ""http://127.0.0.1:5200/filter"", ""values"": {""conditions"": {""date"": {""max"":""2016-04-21 00:00:00"",""min"":""2007-02-22 00:00:00""}}}},{""function"":'combination', 'filter_dict':{'columns_left': 'player_api_id', 'columns_right': 'player_api_id', 'type': 'equals','values': ['None']}},{""function"":""http://127.0.0.1:5200/mean"",""filter_dict"":{""columns"":""overall_rating""}}]}",-,-,average overall rating refers to avg(overall_rating); Marko Arnautovic refers to player_name = 'Marko Arnautovic'; from 2007/2/22 to 2016/4/21 refers to the first 10 characters of date BETWEEN '2007-02-22' and '2016-04-21',"{'plans': [{'function': 'http://127.0.0.1:5000/products/european_football_2/Player', 'filter_dict': {'product': 'Player'}}, {'function': 'http://127.0.0.1:5200/filter', 'filter_dict': {'product': 'http://127.0.0.1:5000/products/european_football_2/Player', 'conditions': {'player_name': 'Marko Arnautovic'}}}, {'function': 'http://127.0.0.1:5000/products/european_football_2/Player', 'filter_dict': {'product': 'Player'}}, {'function': 'http://127.0.0.1:5000/products/european_football_2/Player_Attributes', 'filter_dict': {'product': 'Player_Attributes'}}, {'function': 'http://127.0.0.1:5200/filter', 'filter_dict': {'conditions': {'player_api_id': ""<Marko Arnautovic's player_api_id>"", 'date': {'min': '2007-02-22', 'max': '2016-04-21'}}, 'product': 'http://127.0.0.1:5000/products/european_football_2/Player_Attributes'}}, {'function': 'select', 'filter_dict': {'product': 'http://127.0.0.1:5000/products/european_football_2/Player_Attributes'}}, {'function': 'http://127.0.0.1:5200/mean', 'filter_dict': {'product': 'http://127.0.0.1:5000/products/european_football_2/Player_Attributes', 'group_by': None, 'columns': ['overall_rating']}}, {'function': 'combination', 'filter_dict': {'columns_left': [{'id': 'A numerical dataset containing unique player IDs represented as integers.'}, {'player_api_id': 'Numerical data in integer format representing the player API ID.'}, {'player_name': ""A collection of player names formatted as strings, typically in the format 'First Last'.""}, {'player_fifa_api_id': 'Numerical data representing the FIFA API ID of a player, formatted as an integer.'}, {'birthday': ""Player's birthday in datetime format, represented as YYYY-MM-DD HH:MM:SS, indicating the exact date and time of birth.""}, {'height': ""Numerical data representing the player's height in integers.""}, {'weight': ""Numerical data representing the player's weight in integers.""}], 'columns_right': [{'id': 'A numerical dataset containing unique integer IDs for players.'}, {'player_fifa_api_id': 'Numerical data representing the FIFA API ID of a player, formatted as an integer.'}, {'player_api_id': 'Numerical data in integer format representing the player API ID.'}, {'date': 'A collection of date and time entries formatted as YYYY-MM-DD HH:MM:SS, including additional text fields.'}, {'overall_rating': 'Numerical data representing the overall rating of a player, formatted as an integer between 0 and 100, calculated by FIFA. A higher rating indicates stronger overall strength.'}, {'potential': 'Numerical data representing the potential score of a player, formatted as a float. The potential score ranges from 0 to 100, with higher values indicating greater player potential.'}, {'preferred_foot': ""A string representing a player's preferred foot when attacking, which can be either 'right' or 'left'.""}, {'attacking_work_rate': ""Categorical data representing a player's attacking work rate, formatted as string values including 'stoc', 'norm', 'low', 'medium', 'high', 'le','y', and NaN. The values indicate the player's involvement in attacking actions, with descriptions for each level of work rate.""}, {'defensive_work_rate': ""Mixed data type containing integers and strings, representing various attributes of a player's defensive work rate, including a qualitative assessment of their defensive behavior during gameplay.""}, {'crossing': ""Crossing score is a numerical value in float format, ranging from 0 to 100, that quantifies a player's ability to perform crosses into the opponent's box, with higher scores indicating better performance.""}, {'finishing': ""Numerical data representing a player's finishing rate as a float, calculated by FIFA, with a value range of 0 to 100.""}, {'heading_accuracy': ""Numerical data representing the player's heading accuracy as a float value, calculated by FIFA, ranging from 0 to 100.""}, {'short_passing': ""A numerical data type representing a player's short passing score as a float, calculated by FIFA, with a range of 0 to 100.""}, {'volleys': ""Numerical data representing a player's volley score, formatted as a float, with values ranging from 0 to 100, calculated by FIFA.""}, {'dribbling': ""Numerical data representing a player's dribbling score as a float, calculated by FIFA, ranging from 0 to 100.""}, {'curve': ""Numerical data representing a player's curve score as a float, ranging from 0 to 100, calculated by FIFA.""}, {'free_kick_accuracy': ""Free kick accuracy is a numerical value representing a player's ability to successfully execute free kicks, formatted as a float and ranging from 0 to 100, calculated by FIFA.""}, {'long_passing': ""A numerical data type representing a player's long passing score as a float, calculated by FIFA, with a range of 0 to 100.""}, {'ball_control': ""Numerical data representing a player's ball control score, formatted as a float, with a range from 0 to 100, calculated by FIFA.""}, {'acceleration': ""Numerical data representing a player's acceleration score, formatted as a float, with a range of 0 to 100, calculated by FIFA.""}, {'sprint_speed': ""Numerical data representing a player's sprint speed, formatted as a float, with values ranging from 0 to 100, calculated by FIFA.""}, {'agility': ""Numerical data representing a player's agility as a float value, calculated by FIFA, ranging from 0 to 100.""}, {'reactions': ""Numerical data representing the player's reactions score, a float value calculated by FIFA, ranging from 0 to 100.""}, {'balance': ""Numerical data representing a player's balance score, formatted as a float, with a range of 0 to 100, calculated by FIFA.""}, {'shot_power': ""Numerical data representing a player's shot power, formatted as a float, with a value range of 0 to 100, calculated by FIFA.""}, {'jumping': ""Numerical data representing a player's jumping score, formatted as a float, with a range of 0 to 100, calculated by FIFA.""}, {'stamina': ""Numerical data representing the player's stamina score as a float, ranging from 0 to 100, calculated by FIFA.""}, {'strength': ""Numerical data representing a player's strength score as a float, calculated by FIFA, ranging from 0 to 100.""}, {'long_shots': ""Numerical data representing a player's long shots score, formatted as a float, with a range of 0 to 100, calculated by FIFA.""}, {'aggression': ""Numerical data representing a player's aggression score as a float, calculated by FIFA, ranging from 0 to 100.""}, {'interceptions': ""Numerical data representing a player's interceptions score, formatted as a float, with a range of 0 to 100, calculated by FIFA.""}, {'positioning': ""Numerical data representing a player's positioning score, formatted as an integer between 0 and 100, calculated by FIFA.""}, {'vision': ""Numerical data representing a player's vision score in FIFA, formatted as a float, with a range of 0 to 100.""}, {'penalties': ""Numerical data representing a player's penalties score, formatted as a float, with a range of 0 to 100, calculated by FIFA.""}, {'marking': ""Numerical data representing a player's marking score, formatted as a float, with a value range of 0 to 100, calculated by FIFA.""}, {'standing_tackle': ""A numerical score representing a player's standing tackle ability, formatted as a float, with a range from 0 to 100, calculated by FIFA.""}, {'sliding_tackle': ""A numerical data point representing a player's sliding tackle score, formatted as a float, with a range from 0 to 100, calculated by FIFA.""}, {'gk_diving': ""Numerical data representing a player's goalkeeping diving score, formatted as a float, with a range of 0 to 100, calculated by FIFA.""}, {'gk_handling': ""Numerical data representing a player's goalkeeping handling score, formatted as a float, with a value range of 0 to 100, calculated by FIFA.""}, {'gk_kicking': ""Numerical data representing a player's goalkeeping kicking score, formatted as a float, with a range from 0 to 100, calculated by FIFA.""}, {'gk_positioning': ""Numerical data representing a player's goalkeeping positioning score, formatted as a float, with a value range of 0 to 100, calculated by FIFA.""}, {'gk_reflexes': ""Numerical data representing a player's goalkeeping reflexes score, formatted as a float, with a range from 0 to 100, calculated by FIFA.""}], 'type': 'combine', 'values': ['Player.player_api_id', 'Player_Attributes.overall_rating']}}]}",0,113.0267584323883,0.0,0.0,0.0,0,0,1
1381,List the name of students that have attended more than 7 events.,moderate,student_club,"retrieve attendence, group by student sum, filter over 7, retrieve member combine","{""plans"":[{""function"":""http://127.0.0.1:5200/retrieve"",""filter_dict"":{""product"":""http://127.0.0.1:5000/products/student_club/Attendance""}},{""function"":""http://127.0.0.1:5200/count"",""filter_dict"":{""group_by"":[""link_to_member""],""columns"":[""link_to_member""]}},{""function"":""http://127.0.0.1:5200/filter"",""filter_dict"":{""conditions"":{""count"":{""min"":7}}}},{""function"":""http://127.0.0.1:5200/retrieve"",""filter_dict"":{""product"":""http://127.0.0.1:5000/products/student_club/Member""}},{""function"":'combination', 'filter_dict': {""columns_left"": ""link_to_member"", ""columns_right"": ""member_id"", ""type"": ""equals"", ""values"": [""None""]}}]}",index,link_to_member,"name of students means the full name; full name refers to first_name, last_name; attended more than 7 events refers to COUNT(link_to_event) > 7","{'plans': [{'function': 'http://127.0.0.1:5000/products/student_club/Attendance', 'filter_dict': {'product': 'Attendance'}}, {'function': 'http://127.0.0.1:5200/count', 'filter_dict': {'product': {'columns': 'link_to_event', 'value': None, 'unique': False}}}, {'function': 'http://127.0.0.1:5000/products/student_club/Member', 'filter_dict': {'product': 'student_club/Member'}}, {'function': 'combination', 'filter_dict': {'columns_left': [{'link_to_event': 'Alphanumeric string representing a unique identifier for an attended event, referencing the Event table.'}, {'link_to_member': 'Alphanumeric strings representing unique identifiers for members who attended an event, referencing the Member table.'}], 'columns_right': [{'member_id': 'Alphanumeric strings representing unique identifiers for members.'}, {'first_name': ""A string data type representing a member's first name.""}, {'last_name': ""This data consists of text strings representing a member's last name, with an example illustrating the format of a full name as a combination of first name and last name.""}, {'email': 'A dataset containing member email addresses in the format email@example.com, represented as text entries.'}, {'position': 'A string representing the position a member holds in the club.'}, {'t_shirt_size': 'A string representing the preferred t-shirt size of a member, typically indicating their body shape.'}, {'phone': 'Phone number format, either XXX-XXX-XXXX or (XXX) XXX-XXXX, used for contacting a member.'}, {'zip': ""Numerical data representing the zip code of a member's hometown, formatted as integers.""}, {'link_to_major': ""Alphanumeric strings or null values representing a unique identifier for a member's major, referencing the Major table.""}], 'type': 'Join', 'values': {'left_key': 'link_to_member', 'right_key': 'member_id'}}}, {'function': 'combination', 'filter_dict': {'columns_left': [{'link_to_event': 'Alphanumeric string representing a unique identifier for an attended event, referencing the Event table.'}, {'link_to_member': 'Alphanumeric strings representing unique identifiers for members who attended an event, referencing the Member table.'}], 'columns_right': [{'member_id': 'Alphanumeric strings representing unique identifiers for members.'}, {'first_name': ""A string data type representing a member's first name.""}, {'last_name': ""This data consists of text strings representing a member's last name, with an example illustrating the format of a full name as a combination of first name and last name.""}, {'email': 'A dataset containing member email addresses in the format email@example.com, represented as text entries.'}, {'position': 'A string representing the position a member holds in the club.'}, {'t_shirt_size': 'A string representing the preferred t-shirt size of a member, typically indicating their body shape.'}, {'phone': 'Phone number format, either XXX-XXX-XXXX or (XXX) XXX-XXXX, used for contacting a member.'}, {'zip': ""Numerical data representing the zip code of a member's hometown, formatted as integers.""}, {'link_to_major': ""Alphanumeric strings or null values representing a unique identifier for a member's major, referencing the Major table.""}], 'type': 'select', 'values': ['first_name', 'last_name']}}]}",0,46.1115517616272,0.0,0.0,0.0,0,0,1
1344,What was the notes of the fundraising on 2019/9/14?,simple,student_club,"retrieve meeting, filter foundraising, filter date, done","{""plans"":[{""function"":""http://127.0.0.1:5200/retrieve"",""filter_dict"":{""product"":""http://127.0.0.1:5000/products/student_club/Income""}},{""function"":""http://127.0.0.1:5200/filter"",""filter_dict"":{""date_received,"":""2019-09-14"",""source"":""Fundraising""}}]}",-,-,fundraising on 2019/9/14 refers to source = 'Fundraising' where date_received = '2019-09-14',"{'plans': [{'function': 'http://127.0.0.1:5000/products/student_club/Income', 'filter_dict': {'product': 'Income'}}, {'function': 'http://127.0.0.1:5200/filter', 'filter_dict': {'product': 'Income', 'conditions': {'source': 'Fundraising', 'date_received': '2019-09-14'}}}, {'function': 'http://127.0.0.1:5200/returnResult', 'filter_dict': {}}]}",0,21.574918508529663,0.0,0.0,0.0,0,0,1
1405,Calculate the amount budgeted for 'April Speaker' event. List all the budgeted categories for said event in an ascending order based on their amount budgeted.,moderate,student_club,"retrieve event, retrieve budget sum order by category, link to event, sortby  combine ","{""plans"":[{""function"":""http://127.0.0.1:5200/retrieve"",""filter_dict"":{""product"":""http://127.0.0.1:5000/products/student_club/Event""}},{""function"":""http://127.0.0.1:5200/filter"",""filter_dict"":{""conditions"":{""event_name"":""April Speaker""}}},{""function"":""http://127.0.0.1:5200/retrieve"",""filter_dict"":{""product"":""http://127.0.0.1:5000/products/student_club/Budget""}},{""function"":'combination', 'filter_dict': {""columns_left"": ""event_id"", ""columns_right"": ""link_to_event"", ""type"": ""equals"", ""values"": [""None""]}},{""function"":""http://127.0.0.1:5200/sortby"",""filter_dict"":{""columns"":[""amount""],""ascending"":""True""}}]}",-,-,April Speaker' is an event name; amount budgeted refers to SUM(amount); budget categories refers to category,"{'plans': [{'function': 'http://127.0.0.1:5000/products/student_club/Event', 'filter_dict': {'product': 'Event'}}, {'function': 'http://127.0.0.1:5200/filter', 'filter_dict': {'product': 'http://127.0.0.1:5000/products/student_club/Event', 'conditions': {'event_name': 'April Speaker'}}}, {'function': 'http://127.0.0.1:5200/returnResult', 'filter_dict': {'product': 'http://127.0.0.1:5000/products/student_club/Event'}}, {'function': 'http://127.0.0.1:5000/products/student_club/Budget', 'filter_dict': {'product': 'Budget'}}, {'function': 'http://127.0.0.1:5200/filter', 'filter_dict': {'product': 'http://127.0.0.1:5000/products/student_club/Budget', 'conditions': {'link_to_event': 'event_id from Event'}}}, {'function': 'http://127.0.0.1:5200/returnResult', 'filter_dict': {'product': 'http://127.0.0.1:5000/products/student_club/Budget'}}, {'function': 'http://127.0.0.1:5200/sortby', 'filter_dict': {'product': 'http://127.0.0.1:5000/products/student_club/Budget', 'columns': 'amount', 'ascending': 'True'}}, {'function': 'combination', 'filter_dict': {'columns_left': [{'event_id': 'Alphanumeric strings representing event identifiers and associated text data.'}, {'event_name': 'A collection of text strings representing event names, formatted as a comma-separated list.'}, {'event_date': 'Event date in ISO 8601 format, representing the date and time an event took place or is scheduled to take place, formatted as YYYY-MM-DDTHH:MM:SS.'}, {'type': 'A string representing the type of event, such as game, social, or election.'}, {'notes': 'A free text field for any notes about the event, formatted as a string.'}, {'location': 'A string representing the address or name of the location where an event is held.'}, {'status': ""A string value representing the status of an event, which can be 'Open', 'Closed', or 'Planning'.""}], 'columns_right': [{'budget_id': 'Alphanumeric strings representing unique identifiers for budget entries.'}, {'category': 'A string representing the category for which a budget amount is allocated, such as advertisement, food, or parking.'}, {'spent': 'Numerical data representing the total amount spent in dollars for a budgeted category of an event, formatted as a float and summarized from the Expense table.'}, {'remaining': 'A numerical value in float format representing the remaining budget, calculated as the budgeted amount minus the amount spent, measured in dollars. If the value is less than 0, it indicates that spending has exceeded the budget.'}, {'amount': 'Numerical data representing the budgeted amount for a specified category and event, formatted as integers in dollars. The amount is calculated as the sum of spent and remaining funds.'}, {'event_status': ""String values representing the status of an event, which can be 'Closed', 'Open', or 'Planning'. 'Closed' indicates the event is finalized with no further changes to expenses, 'Open' means the event is active and expenses can change, and 'Planning' signifies the event has not yet started.""}, {'link_to_event': 'Alphanumeric strings representing unique identifiers for events, referencing the Event table.'}], 'type': 'combine'}}]}",0,55.51367735862732,0.0,0.0,0.0,0,0,1
1464,Write the full names of students who received funds on the date of 9/9/2019 and include the amount received.,challenging,student_club,"retrieve income, filter date_received 9/9/2019, retrieve member combine link to member member id,  retrieve attendenacne combine link to member retrieve event combine ","{'plans': [{'function': 'http://127.0.0.1:5200/retrieve','filter_dict': {'product': 'http://127.0.0.1:5000/products/student_club/Income'}},{""function"": ""http://127.0.0.1:5200/filter"", ""values"": {""conditions"": {""date_received"": ""2019-09-09""}}},{'function': 'http://127.0.0.1:5200/retrieve','filter_dict': {'product': 'http://127.0.0.1:5000/products/student_club/Member'}},{""function"":'combination', 'filter_dict':{'columns_left': 'link_to_member', 'columns_right': 'member_id', 'type': 'equals','values': ['None']}},{'function': 'http://127.0.0.1:5200/retrieve','filter_dict': {'product': 'http://127.0.0.1:5000/products/student_club/Attendance'}},{""function"":'combination', 'filter_dict':{'columns_left': 'member_id', 'columns_right': 'link_to_member', 'type': 'equals','values': ['None']}},{'function': 'http://127.0.0.1:5200/retrieve','filter_dict': {'product': 'http://127.0.0.1:5000/products/student_club/Event'}},{""function"":'combination', 'filter_dict':{'columns_left': 'link_to_event', 'columns_right': 'event_id', 'type': 'equals','values': ['None']}}]}",-,-,"full name refers to first_name, last_name, amount of funds received refers to amount, received funds on date refers to date_received","{'plans': [{'function': 'http://127.0.0.1:5000/products/student_club/Income', 'filter_dict': {'product': 'Income'}}, {'function': 'http://127.0.0.1:5200/filter', 'filter_dict': {'product': 'http://127.0.0.1:5000/products/student_club/Income', 'conditions': {'date_received': '2019-09-09'}}}, {'function': 'http://127.0.0.1:5000/products/student_club/Member', 'filter_dict': {'product': 'student_club/Member'}}, {'function': 'http://127.0.0.1:5000/products/student_club/Member', 'filter_dict': {'product': {'columns': ['member_id', 'first_name', 'last_name']}}}, {'function': 'combination', 'filter_dict': {'columns_left': [{'income_id': 'A collection of alphanumeric strings representing unique identifiers for income records.'}, {'date_received': 'A date field representing when the fund was received, formatted as YYYY-MM-DD.'}, {'amount': 'Numerical data representing the amount of funds in dollars, formatted as integers.'}, {'source': 'A string representing the source of funds, indicating where the funds originate, such as dues or annual university allocation.'}, {'notes': 'A free-text value providing details about the receipt of funds, formatted as a string.'}, {'link_to_member': 'Alphanumeric strings representing links to members, formatted as texts.'}], 'columns_right': [{'member_id': 'Alphanumeric strings representing unique identifiers for members.'}, {'first_name': ""A string data type representing a member's first name.""}, {'last_name': ""This data consists of text strings representing a member's last name, with an example illustrating the format of a full name as a combination of first name and last name.""}, {'email': 'A dataset containing member email addresses in the format email@example.com, represented as text entries.'}, {'position': 'A string representing the position a member holds in the club.'}, {'t_shirt_size': 'A string representing the preferred t-shirt size of a member, typically indicating their body shape.'}, {'phone': 'Phone number format, either XXX-XXX-XXXX or (XXX) XXX-XXXX, used for contacting a member.'}, {'zip': ""Numerical data representing the zip code of a member's hometown, formatted as integers.""}, {'link_to_major': ""Alphanumeric strings or null values representing a unique identifier for a member's major, referencing the Major table.""}], 'type': 'join', 'values': {'left_key': 'link_to_member', 'right_key': 'member_id'}}}, {'function': 'http://127.0.0.1:5200/filter', 'filter_dict': {'product': 'combination', 'conditions': {'columns': ['first_name', 'last_name', 'amount']}}}]}",0,46.90602970123291,0.0,0.0,0.0,0,0,1
1334,List the full name of the Student_Club members that grew up in Illinois state.,simple,student_club,"retrieve students, retrieve zip code, filter state illinois, combine","{""plans"":[{""function"":""http://127.0.0.1:5200/retrieve"",""filter_dict"":{""product"":""http://127.0.0.1:5000/products/student_club/Member""}},{""function"":""http://127.0.0.1:5200/retrieve"",""filter_dict"":{""product"":""http://127.0.0.1:5000/products/student_club/Zip_Code""}},{""function"":""http://127.0.0.1:5200/filter"",""filter_dict"":{""conditions"":{""state"":""Illinois""}}},{""function"":'combination', 'filter_dict': {""columns_left"": ""zip"", ""columns_right"": ""zip_code"", ""type"": ""equals"", ""values"": [""None""]}}]}",index,member_id,"full name of member refers to first_name, last_name","{'plans': [{'function': 'http://127.0.0.1:5000/products/student_club/Member', 'filter_dict': {'product': 'Member'}}, {'function': 'http://127.0.0.1:5000/products/student_club/Member', 'filter_dict': {'product': 'Zip_Code'}}, {'function': 'http://127.0.0.1:5200/filter', 'filter_dict': {'conditions': {'state': 'Illinois'}}}, {'function': 'combination', 'filter_dict': {'columns_left': [{'member_id': 'Alphanumeric strings representing unique identifiers for members.'}, {'first_name': ""A string data type representing a member's first name.""}, {'last_name': ""This data consists of text strings representing a member's last name, with an example illustrating the format of a full name as a combination of first name and last name.""}, {'email': 'A dataset containing member email addresses in the format email@example.com, represented as text entries.'}, {'position': 'A string representing the position a member holds in the club.'}, {'t_shirt_size': 'A string representing the preferred t-shirt size of a member, typically indicating their body shape.'}, {'phone': 'Phone number format, either XXX-XXX-XXXX or (XXX) XXX-XXXX, used for contacting a member.'}, {'zip': ""Numerical data representing the zip code of a member's hometown, formatted as integers.""}, {'link_to_major': ""Alphanumeric strings or null values representing a unique identifier for a member's major, referencing the Major table.""}], 'columns_right': [{'member_id': 'Alphanumeric strings representing unique identifiers for members.'}, {'first_name': ""A string data type representing a member's first name.""}, {'last_name': ""This data consists of text strings representing a member's last name, with an example illustrating the format of a full name as a combination of first name and last name.""}, {'email': 'A dataset containing member email addresses in the format email@example.com, represented as text entries.'}, {'position': 'A string representing the position a member holds in the club.'}, {'t_shirt_size': 'A string representing the preferred t-shirt size of a member, typically indicating their body shape.'}, {'phone': 'Phone number format, either XXX-XXX-XXXX or (XXX) XXX-XXXX, used for contacting a member.'}, {'zip': ""Numerical data representing the zip code of a member's hometown, formatted as integers.""}, {'link_to_major': ""Alphanumeric strings or null values representing a unique identifier for a member's major, referencing the Major table.""}], 'type': 'combine', 'values': {'Member.zip': 'Zip_Code.zip_code'}}}, {'function': 'http://127.0.0.1:5200/returnResult', 'filter_dict': {'product': 'http://127.0.0.1:5000/products/student_club/Member'}}]}",0,39.21157908439636,0.25,0.125,0.2,0,0,1
17,"Rank schools by their average score in Writing where the score is greater than 499, showing their charter numbers.",simple,california_schools,"retrieve satscores, filter AvgScrWriting > 499, sort by avgScrWriting, retrieve schools, combine cds CDSCode","{""plans"":[{""function"":""http://127.0.0.1:5200/retrieve"",""filter_dict"":{""product"":""http://127.0.0.1:5000/products/california_schools/satscores""}},{""function"":""http://127.0.0.1:5200/filter"",""filter_dict"":{""conditions"":{""AvgScrWrite"":{""min"":499}}}},{""function"":""http://127.0.0.1:5200/retrieve"",""filter_dict"":{""product"":""http://127.0.0.1:5000/products/california_schools/schools""}},{""function"":'combination', 'filter_dict': {""columns_left"": ""cds"", ""columns_right"": ""CDSCode"", ""type"": ""equals"", ""values"": [""None""]}},{""function"":""http://127.0.0.1:5200/sortby"",""filter_dict"":{""columns"":""AvgScrWrite"",""ascending"":""False""}}]}",index,cds,Valid charter number means the number is not null,"{'plans': [{'function': 'http://127.0.0.1:5000/products/california_schools/satscores', 'filter_dict': {'product': 'satscores'}}, {'function': 'http://127.0.0.1:5200/filter', 'filter_dict': {'product': 'http://127.0.0.1:5000/products/california_schools/satscores', 'conditions': {'AvgScrWrite': {'min': 500}}}}, {'function': 'http://127.0.0.1:5200/mean', 'filter_dict': {'group_by': ['school'], 'columns': ['writing']}}, {'function': 'http://127.0.0.1:5000/products/california_schools/schools', 'filter_dict': {'product': 'schools'}}, {'function': 'http://127.0.0.1:5200/filter', 'filter_dict': {'product': 'http://127.0.0.1:5000/products/california_schools/schools', 'conditions': {'CharterNum': {'not_null': True}}}}, {'function': 'combination', 'filter_dict': {'columns_left': [{'Id': 'Numerical data in integer format representing post IDs.'}, {'PostTypeId': 'Numerical data in integer format representing the Post Type Id, which is the identifier for a specific post type.'}, {'AcceptedAnswerId': 'Numerical data in float format representing a value, and an integer representing the accepted answer ID of a post.'}, {'CreaionDate': 'Creation date of the post in datetime format YYYY-MM-DD HH:MM:SS'}, {'Score': 'Numerical data representing the score of a post, formatted as integers.'}, {'ViewCount': 'Numerical data representing the view count of a post, formatted as a float. Higher values indicate greater popularity.'}, {'Body': 'HTML formatted text containing paragraphs and code snippets for the body of a post.'}, {'OwnerUserId': 'Numerical data in float format representing a value, and an integer representing the Owner User Id.'}, {'LasActivityDate': 'Last Activity Date in datetime format, represented as YYYY-MM-DD HH:MM:SS.'}, {'Title': 'A string format data representing the title of a post.'}, {'Tags': ""Data consists of text entries formatted as <category1><category2><category3>, with tags indicating the post's subject matter.""}, {'AnswerCount': 'Numerical data representing the total number of answers to a post, formatted as an integer.'}, {'CommentCount': 'Numerical data representing the total number of comments on a post, formatted as integers.'}, {'FavoriteCount': 'Numerical data representing the total number of favorites for a post, formatted as a float. Higher values indicate more valuable posts.'}, {'LastEditorUserId': 'Numerical data in float format representing a value, and an integer representing the ID of the last editor.'}, {'LastEditDate': 'Dates in the format YYYY-MM-DD HH:MM:SS representing the last edit date and time.'}, {'CommunityOwnedDate': 'Community Owned Date in datetime format, represented as YYYY-MM-DD HH:MM:SS.'}, {'ParentId': 'This data consists of a numerical value in float format representing the ParentId of a post. It indicates the ID of the parent post, where an integer value is used. If the ParentId is null, it signifies that the post is a root post; otherwise, it is a child post of another post.'}, {'ClosedDate': 'ClosedDate represents the date and time when a post is marked as closed, formatted as YYYY-MM-DD HH:MM:SS. A null or empty value indicates the post is not well-finished, while a non-null value signifies that the post is well-finished.'}, {'OwnerDisplayName': 'A string representing the display name of the post owner.'}, {'LastEditorDisplayName': 'A string representing the display name of the last editor.'}], 'columns_right': [{'Id': 'Numerical data in integer format representing post IDs.'}, {'PostTypeId': 'Numerical data in integer format representing the Post Type Id, which is the identifier for a specific post type.'}, {'AcceptedAnswerId': 'Numerical data in float format representing a value, and an integer representing the accepted answer ID of a post.'}, {'CreaionDate': 'Creation date of the post in datetime format YYYY-MM-DD HH:MM:SS'}, {'Score': 'Numerical data representing the score of a post, formatted as integers.'}, {'ViewCount': 'Numerical data representing the view count of a post, formatted as a float. Higher values indicate greater popularity.'}, {'Body': 'HTML formatted text containing paragraphs and code snippets for the body of a post.'}, {'OwnerUserId': 'Numerical data in float format representing a value, and an integer representing the Owner User Id.'}, {'LasActivityDate': 'Last Activity Date in datetime format, represented as YYYY-MM-DD HH:MM:SS.'}, {'Title': 'A string format data representing the title of a post.'}, {'Tags': ""Data consists of text entries formatted as <category1><category2><category3>, with tags indicating the post's subject matter.""}, {'AnswerCount': 'Numerical data representing the total number of answers to a post, formatted as an integer.'}, {'CommentCount': 'Numerical data representing the total number of comments on a post, formatted as integers.'}, {'FavoriteCount': 'Numerical data representing the total number of favorites for a post, formatted as a float. Higher values indicate more valuable posts.'}, {'LastEditorUserId': 'Numerical data in float format representing a value, and an integer representing the ID of the last editor.'}, {'LastEditDate': 'Dates in the format YYYY-MM-DD HH:MM:SS representing the last edit date and time.'}, {'CommunityOwnedDate': 'Community Owned Date in datetime format, represented as YYYY-MM-DD HH:MM:SS.'}, {'ParentId': 'This data consists of a numerical value in float format representing the ParentId of a post. It indicates the ID of the parent post, where an integer value is used. If the ParentId is null, it signifies that the post is a root post; otherwise, it is a child post of another post.'}, {'ClosedDate': 'ClosedDate represents the date and time when a post is marked as closed, formatted as YYYY-MM-DD HH:MM:SS. A null or empty value indicates the post is not well-finished, while a non-null value signifies that the post is well-finished.'}, {'OwnerDisplayName': 'A string representing the display name of the post owner.'}, {'LastEditorDisplayName': 'A string representing the display name of the last editor.'}], 'type': 'join', 'values': {'left_key': 'sname', 'right_key': 'School'}}}, {'function': 'http://127.0.0.1:5200/sortby', 'filter_dict': {'columns': 'average writing score', 'ascending': 'False'}}]}",0,103.95851397514345,0.0,0.0,0.0,0,0,1
39,What is the average number of test takers from Fresno schools that opened between 1/1/1980 and 12/31/1980?,simple,california_schools,"retrieve schools filter county fresno openddate 1/1/1980 and 12/31/1980, retrieve satscore mean numtesttaker by school, combine","{""plans"":[{""function"":""http://127.0.0.1:5200/retrieve"",""filter_dict"":{""product"":""http://127.0.0.1:5000/products/california_schools/schools""}},{""function"":""http://127.0.0.1:5200/filter"",""filter_dict"":{""conditions"":{""County"":""Fresno"",""OpenDate"":{""min"":""1980-01-01"",""max"":""1980-12-31""}}}},{""function"":""http://127.0.0.1:5200/retrieve"",""filter_dict"":{""product"":""http://127.0.0.1:5000/products/california_schools/satscores""}},{""function"":'combination', 'filter_dict': {""columns_left"": ""CDSCode"", ""columns_right"": ""cds"", ""type"": ""equals"", ""values"": [""None""]}},{""function"":""http://127.0.0.1:5200/mean"",""filter_dict"":{""columns"":""NumTstTakr""}}]}",-,-,between 1/1/1980 and 12/31/1980 means the year = 1980,"{'plans': [{'function': 'http://127.0.0.1:5000/products/california_schools/schools', 'filter_dict': {'product': 'schools'}}, {'function': 'http://127.0.0.1:5200/filter', 'filter_dict': {'product': 'http://127.0.0.1:5000/products/california_schools/schools', 'conditions': {'County': 'Fresno', 'OpenDate': {'min': '1980-01-01', 'max': '1980-12-31'}}}}, {'function': 'http://127.0.0.1:5200/filter', 'filter_dict': {'product': 'http://127.0.0.1:5000/products/california_schools/schools', 'columns': ['CDSCode']}}, {'function': 'http://127.0.0.1:5000/products/california_schools/satscores', 'filter_dict': {'product': 'satscores'}}, {'function': 'http://127.0.0.1:5200/filter', 'filter_dict': {'product': 'http://127.0.0.1:5000/products/california_schools/satscores', 'conditions': {'cds': 'CDSCode'}}}, {'function': 'http://127.0.0.1:5200/mean', 'filter_dict': {'group_by': None, 'columns': ['NumTstTakr']}}, {'function': 'combination', 'filter_dict': {'columns_left': [{'CDSCode': 'Numerical data in integer format representing CDS codes, with additional text fields.'}, {'NCESDist': 'A 7-digit numerical identifier for school districts, formatted as a float, where the first 2 digits represent the state and the last 5 digits represent the school district.'}, {'NCESSchool': 'Numerical data in float format representing the 5-digit NCES school identification number, which, when combined with the NCESDist, forms a unique 12-digit ID for each school.'}, {'StatusType': ""A string field that identifies the operational status of a district, with possible values including 'Active', 'Closed', 'Merged', and 'Pending'.""}, {'County': ""A string format data representing county names, with a structure that includes a header indicating 'County' followed by the actual county names as text.""}, {'District': ""A dataset containing textual information about districts, formatted as a CSV string with headers 'District' and 'text'.""}, {'School': 'A collection of text data related to schools, formatted as strings.'}, {'Street': 'Data type: texts; Format: Street Address, consisting of street names and related text.'}, {'StreetAbr': ""Abbreviated street address of a school, district, or administrative authority's physical location, formatted as text.""}, {'City': 'A collection of text data representing city names, formatted as a comma-separated string.'}, {'Zip': 'A zip code in text format, either 5 digits (XXXXX) or 10 digits with a hyphen (XXXXX-XXXX).'}, {'State': ""Mixed data type containing null values and strings, representing state information with a specific format including headers 'State' and 'text'.""}, {'MailStreet': 'This data consists of texts in the format of a Street Address, representing the unabbreviated mailing address of schools, districts, or administrative authorities. Note that some entities may lack data, and unpopulated fields have been filled with Street data.'}, {'MailStrAbr': 'Abbreviated mailing street address of a school, district, or administrative authority, formatted as a text string.'}, {'MailCity': 'MailCity is a string data type representing the mailing city associated with the address of a school, district, or administrative authority. It may contain empty values where the mailing address city is not provided, which have been filled with corresponding city data.'}, {'MailZip': ""MailZip is a text field representing the zip code associated with the mailing address of a school, district, or administrative authority. The format can be either 'XXXXX-XXXX' or 'XXXXX'. Note that some entries may be unpopulated and have been filled with available Zip data.""}, {'MailState': 'Mixed data type containing null or string values representing the mailing state in an address, with unpopulated cells filled with corresponding state data.'}, {'Phone': 'Phone number in the format (XXX) XXX-XXXX'}, {'Ext': 'A numerical data type representing the phone number extension of a school, district, or administrative authority, formatted as a float.'}, {'Website': 'A URL format representing the website address of a school, district, or administrative authority.'}, {'OpenDate': 'A date representing when the school opened, formatted as YYYY-MM-DD.'}, {'ClosedDate': 'ClosedDate represents the date a school closed, formatted as YYYY-MM-DD.'}, {'Charter': 'This data includes a numerical field that can be a float or NaN, indicating a charter school status coded as an integer: 1 for charter schools and 0 for non-charter schools.'}, {'CharterNum': 'Mixed data containing strings and floats, including a 4-digit charter school number represented as text.'}, {'FundingType': ""FundingType is a text field indicating the charter school funding type, represented as a string. Possible values include 'Not in CS funding model', 'Locally funded', and 'Directly funded'.""}, {'DOC': 'The District Ownership Code (DOC) is a numerical identifier represented as integers, used to categorize the Administrative Authority in the education system, with specific codes assigned to various types of educational institutions.'}, {'DOCType': 'A string representing the text description of the District Ownership Code Type (DOCType), which categorizes ownership types in a district.'}, {'SOC': 'Numerical data representing the School Ownership Code (SOC) as a float, used to identify various types of schools, including preschool, special education, and public schools.'}, {'SOCType': 'A string representing the School Ownership Code Type, which describes the type of school.'}, {'EdOpsCode': 'A string data type representing various education option codes, each corresponding to a specific type of educational institution or program.'}, {'EdOpsName': ""A string data type representing the long text description of an educational option, labeled as 'Educational Option Name'.""}, {'EILCode': 'A string format representing various educational levels or categories, including codes for Adult, Elementary, High School, and others.'}, {'EILName': 'A string representing the Educational Instruction Level Name, which describes the type of educational institution relative to the grade range it serves.'}, {'GSoffered': 'This data represents the grade span offered by a school, district, or administrative authority, formatted as X-Y, X-Adult, P-X, or K-X, where X and Y denote specific grade levels.'}, {'GSserved': ""Text data representing the grade span served in K-12 education, formatted as 'X-Y' or 'K-Z' where X, Y, and Z are integers, indicating the lowest and highest grades of student enrollment based on CALPADS Fall 1 data.""}, {'Virtual': ""Categorical data representing the type of virtual instruction offered by a school, with possible values: ['F', 'N', 'P', null]. 'F' indicates Exclusively Virtual, 'V' indicates Primarily Virtual, 'C' indicates Primarily Classroom, 'N' indicates Not Virtual, and 'P' indicates Partial Virtual (retired).""}, {'Magnet': 'This data indicates whether a school is a magnet school or offers a magnet program, represented as an integer: 1 for magnet and 0 for not magnet. The field may also contain NaN values.'}, {'Latitude': 'Numerical data representing latitude as a float, indicating the angular distance in degrees from the equator, measured north to south.'}, {'Longitude': 'Numerical data representing longitude as floating-point numbers, indicating the angular distance in degrees from the prime meridian (Greenwich, England), measured from west to east.'}, {'AdmFName1': ""A string data type representing the administrator's first name, specifically for superintendents or principals, with additional context regarding the display of administrator information in active and pending districts and schools.""}, {'AdmLName1': 'A string data type representing the last name of an administrator, specifically the superintendent or principal, with additional context regarding the display of administrator information for active and pending districts and schools.'}, {'AdmEmail1': ""This data represents an administrator's email address in the format email@example.com, specifically for superintendents or principals in active and pending districts and schools.""}, {'AdmFName2': ""A string data type representing a text field, specifically indicating that 'AdmFName2' is the same as another field labeled '1'.""}, {'AdmLName2': ""A string data type representing a text field labeled 'AdmLName2'.""}, {'AdmEmail2': 'Email address in the format email@example.com'}, {'AdmFName3': ""A string data type representing a text field labeled 'AdmFName3', which is not useful.""}, {'AdmLName3': ""A string data type representing a text field labeled 'AdmLName3', which is not useful.""}, {'AdmEmail3': ""Data type is text, specifically formatted as an email address (email@example.com). The entry 'AdmEmail3,,,text,not useful' indicates a potential email field with additional non-useful text.""}, {'LastUpdate': 'A date field representing the last update of a record, formatted as YYYY-MM-DD.'}], 'columns_right': [{'cds': 'Numerical data in integer format related to the California Department of Schools.'}, {'rtype': 'Single character strings representing text data, with fields for rtype and unuseful.'}, {'sname': 'A collection of text data formatted as strings, containing school names and associated text entries.'}, {'dname': ""A collection of text data in String format, containing district names and segments, structured as 'dname,district name,district segment,text'.""}, {'cname': 'A list of county names formatted as strings.'}, {'enroll12': 'Numerical data representing enrollment numbers for grades 1 to 12, formatted as integers.'}, {'NumTstTakr': 'Numerical data representing the number of test takers in each school, formatted as integers.'}, {'AvgScrRead': 'Numerical data representing average scores in Reading, formatted as a float.'}, {'AvgScrMath': 'Numerical data representing average scores in Math, formatted as a float.'}, {'AvgScrWrite': 'Numerical data representing average scores in writing, formatted as a float.'}, {'NumGE1500': 'Numerical data in floating point format representing the number of test takers whose total SAT scores are greater than or equal to 1500, used to calculate the excellence rate.'}], 'type': 'on', 'values': ['CDSCode', 'cds']}}]}",0,99.9136209487915,0.0,0.0,0.0,0,0,1
40,What is the telephone number for the school with the lowest average score in reading in Fresno Unified?,moderate,california_schools,"retrieve schools, filter distirct  Fresno Unified, retrieve stascores, min 1, combine","{'plans': [{'function': 'http://127.0.0.1:5200/retrieve','filter_dict': {'product': 'http://127.0.0.1:5000/products/california_schools/schools'}},{'function': 'http://127.0.0.1:5200/filter', 'filter_dict':{'conditions': {'distirct': 'Fresno Unified'}}},{'function': 'http://127.0.0.1:5200/retrieve','filter_dict': {'product': 'http://127.0.0.1:5000/products/california_schools/satscores'}},{'function':'http://127.0.0.1:5200/min','filter_dict':{'rows':1,'columns':['AvgScrRead']}}]}",-,-,Fresno Unified is a name of district;,"{'plans': [{'function': 'http://127.0.0.1:5000/products/codebase_community/posts', 'filter_dict': {'product': 'satscores'}}, {'function': 'http://127.0.0.1:5200/filter', 'filter_dict': {'product': 'http://127.0.0.1:5000/products/codebase_community/posts', 'conditions': {'dname': 'Fresno Unified'}}}, {'function': 'http://127.0.0.1:5200/min', 'filter_dict': {'columns': ['AvgScrRead'], 'rows': 1}}, {'function': 'http://127.0.0.1:5000/products/student_club/Major', 'filter_dict': {'product': 'schools'}}, {'function': 'http://127.0.0.1:5200/filter', 'filter_dict': {'product': 'http://127.0.0.1:5000/products/student_club/Major', 'conditions': {'CDSCode': 'cds'}}}, {'function': 'combination', 'filter_dict': {'columns_left': [{'Id': 'Numerical data in integer format representing post IDs.'}, {'PostTypeId': 'Numerical data in integer format representing the Post Type Id, which is the identifier for a specific post type.'}, {'AcceptedAnswerId': 'Numerical data in float format representing a value, and an integer representing the accepted answer ID of a post.'}, {'CreaionDate': 'Creation date of the post in datetime format YYYY-MM-DD HH:MM:SS'}, {'Score': 'Numerical data representing the score of a post, formatted as integers.'}, {'ViewCount': 'Numerical data representing the view count of a post, formatted as a float. Higher values indicate greater popularity.'}, {'Body': 'HTML formatted text containing paragraphs and code snippets for the body of a post.'}, {'OwnerUserId': 'Numerical data in float format representing a value, and an integer representing the Owner User Id.'}, {'LasActivityDate': 'Last Activity Date in datetime format, represented as YYYY-MM-DD HH:MM:SS.'}, {'Title': 'A string format data representing the title of a post.'}, {'Tags': ""Data consists of text entries formatted as <category1><category2><category3>, with tags indicating the post's subject matter.""}, {'AnswerCount': 'Numerical data representing the total number of answers to a post, formatted as an integer.'}, {'CommentCount': 'Numerical data representing the total number of comments on a post, formatted as integers.'}, {'FavoriteCount': 'Numerical data representing the total number of favorites for a post, formatted as a float. Higher values indicate more valuable posts.'}, {'LastEditorUserId': 'Numerical data in float format representing a value, and an integer representing the ID of the last editor.'}, {'LastEditDate': 'Dates in the format YYYY-MM-DD HH:MM:SS representing the last edit date and time.'}, {'CommunityOwnedDate': 'Community Owned Date in datetime format, represented as YYYY-MM-DD HH:MM:SS.'}, {'ParentId': 'This data consists of a numerical value in float format representing the ParentId of a post. It indicates the ID of the parent post, where an integer value is used. If the ParentId is null, it signifies that the post is a root post; otherwise, it is a child post of another post.'}, {'ClosedDate': 'ClosedDate represents the date and time when a post is marked as closed, formatted as YYYY-MM-DD HH:MM:SS. A null or empty value indicates the post is not well-finished, while a non-null value signifies that the post is well-finished.'}, {'OwnerDisplayName': 'A string representing the display name of the post owner.'}, {'LastEditorDisplayName': 'A string representing the display name of the last editor.'}], 'columns_right': [{'Id': 'Numerical data in integer format representing post IDs.'}, {'PostTypeId': 'Numerical data in integer format representing the Post Type Id, which is the identifier for a specific post type.'}, {'AcceptedAnswerId': 'Numerical data in float format representing a value, and an integer representing the accepted answer ID of a post.'}, {'CreaionDate': 'Creation date of the post in datetime format YYYY-MM-DD HH:MM:SS'}, {'Score': 'Numerical data representing the score of a post, formatted as integers.'}, {'ViewCount': 'Numerical data representing the view count of a post, formatted as a float. Higher values indicate greater popularity.'}, {'Body': 'HTML formatted text containing paragraphs and code snippets for the body of a post.'}, {'OwnerUserId': 'Numerical data in float format representing a value, and an integer representing the Owner User Id.'}, {'LasActivityDate': 'Last Activity Date in datetime format, represented as YYYY-MM-DD HH:MM:SS.'}, {'Title': 'A string format data representing the title of a post.'}, {'Tags': ""Data consists of text entries formatted as <category1><category2><category3>, with tags indicating the post's subject matter.""}, {'AnswerCount': 'Numerical data representing the total number of answers to a post, formatted as an integer.'}, {'CommentCount': 'Numerical data representing the total number of comments on a post, formatted as integers.'}, {'FavoriteCount': 'Numerical data representing the total number of favorites for a post, formatted as a float. Higher values indicate more valuable posts.'}, {'LastEditorUserId': 'Numerical data in float format representing a value, and an integer representing the ID of the last editor.'}, {'LastEditDate': 'Dates in the format YYYY-MM-DD HH:MM:SS representing the last edit date and time.'}, {'CommunityOwnedDate': 'Community Owned Date in datetime format, represented as YYYY-MM-DD HH:MM:SS.'}, {'ParentId': 'This data consists of a numerical value in float format representing the ParentId of a post. It indicates the ID of the parent post, where an integer value is used. If the ParentId is null, it signifies that the post is a root post; otherwise, it is a child post of another post.'}, {'ClosedDate': 'ClosedDate represents the date and time when a post is marked as closed, formatted as YYYY-MM-DD HH:MM:SS. A null or empty value indicates the post is not well-finished, while a non-null value signifies that the post is well-finished.'}, {'OwnerDisplayName': 'A string representing the display name of the post owner.'}, {'LastEditorDisplayName': 'A string representing the display name of the last editor.'}], 'type': 'combine', 'values': ['sname (from satscores)', 'Phone (from schools)']}}]}",0,72.87355732917786,0.0,0.0,0.0,0,0,1
26,State the names and full communication address of high schools in Monterey which has more than 800 free or reduced price meals for ages 15-17?,moderate,california_schools,"retrieve frpm, filter Free Meal Count (Ages 5-17)` > 800,`School Type` = 'High Schools (Public)', retrieve schools, filter `County` = 'Monterey', combine CDSCode` = `T2`.`CDSCode","{'plans': [{'function': 'http://127.0.0.1:5200/retrieve','filter_dict': {'product': 'http://127.0.0.1:5000/products/california_schools/frpm'}},{'function': 'http://127.0.0.1:5200/filter', 'filter_dict': {""conditions"": {""Free Meal Count (Ages 5-17)"":{""min"":800},""School Type"":""High Schools (Public)""}}},{'function': 'http://127.0.0.1:5200/retrieve','filter_dict': {'product': 'http://127.0.0.1:5000/products/california_schools/schools'}},{'function': 'http://127.0.0.1:5200/filter', 'filter_dict':{'conditions': {'County':'Monterey'}}},{'function':'combination', 'filter_dict':{'columns_left': 'CDSCode', 'columns_right': 'CDSCode', 'type': 'equals','values': ['None']}}]}",-,-,"Full communication address should include Street, City, State and zip code if any.","{'plans': [{'function': 'http://127.0.0.1:5000/products/california_schools/frpm', 'filter_dict': {'product': 'california_schools/frpm'}}, {'function': 'http://127.0.0.1:5200/filter', 'filter_dict': {'product': 'http://127.0.0.1:5000/products/california_schools/frpm', 'conditions': {'County Name': 'Monterey', 'FRPM Count (Ages 5-17)': {'$gt': 800}}}}, {'function': 'http://127.0.0.1:5200/select', 'filter_dict': {'columns': ['CDSCode', 'School Name']}}, {'function': 'http://127.0.0.1:5000/products/california_schools/schools', 'filter_dict': {'product': 'california_schools'}}, {'function': 'http://127.0.0.1:5200/filter', 'filter_dict': {'product': 'http://127.0.0.1:5000/products/california_schools/schools', 'conditions': {'County': 'Monterey', 'EILName': 'High School'}}}, {'function': 'http://127.0.0.1:5200/select', 'filter_dict': {'columns': ['CDSCode', 'Street', 'City', 'State', 'Zip']}}, {'function': 'combination', 'filter_dict': {'columns_left': [{'CDSCode': 'Numerical data representing CDS codes in integer format.'}, {'School Name': 'A string format representing the name of a school, potentially containing multiple entries separated by commas.'}], 'columns_right': [{'CDSCode': 'Numerical data in integer format representing CDS codes, with additional text fields.'}, {'Street': 'Data type: texts; Format: Street Address, consisting of street names and related text.'}, {'City': 'A collection of text data representing city names, formatted as a comma-separated string.'}, {'State': ""Mixed data type containing null values and strings, representing state information with a specific format including headers 'State' and 'text'.""}, {'Zip': 'A zip code in text format, either 5 digits (XXXXX) or 10 digits with a hyphen (XXXXX-XXXX).'}], 'type': 'combine', 'on': 'CDSCode', 'combine_columns': ['School Name (frpm)', 'Street (schools)', 'City (schools)', 'State (schools)', 'Zip (schools)']}}, {'function': 'http://127.0.0.1:5200/select', 'filter_dict': {'columns': ['School Name', 'Street', 'City', 'State', 'Zip']}}]}",0,91.48968935012816,0.0,0.0,0.0,0,0,1
36,Under whose administration is the school with the highest number of students scoring 1500 or more on the SAT? Indicate their full names.,challenging,california_schools,"retrieve schoools, retrieve satscores, max `T1`.`NumGE1500` DESC\nLIMIT 1, combine","{'plans': [{'function': 'http://127.0.0.1:5200/retrieve','filter_dict': {'product': 'http://127.0.0.1:5000/products/california_schools/schools'}},{'function': 'http://127.0.0.1:5200/retrieve','filter_dict': {'product': 'http://127.0.0.1:5000/products/california_schools/satscores'}},{""function"":""http://127.0.0.1:5200/max"",""filter_dict"":{""rows"":1,""columns"":[""NumGE1500""]}}]}",-,-,Kindergarten to 8th grade refers to K-8; 'Offers a magnet program' means Magnet = 1; Multiple Provision Types refers to `NSLP Provision Status` = 'Multiple Provision Types',"{'plans': [{'function': 'http://127.0.0.1:5000/products/california_schools/satscores', 'filter_dict': {'product': 'satscores'}}, {'function': 'http://127.0.0.1:5200/filter', 'filter_dict': {'product': 'http://127.0.0.1:5000/products/california_schools/satscores', 'conditions': {'NumGE1500': {'min': 0}}}}, {'function': 'http://127.0.0.1:5200/sortby', 'filter_dict': {'columns': 'NumGE1500', 'ascending': 'False'}}, {'function': 'http://127.0.0.1:5000/products/california_schools/schools', 'filter_dict': {'product': 'schools'}}, {'function': 'http://127.0.0.1:5200/filter', 'filter_dict': {'product': 'http://127.0.0.1:5000/products/california_schools/schools', 'conditions': {'CDSCode': 'matches cds from satscores'}}}, {'function': 'combination', 'filter_dict': {'columns_left': [{'cds': 'Numerical data in integer format related to the California Department of Schools.'}, {'rtype': 'Single character strings representing text data, with fields for rtype and unuseful.'}, {'sname': 'A collection of text data formatted as strings, containing school names and associated text entries.'}, {'dname': ""A collection of text data in String format, containing district names and segments, structured as 'dname,district name,district segment,text'.""}, {'cname': 'A list of county names formatted as strings.'}, {'enroll12': 'Numerical data representing enrollment numbers for grades 1 to 12, formatted as integers.'}, {'NumTstTakr': 'Numerical data representing the number of test takers in each school, formatted as integers.'}, {'AvgScrRead': 'Numerical data representing average scores in Reading, formatted as a float.'}, {'AvgScrMath': 'Numerical data representing average scores in Math, formatted as a float.'}, {'AvgScrWrite': 'Numerical data representing average scores in writing, formatted as a float.'}, {'NumGE1500': 'Numerical data in floating point format representing the number of test takers whose total SAT scores are greater than or equal to 1500, used to calculate the excellence rate.'}], 'columns_right': [{'CDSCode': 'Numerical data in integer format representing CDS codes, with additional text fields.'}, {'NCESDist': 'A 7-digit numerical identifier for school districts, formatted as a float, where the first 2 digits represent the state and the last 5 digits represent the school district.'}, {'NCESSchool': 'Numerical data in float format representing the 5-digit NCES school identification number, which, when combined with the NCESDist, forms a unique 12-digit ID for each school.'}, {'StatusType': ""A string field that identifies the operational status of a district, with possible values including 'Active', 'Closed', 'Merged', and 'Pending'.""}, {'County': ""A string format data representing county names, with a structure that includes a header indicating 'County' followed by the actual county names as text.""}, {'District': ""A dataset containing textual information about districts, formatted as a CSV string with headers 'District' and 'text'.""}, {'School': 'A collection of text data related to schools, formatted as strings.'}, {'Street': 'Data type: texts; Format: Street Address, consisting of street names and related text.'}, {'StreetAbr': ""Abbreviated street address of a school, district, or administrative authority's physical location, formatted as text.""}, {'City': 'A collection of text data representing city names, formatted as a comma-separated string.'}, {'Zip': 'A zip code in text format, either 5 digits (XXXXX) or 10 digits with a hyphen (XXXXX-XXXX).'}, {'State': ""Mixed data type containing null values and strings, representing state information with a specific format including headers 'State' and 'text'.""}, {'MailStreet': 'This data consists of texts in the format of a Street Address, representing the unabbreviated mailing address of schools, districts, or administrative authorities. Note that some entities may lack data, and unpopulated fields have been filled with Street data.'}, {'MailStrAbr': 'Abbreviated mailing street address of a school, district, or administrative authority, formatted as a text string.'}, {'MailCity': 'MailCity is a string data type representing the mailing city associated with the address of a school, district, or administrative authority. It may contain empty values where the mailing address city is not provided, which have been filled with corresponding city data.'}, {'MailZip': ""MailZip is a text field representing the zip code associated with the mailing address of a school, district, or administrative authority. The format can be either 'XXXXX-XXXX' or 'XXXXX'. Note that some entries may be unpopulated and have been filled with available Zip data.""}, {'MailState': 'Mixed data type containing null or string values representing the mailing state in an address, with unpopulated cells filled with corresponding state data.'}, {'Phone': 'Phone number in the format (XXX) XXX-XXXX'}, {'Ext': 'A numerical data type representing the phone number extension of a school, district, or administrative authority, formatted as a float.'}, {'Website': 'A URL format representing the website address of a school, district, or administrative authority.'}, {'OpenDate': 'A date representing when the school opened, formatted as YYYY-MM-DD.'}, {'ClosedDate': 'ClosedDate represents the date a school closed, formatted as YYYY-MM-DD.'}, {'Charter': 'This data includes a numerical field that can be a float or NaN, indicating a charter school status coded as an integer: 1 for charter schools and 0 for non-charter schools.'}, {'CharterNum': 'Mixed data containing strings and floats, including a 4-digit charter school number represented as text.'}, {'FundingType': ""FundingType is a text field indicating the charter school funding type, represented as a string. Possible values include 'Not in CS funding model', 'Locally funded', and 'Directly funded'.""}, {'DOC': 'The District Ownership Code (DOC) is a numerical identifier represented as integers, used to categorize the Administrative Authority in the education system, with specific codes assigned to various types of educational institutions.'}, {'DOCType': 'A string representing the text description of the District Ownership Code Type (DOCType), which categorizes ownership types in a district.'}, {'SOC': 'Numerical data representing the School Ownership Code (SOC) as a float, used to identify various types of schools, including preschool, special education, and public schools.'}, {'SOCType': 'A string representing the School Ownership Code Type, which describes the type of school.'}, {'EdOpsCode': 'A string data type representing various education option codes, each corresponding to a specific type of educational institution or program.'}, {'EdOpsName': ""A string data type representing the long text description of an educational option, labeled as 'Educational Option Name'.""}, {'EILCode': 'A string format representing various educational levels or categories, including codes for Adult, Elementary, High School, and others.'}, {'EILName': 'A string representing the Educational Instruction Level Name, which describes the type of educational institution relative to the grade range it serves.'}, {'GSoffered': 'This data represents the grade span offered by a school, district, or administrative authority, formatted as X-Y, X-Adult, P-X, or K-X, where X and Y denote specific grade levels.'}, {'GSserved': ""Text data representing the grade span served in K-12 education, formatted as 'X-Y' or 'K-Z' where X, Y, and Z are integers, indicating the lowest and highest grades of student enrollment based on CALPADS Fall 1 data.""}, {'Virtual': ""Categorical data representing the type of virtual instruction offered by a school, with possible values: ['F', 'N', 'P', null]. 'F' indicates Exclusively Virtual, 'V' indicates Primarily Virtual, 'C' indicates Primarily Classroom, 'N' indicates Not Virtual, and 'P' indicates Partial Virtual (retired).""}, {'Magnet': 'This data indicates whether a school is a magnet school or offers a magnet program, represented as an integer: 1 for magnet and 0 for not magnet. The field may also contain NaN values.'}, {'Latitude': 'Numerical data representing latitude as a float, indicating the angular distance in degrees from the equator, measured north to south.'}, {'Longitude': 'Numerical data representing longitude as floating-point numbers, indicating the angular distance in degrees from the prime meridian (Greenwich, England), measured from west to east.'}, {'AdmFName1': ""A string data type representing the administrator's first name, specifically for superintendents or principals, with additional context regarding the display of administrator information in active and pending districts and schools.""}, {'AdmLName1': 'A string data type representing the last name of an administrator, specifically the superintendent or principal, with additional context regarding the display of administrator information for active and pending districts and schools.'}, {'AdmEmail1': ""This data represents an administrator's email address in the format email@example.com, specifically for superintendents or principals in active and pending districts and schools.""}, {'AdmFName2': ""A string data type representing a text field, specifically indicating that 'AdmFName2' is the same as another field labeled '1'.""}, {'AdmLName2': ""A string data type representing a text field labeled 'AdmLName2'.""}, {'AdmEmail2': 'Email address in the format email@example.com'}, {'AdmFName3': ""A string data type representing a text field labeled 'AdmFName3', which is not useful.""}, {'AdmLName3': ""A string data type representing a text field labeled 'AdmLName3', which is not useful.""}, {'AdmEmail3': ""Data type is text, specifically formatted as an email address (email@example.com). The entry 'AdmEmail3,,,text,not useful' indicates a potential email field with additional non-useful text.""}, {'LastUpdate': 'A date field representing the last update of a record, formatted as YYYY-MM-DD.'}], 'type': 'combine'}}]}",0,96.41303825378418,0.0,0.0,0.0,0,0,1
634,"Among posts by Harvey Motulsky and Noah Snyder, which one has higher popularity?",challenging,codebase_community,"retrieve users, filter display names Harvey Motulsky, Noah Snyder, retrieve posthistory combine, retriev posts, combine, sum viewcount,  max 1","{'plans': [{'function': 'http://127.0.0.1:5200/retrieve','filter_dict': {'product': 'http://127.0.0.1:5000/products/codebase_community/users'}},{'function': 'http://127.0.0.1:5200/filter', ""values"": {""conditions"": {""DisplayName"":[""Harvey Motulsky"",""Noah Snyder""]}}},{'function': 'http://127.0.0.1:5200/retrieve','filter_dict': {'product': 'http://127.0.0.1:5000/products/codebase_community/postHistory'}},{'function':'combination', 'filter_dict':{'columns_left': 'Id', 'columns_right': 'UserId', 'type': 'equals','values': ['None']}},{'function': 'http://127.0.0.1:5200/retrieve','filter_dict': {'product': 'http://127.0.0.1:5000/products/codebase_community/posts'}},{'function':'combination', 'filter_dict':{'columns_left': 'PostId', 'columns_right': 'Id', 'type': 'equals','values': ['None']}},{""function"":""http://127.0.0.1:5200/sum"",""filter_dict"":{""columns"":""ViewCount"",""group_by"":[""DisplayName""]}},{""function"":""http://127.0.0.1:5200/max"",""filter_dict"":{""rows"":1,""columns"":""ViewCount""}}]}",-,-,Has higher popularity means the post has higher view count ; calculation = MAX(SUM(ViewCount)) where DisplayName = 'Harvey Motulsky' OR DisplayName = 'Noah Snyder',"{'plans': [{'function': 'http://127.0.0.1:5000/products/codebase_community/posts', 'filter_dict': {'product': 'codebase_community'}}, {'function': 'http://127.0.0.1:5200/filter', 'filter_dict': {'product': 'data product', 'conditions': {'OwnerDisplayName': ['Harvey Motulsky', 'Noah Snyder']}}}, {'function': 'http://127.0.0.1:5200/sum', 'filter_dict': {'group_by': ['OwnerDisplayName'], 'columns': ['ViewCount']}}, {'function': 'http://127.0.0.1:5200/sum', 'filter_dict': {'group_by': ['DisplayName'], 'columns': ['ViewCount']}}]}",0,27.00099444389344,0.0,0.0,0.0,0,0,1
578,Which user made a post titled 'Understanding what Dassault iSight is doing?' and how much is the reputation of the user?,moderate,codebase_community,"retrieve posts, filter for  'Understanding what Dassault iSight is doing?', retrieve users, combine ","{""plans"":[{""function"":""http://127.0.0.1:5200/retrieve"",""filter_dict"":{""product"":""http://127.0.0.1:5000/products/codebase_community/users""}},{""function"":""http://127.0.0.1:5200/retrieve"",""filter_dict"":{""product"":""http://127.0.0.1:5000/products/codebase_community/posts""}},{""function"":""http://127.0.0.1:5200/filter"",""filter_dict"":{""conditions"":{""Title"":""Understanding what Dassault iSight is doing?""}}},{""function"":'combination', 'filter_dict': {""columns_left"": ""Id"", ""columns_right"": ""OwnerUserId"", ""type"": ""equals"", ""values"": [""None""]}}]}",-,-,Understanding what Dassault iSight is doing?' is the Title of post; user refers to DisplayName;,"{'plans': [{'function': 'http://127.0.0.1:5000/products/codebase_community/posts', 'filter_dict': {'product': 'posts'}}, {'function': 'http://127.0.0.1:5200/filter', 'filter_dict': {'product': 'http://127.0.0.1:5000/products/codebase_community/posts', 'conditions': {'Title': 'Understanding what Dassault iSight is doing?'}}}, {'function': 'http://127.0.0.1:5000/products/codebase_community/users', 'filter_dict': {'product': 'users'}}, {'function': 'combination', 'filter_dict': {'columns_left': [{'Id': 'Numerical data in integer format representing post IDs.'}, {'PostTypeId': 'Numerical data in integer format representing the Post Type Id, which is the identifier for a specific post type.'}, {'AcceptedAnswerId': 'Numerical data in float format representing a value, and an integer representing the accepted answer ID of a post.'}, {'CreaionDate': 'Creation date of the post in datetime format YYYY-MM-DD HH:MM:SS'}, {'Score': 'Numerical data representing the score of a post, formatted as integers.'}, {'ViewCount': 'Numerical data representing the view count of a post, formatted as a float. Higher values indicate greater popularity.'}, {'Body': 'HTML formatted text containing paragraphs and code snippets for the body of a post.'}, {'OwnerUserId': 'Numerical data in float format representing a value, and an integer representing the Owner User Id.'}, {'LasActivityDate': 'Last Activity Date in datetime format, represented as YYYY-MM-DD HH:MM:SS.'}, {'Title': 'A string format data representing the title of a post.'}, {'Tags': ""Data consists of text entries formatted as <category1><category2><category3>, with tags indicating the post's subject matter.""}, {'AnswerCount': 'Numerical data representing the total number of answers to a post, formatted as an integer.'}, {'CommentCount': 'Numerical data representing the total number of comments on a post, formatted as integers.'}, {'FavoriteCount': 'Numerical data representing the total number of favorites for a post, formatted as a float. Higher values indicate more valuable posts.'}, {'LastEditorUserId': 'Numerical data in float format representing a value, and an integer representing the ID of the last editor.'}, {'LastEditDate': 'Dates in the format YYYY-MM-DD HH:MM:SS representing the last edit date and time.'}, {'CommunityOwnedDate': 'Community Owned Date in datetime format, represented as YYYY-MM-DD HH:MM:SS.'}, {'ParentId': 'This data consists of a numerical value in float format representing the ParentId of a post. It indicates the ID of the parent post, where an integer value is used. If the ParentId is null, it signifies that the post is a root post; otherwise, it is a child post of another post.'}, {'ClosedDate': 'ClosedDate represents the date and time when a post is marked as closed, formatted as YYYY-MM-DD HH:MM:SS. A null or empty value indicates the post is not well-finished, while a non-null value signifies that the post is well-finished.'}, {'OwnerDisplayName': 'A string representing the display name of the post owner.'}, {'LastEditorDisplayName': 'A string representing the display name of the last editor.'}], 'columns_right': [{'Id': 'Numerical data representing user IDs in integer format.'}, {'Reputation': ""Numerical data representing a user's reputation as an integer, indicating their influence based on the value.""}, {'CreationDate': 'Creation date of the user account in datetime format, specified as YYYY-MM-DD HH:MM:SS.'}, {'DisplayName': ""A string representing the user's display name, formatted as 'DisplayName' or 'Display Name'.""}, {'LastAccessDate': 'LastAccessDate represents the last access date of the user account in the format YYYY-MM-DD HH:MM:SS.'}, {'WebsiteUrl': 'A text data format representing the website URL of a user account, structured as a URL (e.g., http://example.com).'}, {'Location': ""Data consists of user location information in the format 'City, Country' or 'State', along with associated text.""}, {'AboutMe': 'HTML formatted strings containing personal descriptions, interests, and links for user self-introduction.'}, {'Views': 'Numerical data representing the number of views, formatted as integers.'}, {'UpVotes': 'Numerical data representing the number of upvotes as integers.'}, {'DownVotes': 'Numerical data representing the count of downvotes as integers.'}, {'AccountId': 'Numerical data in integer format representing unique account identifiers.'}, {'Age': ""Numerical data representing user's age as a float, categorized into three groups: teenager (13-18), adult (19-65), and elder (> 65).""}, {'ProfileImageUrl': 'A collection of text data representing profile image URLs, formatted as URLs.'}], 'type': 'combine', 'values': {'data_product_1': 'posts.OwnerUserId', 'data_product_2': 'users.Id'}}}, {'function': 'combination', 'filter_dict': {'columns_left': ['Id', 'PostTypeId', 'AcceptedAnswerId', 'CreaionDate', 'Score', 'ViewCount', 'Body', 'OwnerUserId', 'LasActivityDate', 'Title', 'Tags', 'AnswerCount', 'CommentCount', 'FavoriteCount', 'LastEditorUserId', 'LastEditDate', 'CommunityOwnedDate', 'ParentId', 'ClosedDate', 'OwnerDisplayName', 'LastEditorDisplayName'], 'columns_right': ['Id', 'Reputation', 'CreationDate', 'DisplayName', 'LastAccessDate', 'WebsiteUrl', 'Location', 'AboutMe', 'Views', 'UpVotes', 'DownVotes', 'AccountId', 'Age', 'ProfileImageUrl'], 'type': 'filter', 'values': {'criteria': 'Id matches OwnerUserId from posts', 'columns': ['DisplayName', 'Reputation']}}}]}",0,78.29406762123108,0.0,0.0,0.0,0,0,1
537,How many posts does the user csgillespie own?,simple,codebase_community,"retriev users filter for user = csgillespie, retrieve posts combine, count","{""plans"":[{""function"":""http://127.0.0.1:5200/retrieve"",""filter_dict"":{""product"":""http://127.0.0.1:5000/products/codebase_community/users""}},{""function"":""http://127.0.0.1:5200/filter"",""filter_dict"":{""conditions"":{""DisplayName"":""csgillespie""}}},{""function"":""http://127.0.0.1:5200/retrieve"",""filter_dict"":{""product"":""http://127.0.0.1:5000/products/codebase_community/posts""}},{""function"":'combination', 'filter_dict': {""columns_left"": ""Id"", ""columns_right"": ""OwnerUserId"", ""type"": ""equals"", ""values"": [""None""]}},{""function"":""http://127.0.0.1:5200/count"",""filter_dict"":{""columns"":[""Id""]}}]}",-,-,csgillespie' is the DisplayName of user,"{'plans': [{'function': 'http://127.0.0.1:5000/products/codebase_community/posts', 'filter_dict': {'product': 'posts'}}, {'function': 'http://127.0.0.1:5200/filter', 'filter_dict': {'product': 'http://127.0.0.1:5000/products/codebase_community/posts', 'conditions': {'OwnerUserId': 'csgillespie'}}}, {'function': 'http://127.0.0.1:5200/count', 'filter_dict': {'product': 'posts', 'columns': 'owner', 'value': 'csgillespie', 'unique': False}}]}",0,23.005065441131592,0.0,0.0,0.0,0,0,1
671,What is the display name of the user who acquired the first Autobiographer badge?,simple,codebase_community,"retrieve badges, filter  Autobiographer, sortby date, retrieve user combine","{""plans"":[{""function"":""http://127.0.0.1:5200/retrieve"",""filter_dict"":{""product"":""http://127.0.0.1:5000/products/codebase_community/badges""}},{""function"":""http://127.0.0.1:5200/filter"",""filter_dict"":{""conditions"":{""Name"":""Autobiographer""}}},{""function"":""http://127.0.0.1:5200/min"",""filter_dict"":{""columns"":""Date"",""rows"":1}},{""function"":""http://127.0.0.1:5200/retrieve"",""filter_dict"":{""product"":""http://127.0.0.1:5000/products/codebase_community/users""}},{""function"":'combination', 'filter_dict': {""columns_left"": ""UserId"", ""columns_right"": ""Id"", ""type"": ""equals"", ""values"": [""None""]}}]}",-,-,Autobiographer is the name of the badge; acquired the first refers to MIN(Date);,"{'plans': [{'function': 'http://127.0.0.1:5000/products/codebase_community/badges', 'filter_dict': {'product': 'badges'}}, {'function': 'http://127.0.0.1:5200/filter', 'filter_dict': {'product': 'http://127.0.0.1:5000/products/codebase_community/badges', 'conditions': {'Name': 'Autobiographer'}, 'columns': ['Id', 'UserId', 'Name', 'Date']}}, {'function': 'http://127.0.0.1:5200/sortby', 'filter_dict': {'product': 'http://127.0.0.1:5000/products/codebase_community/badges', 'columns': 'Date', 'ascending': 'True'}}, {'function': 'http://127.0.0.1:5000/products/codebase_community/users', 'filter_dict': {'product': 'codebase_community_users'}}, {'function': 'http://127.0.0.1:5200/filter', 'filter_dict': {'product': 'http://127.0.0.1:5000/products/codebase_community/users', 'conditions': {'Id': 'matches UserId from badges'}, 'columns': ['DisplayName']}}, {'function': 'combination', 'filter_dict': {'columns_left': [{'Id': 'Numerical data representing badge IDs in integer format.'}, {'UserId': 'UserId is a numerical data type represented as integers, serving as a unique identifier for each user.'}, {'Name': 'A string representing the name of a badge obtained by a user.'}, {'Date': 'A datetime record indicating the date and time (format: YYYY-MM-DD HH:MM:SS) when a user obtained a badge.'}], 'columns_right': [{'Id': 'Numerical data representing user IDs in integer format.'}, {'DisplayName': ""A string representing the user's display name, formatted as 'DisplayName' or 'Display Name'.""}], 'type': 'combine'}}, {'function': 'http://127.0.0.1:5200/filter', 'filter_dict': {'product': 'combination_result', 'columns': ['DisplayName']}}]}",0,46.90369057655335,0.0,0.0,0.0,0,0,1
682,Which is the most valuable post in 2010? Please give its id and the owner's display name.,moderate,codebase_community,"retrieve posts, filter for 2010, sortby FavoriteCount, max 1, retrive user combine","{""plans"":[{""function"":""http://127.0.0.1:5200/retrieve"",""filter_dict"":{""product"":""http://127.0.0.1:5000/products/codebase_community/posts""}},{""function"":""http://127.0.0.1:5200/filter"",""filter_dict"":{""conditions"":{""CreaionDate"":{""min"":""2010-01-01 0:0:0.0"",""max"":""2011-01-01 0:0:0.0""}}}},{""function"":""http://127.0.0.1:5200/max"",""filter_dict"":{""columns"":""FavoriteCount"",""rows"":1}},{""function"":""http://127.0.0.1:5200/retrieve"",""filter_dict"":{""product"":""http://127.0.0.1:5000/products/codebase_community/users""}},{""function"":'combination', 'filter_dict': {""columns_left"": ""OwnerUserId"", ""columns_right"": ""Id"", ""type"": ""equals"", ""values"": [""None""]}}]}",-,-,the most valuable post in 2010 refers to MAX(FavoriteCount) where year(CreationDate) = 2010;,"{'plans': [{'function': 'http://127.0.0.1:5000/products/codebase_community/posts', 'filter_dict': {'product': 'codebase_community'}}, {'function': 'http://127.0.0.1:5200/filter', 'filter_dict': {'product': 'http://127.0.0.1:5000/products/codebase_community/posts', 'conditions': {'CreationDate': {'year': 2010}}, 'columns': ['Id', 'FavoriteCount', 'OwnerDisplayName']}}, {'function': 'http://127.0.0.1:5200/max', 'filter_dict': {'columns': ['FavoriteCount']}}, {'function': 'http://127.0.0.1:5200/max', 'filter_dict': {'columns': ['Id', 'OwnerDisplayName']}}]}",0,26.85262107849121,0.0,0.0,0.0,0,0,1
1472,"In 2012, who had the least consumption in LAM?",moderate,debit_card_specializing,"retrieve customer, filter segemet = LAM, retrieve yearmonth filter 2012, min1 consumption","{""plans"":[{""function"":""http://127.0.0.1:5200/retrieve"",""filter_dict"":{""product"":""http://127.0.0.1:5000/products/debit_card_specializing/customers""}},{""function"":""http://127.0.0.1:5200/filter"",""filter_dict"":{""conditions"":{""Segment"":""LAM""}}},{""function"":""http://127.0.0.1:5200/retrieve"",""filter_dict"":{""product"":""http://127.0.0.1:5000/products/debit_card_specializing/yearmonth""}},{""function"":""http://127.0.0.1:5200/filter"",""filter_dict"":{""conditions"":{""Date"":{""min"":201201,""max"":201212}}}},{""function"":'combination', 'filter_dict': {""columns_left"": ""CustomerID"", ""columns_right"": ""CustomerID"", ""type"": ""equals"", ""values"": [""None""]}},{""function"":""http://127.0.0.1:5200/min"",""filter_dict"":{""columns"":""Consumption"",""rows"":1}}]}",-,-,Year 2012 can be presented as Between 201201 And 201212; The first 4 strings of the Date values in the yearmonth table can represent year.,"{'plans': [{'function': 'http://127.0.0.1:5000/products/debit_card_specializing/yearmonth', 'filter_dict': {'product': 'debit_card_specializing'}}, {'function': 'http://127.0.0.1:5200/filter', 'filter_dict': {'conditions': {'Date': {'min': 201201, 'max': 201212}}}}, {'function': 'http://127.0.0.1:5200/filter', 'filter_dict': {'conditions': {'CustomerID': 'LAM'}}}, {'function': 'http://127.0.0.1:5200/min', 'filter_dict': {'columns': ['Consumption'], 'rows': 1}}]}",0,25.6905300617218,0.1666666666666666,0.1111111111111111,0.25,0,0,1
1514,What kind of currency did the customer paid at 16:25:00 in 2012/8/24?,simple,debit_card_specializing,"retrieve transactions, filter 16:25:00 in 2012/8/24?, retrieve gasstations, combine retrieve customer combine","{""plans"":[{""function"":""http://127.0.0.1:5200/retrieve"",""filter_dict"":{""product"":""http://127.0.0.1:5000/products/debit_card_specializing/transactions_1k""}},{""function"":""http://127.0.0.1:5200/filter"",""filter_dict"":{""conditions"":{""Date"":""2012-08-24"",""Time"":""16:25:00""}}},{""function"":""http://127.0.0.1:5200/retrieve"",""filter_dict"":{""product"":""http://127.0.0.1:5000/products/debit_card_specializing/customers""}},{""function"":'combination', 'filter_dict': {""columns_left"": ""CustomerID"", ""columns_right"": ""CustomerID"", ""type"": ""equals"", ""values"": [""None""]}}]}",-,-,2012/8/24' can be represented by '2012-08-24'; ,"{'plans': [{'function': 'http://127.0.0.1:5000/products/debit_card_specializing/transactions_1k', 'filter_dict': {'product': 'transactions_1k'}}, {'function': 'http://127.0.0.1:5200/filter', 'filter_dict': {'product': 'http://127.0.0.1:5000/products/debit_card_specializing/transactions_1k', 'conditions': {'Date': '2012-08-24', 'Time': '16:25:00'}}}, {'function': 'http://127.0.0.1:5200/filter', 'filter_dict': {'product': 'http://127.0.0.1:5000/products/debit_card_specializing/customers', 'conditions': {'CustomerID': 'from transactions_1k filtered result'}}}, {'function': 'http://127.0.0.1:5000/products/debit_card_specializing/customers', 'filter_dict': {'product': 'customers'}}, {'function': 'combination', 'filter_dict': {'columns_left': [{'TransactionID': 'A numerical dataset containing Transaction IDs represented as integers.'}, {'Date': 'A collection of dates formatted as YYYY-MM-DD.'}, {'Time': 'Time data in HH:MM:SS format, representing hours, minutes, and seconds.'}, {'CustomerID': 'Numerical data representing unique customer identifiers in integer format.'}, {'CardID': 'Numerical data representing Card IDs in integer format.'}, {'GasStationID': 'GasStationID is a numerical data type represented as integers, used to uniquely identify gas stations.'}, {'ProductID': 'Numerical data representing Product IDs in integer format.'}, {'Amount': 'Numerical data representing amounts in integer format.'}, {'Price': 'Numerical data representing price as a float, calculated using the formula: total price = Amount x Price.'}], 'columns_right': [{'CustomerID': 'CustomerID is a numerical identifier for customers, represented as an integer.'}, {'Segment': 'A collection of text data representing client segments, formatted as a string with comma-separated values.'}, {'Currency': 'Data type: texts; Format: Currency codes following ISO 4217 standard, including currency name and associated text.'}], 'type': 'combine', 'values': {'on': 'CustomerID'}}}, {'function': 'http://127.0.0.1:5200/returnResult', 'filter_dict': {}}]}",0,48.954890727996826,0.0,0.0,0.0,0,0,1
1505,"Among the customers who paid in euro, how many of them have a monthly consumption of over 1000?",simple,debit_card_specializing,"retrieve customer, filter eur, retrieve yearmonth, filter 1000+, count","{""plans"":[{""function"":""http://127.0.0.1:5200/retrieve"",""filter_dict"":{""product"":""http://127.0.0.1:5000/products/debit_card_specializing/customers""}},{""function"":""http://127.0.0.1:5200/filter"",""filter_dict"":{""conditions"":{""Currency"":""EUR""}}},{""function"":""http://127.0.0.1:5200/retrieve"",""filter_dict"":{""product"":""http://127.0.0.1:5000/products/debit_card_specializing/yearmonth""}},{""function"":""http://127.0.0.1:5200/filter"",""filter_dict"":{""conditions"":{""Consumption"":{""min"":1000}}}},{""function"":'combination', 'filter_dict': {""columns_left"": ""CustomerID"", ""columns_right"": ""CustomerID"", ""type"": ""equals"", ""values"": [""None""]}},{""function"":""http://127.0.0.1:5200/count"",""filter_dict"":{""columns"":[""CustomerID""],'unique': 'True'}}]}",-,-,Pays in euro = Currency = 'EUR'.,"{'plans': [{'function': 'http://127.0.0.1:5000/products/debit_card_specializing/customers', 'filter_dict': {'product': 'customers'}}, {'function': 'http://127.0.0.1:5200/filter', 'filter_dict': {'product': 'http://127.0.0.1:5000/products/debit_card_specializing/customers', 'conditions': {'Currency': 'EUR'}}}, {'function': 'http://127.0.0.1:5000/products/debit_card_specializing/yearmonth', 'filter_dict': {'product': 'yearmonth'}}, {'function': 'http://127.0.0.1:5200/filter', 'filter_dict': {'product': 'http://127.0.0.1:5000/products/debit_card_specializing/yearmonth', 'conditions': {'Consumption': {'min': 1000}}}}, {'function': 'combination', 'filter_dict': {'columns_left': [{'CustomerID': 'CustomerID is a numerical identifier for customers, represented as an integer.'}, {'Segment': 'A collection of text data representing client segments, formatted as a string with comma-separated values.'}, {'Currency': 'Data type: texts; Format: Currency codes following ISO 4217 standard, including currency name and associated text.'}], 'columns_right': [{'CustomerID': 'Numerical data representing unique customer identifiers in integer format.'}, {'Date': 'Numerical data representing dates in the format YYYYMM.'}, {'Consumption': 'Numerical data representing consumption values in float format.'}], 'type': 'combine', 'values': 'CustomerID'}}, {'function': 'http://127.0.0.1:5200/count', 'filter_dict': {'product': 'count'}}]}",0,34.8359272480011,0.0,0.0,0.0,0,0,1
1473,What was the average monthly consumption of customers in SME for the year 2013?,moderate,debit_card_specializing,"retrieve customer, filter sme, retrieve year month, filter 2013, combine, avg consumption","{""plans"":[{""function"":""http://127.0.0.1:5200/retrieve"",""filter_dict"":{""product"":""http://127.0.0.1:5000/products/debit_card_specializing/customers""}},{""function"":""http://127.0.0.1:5200/filter"",""filter_dict"":{""conditions"":{""Segment"":""SME""}}},{""function"":""http://127.0.0.1:5200/retrieve"",""filter_dict"":{""product"":""http://127.0.0.1:5000/products/debit_card_specializing/yearmonth""}},{""function"":""http://127.0.0.1:5200/filter"",""filter_dict"":{""conditions"":{""Date"":{""min"":201301,""max"":201312}}}},{""function"":'combination', 'filter_dict': {""columns_left"": ""CustomerID"", ""columns_right"": ""CustomerID"", ""type"": ""equals"", ""values"": [""None""]}},{""function"":""http://127.0.0.1:5200/mean"",""filter_dict"":{""columns"":[""Consumption""],""group_by"":[""Date""]}}]}",-,-,Average Monthly consumption = AVG(Consumption) / 12; Year 2013 can be presented as Between 201301 And 201312; The first 4 strings of the Date values in the yearmonth table can represent year.,"{'plans': [{'function': 'http://127.0.0.1:5000/products/debit_card_specializing/customers', 'filter_dict': {'product': 'customers'}}, {'function': 'http://127.0.0.1:5200/filter', 'filter_dict': {'product': 'http://127.0.0.1:5000/products/debit_card_specializing/customers', 'conditions': {'Segment': 'SME'}}}, {'function': 'http://127.0.0.1:5000/products/debit_card_specializing/yearmonth', 'filter_dict': {'product': 'yearmonth'}}, {'function': 'http://127.0.0.1:5200/filter', 'filter_dict': {'product': 'http://127.0.0.1:5000/products/debit_card_specializing/yearmonth', 'conditions': {'Date': {'min': 201301, 'max': 201312}}}}, {'function': 'combination', 'filter_dict': {'columns_left': [{'CustomerID': 'CustomerID is a numerical identifier for customers, represented as an integer.'}, {'Segment': 'A collection of text data representing client segments, formatted as a string with comma-separated values.'}, {'Currency': 'Data type: texts; Format: Currency codes following ISO 4217 standard, including currency name and associated text.'}], 'columns_right': [{'CustomerID': 'Numerical data representing unique customer identifiers in integer format.'}, {'Date': 'Numerical data representing dates in the format YYYYMM.'}, {'Consumption': 'Numerical data representing consumption values in float format.'}], 'type': 'combine on CustomerID'}}, {'function': 'http://127.0.0.1:5200/mean', 'filter_dict': {'group_by': None, 'columns': ['Consumption']}}]}",0,34.85832452774048,0.0,0.0,0.0,0,0,1
1509,"Among the transactions made in the gas stations in the Czech Republic, how many of them are taken place after 2012/1/1?",challenging,debit_card_specializing,"retrieve gasstations, filter gasstations Country=CZE,retrieve transactions, filter Date 2012/1/1, combine GasStationID GasStationID, count TransactionID","{'plans': [{'function': 'http://127.0.0.1:5200/retrieve','filter_dict': {'product': 'http://127.0.0.1:5000/products/debit_card_specializing/gasstations'}},{'function': 'http://127.0.0.1:5200/filter', ""values"": {""conditions"": {""Country"":""CZE""}}},{'function': 'http://127.0.0.1:5200/retrieve','filter_dict': {'product': 'http://127.0.0.1:5000/products/debit_card_specializing/transactions_1k'}},{'function': 'http://127.0.0.1:5200/filter', ""values"": {""conditions"": {""Date"":{""min"":""2012-01-01""}}}},
 {'function': 'combination', 'filter_dict': {'columns_left': 'GasStationID', 'columns_right': 'GasStationID', 'type': 'equals', 'values': 'GasStationID'}},{""function"":""http://127.0.0.1:5200/count"",""filter_dict"":{""columns"":""TransactionID""}}]}",-,-,Czech Republic can be represented as the Country value in the gasstations table is 'CZE',"{'plans': [{'function': 'http://127.0.0.1:5000/products/debit_card_specializing/gasstations', 'filter_dict': {'product': 'debit_card_specializing'}}, {'function': 'http://127.0.0.1:5200/filter', 'filter_dict': {'product': 'http://127.0.0.1:5000/products/debit_card_specializing/gasstations', 'conditions': {'Country': 'CZE'}}}, {'function': 'http://127.0.0.1:5000/products/debit_card_specializing/transactions_1k', 'filter_dict': {'product': 'debit_card_specializing'}}, {'function': 'http://127.0.0.1:5200/filter', 'filter_dict': {'product': 'http://127.0.0.1:5000/products/debit_card_specializing/transactions_1k', 'conditions': {'Date': {'$gt': '2012-01-01'}}}}, {'function': 'combination', 'filter_dict': {'columns_left': [{'GasStationID': 'GasStationID is a numerical data type represented as integers, used to uniquely identify gas stations.'}, {'ChainID': 'Numerical data representing Chain IDs in integer format.'}, {'Country': 'A list of country names associated with their ISO 3166-1 alpha-3 country codes in a text format.'}, {'Segment': 'A text data format consisting of a string that includes segments and chain segments, separated by commas.'}], 'columns_right': [{'TransactionID': 'A numerical dataset containing Transaction IDs represented as integers.'}, {'Date': 'A collection of dates formatted as YYYY-MM-DD.'}, {'Time': 'Time data in HH:MM:SS format, representing hours, minutes, and seconds.'}, {'CustomerID': 'Numerical data representing unique customer identifiers in integer format.'}, {'CardID': 'Numerical data representing Card IDs in integer format.'}, {'GasStationID': 'GasStationID is a numerical data type represented as integers, used to uniquely identify gas stations.'}, {'ProductID': 'Numerical data representing Product IDs in integer format.'}, {'Amount': 'Numerical data representing amounts in integer format.'}, {'Price': 'Numerical data representing price as a float, calculated using the formula: total price = Amount x Price.'}], 'type': 'combine'}}, {'function': 'http://127.0.0.1:5200/sum', 'filter_dict': {'group_by': None, 'columns': None}}]}",0,46.16180992126465,0.0,0.0,0.0,0,0,1
137,How many accounts have running contracts in Branch location 1?,moderate,financial," retrieve accounts, retrieve loan status C/D, combine retrieve district, flter distric1 ","{""plans"":[{""function"":""http://127.0.0.1:5200/retrieve"",""filter_dict"":{""product"":""http://127.0.0.1:5000/products/financial/account""}},{""function"":""http://127.0.0.1:5200/retrieve"",""filter_dict"":{""product"":""http://127.0.0.1:5000/products/financial/loan""}},{""function"":""http://127.0.0.1:5200/filter"",""filter_dict"":{""conditions"":{""status"":[""C"",""D""]}}},{""function"":'combination', 'filter_dict': {""columns_left"": ""account_id"", ""columns_right"": ""account_id"", ""type"": ""equals"", ""values"": [""None""]}},{""function"":""http://127.0.0.1:5200/retrieve"",""filter_dict"":{""product"":""http://127.0.0.1:5000/products/financial/district""}},{""function"":""http://127.0.0.1:5200/filter"",""filter_dict"":{""conditions"":{""district_id"":1}}},{""function"":'combination', 'filter_dict': {""columns_left"": ""district_id"", ""columns_right"": ""district_id"", ""type"": ""equals"", ""values"": [""None""]}},{'function': 'http://127.0.0.1:5200/count', 'filter_dict': {'columns': 'account_id'}}]}",-,-,"""Status = 'C' stands for running contract, OK so far; Status = 'D' stands for running contract, client in debt""","{'plans': [{'function': 'http://127.0.0.1:5000/products/financial/account', 'filter_dict': {'product': 'financial/account'}}, {'function': 'http://127.0.0.1:5200/filter', 'filter_dict': {'product': 'http://127.0.0.1:5000/products/financial/account', 'conditions': {'district_id': 1}}}, {'function': 'http://127.0.0.1:5000/products/financial/loan', 'filter_dict': {'product': 'loan'}}, {'function': 'http://127.0.0.1:5200/filter', 'filter_dict': {'product': 'http://127.0.0.1:5000/products/financial/loan', 'conditions': {'status': ['C', 'D']}}}, {'function': 'combination', 'filter_dict': {'columns_left': [{'account_id': 'Numerical data representing account IDs in integer format.'}, {'district_id': 'Numerical data representing district IDs as integers, indicating the location of branches.'}, {'frequency': 'This data consists of text strings that describe different types of issuance frequencies: monthly, weekly, and after transaction.'}, {'date': 'Account creation dates in two formats: primary format is YYYY-MM-DD and secondary format is YYMMDD.'}], 'columns_right': [{'loan_id': 'Numerical data representing loan identifiers, formatted as integers.'}, {'account_id': 'Numerical data in integer format representing account identifiers.'}, {'date': 'A date representing when a loan is approved, formatted as YYYY-MM-DD.'}, {'amount': 'Numerical data in integer format representing amounts and approved amounts in US dollars.'}, {'duration': 'Numerical data representing loan duration in months, formatted as integers.'}, {'payments': 'Numerical data representing monthly payments in float format, measured in months.'}, {'status': ""Repayment status represented by single characters: 'A' for finished with no issues, 'B' for finished but unpaid, 'C' for running and okay, 'D' for running with client in debt.""}], 'type': 'combine', 'method': 'inner join', 'on': 'account.account_id = loan.account_id', 'columns': ['account.account_id', 'loan.status']}}, {'function': 'http://127.0.0.1:5200/sum', 'filter_dict': {'group_by': None, 'columns': ['account.account_id']}}]}",0,47.015931606292725,0.0,0.0,0.0,0,0,1
93,How many male customers who are living in North Bohemia have average salary greater than 8000?,moderate,financial,"retrive clients, filter gender M, retrieve districts, filter north Bohemia , A11 > 8000, combine district_id district_id","{'plans': [{'function': 'http://127.0.0.1:5200/retrieve','filter_dict': {'product': 'http://127.0.0.1:5000/products/financial/client'}},{'function': 'http://127.0.0.1:5200/filter', ""values"": {""conditions"": {""gender"":""M""}}},{'function': 'http://127.0.0.1:5200/retrieve','filter_dict': {'product': 'http://127.0.0.1:5000/products/financial/district'}},{'function': 'http://127.0.0.1:5200/filter', ""values"": {""conditions"": {""A3"":""north Bohemia"",""A11"":{""min"":8000}}}},{'function':'combination', 'filter_dict':{'columns_left': 'district_id', 'columns_right': 'district_id', 'type': 'equals','values': ['None']}},{""function"":""http://127.0.0.1:5200/count"",""filter_dict"":{""columns"":""client_id""}}]}",-,-,Male means that gender = 'M'; A3 refers to region; A11 pertains to average salary.,"{'plans': [{'function': 'http://127.0.0.1:5000/products/financial/client', 'filter_dict': {'product': 'financial'}}, {'function': 'http://127.0.0.1:5200/filter', 'filter_dict': {'product': 'http://127.0.0.1:5000/products/financial/client', 'conditions': {'gender': 'M'}, 'columns': ['client_id', 'gender', 'district_id']}}, {'function': 'http://127.0.0.1:5000/products/financial/district', 'filter_dict': {'product': {'district_id': 'Numerical data in integer format representing district IDs and branch locations.', 'A2': 'A collection of text data in string format, representing district names and associated text entries, structured as comma-separated values.', 'A3': ""A string data type representing a region in a text format, with a specific structure including 'A3' and 'region' identifiers."", 'A4': 'Numerical data representing the number of inhabitants, formatted as integers.', 'A5': 'Numerical data in integer format representing the number of municipalities with inhabitants less than 499, categorized by municipality, district, and region.', 'A6': 'Numerical data in integer format representing the number of municipalities with populations between 500 and 1999, categorized by municipality, district, and region.', 'A7': 'Numerical data in integer format representing the number of municipalities with populations between 2000 and 9999, categorized by municipality, district, and region.', 'A8': 'A8 is a numerical dataset representing the count of municipalities with populations greater than 10,000, categorized by municipality, district, and region, formatted as integers.', 'A10': 'A10 is a numerical data point representing the ratio of urban inhabitants, formatted as a float.', 'A11': 'Numerical data representing average salary values in integer format.', 'A12': 'Numerical data representing the unemployment rate for the year 1995, formatted as a float.', 'A13': 'Numerical data representing the unemployment rate for the year 1996, formatted as a float.', 'A14': 'A14 represents the number of entrepreneurs per 1000 inhabitants, formatted as integers.', 'A15': 'Numerical data representing the number of committed crimes in 1995, formatted as a float.', 'A16': 'A16 represents the number of committed crimes in the year 1996, formatted as integers.'}}}, {'function': 'http://127.0.0.1:5200/filter', 'filter_dict': {'product': 'http://127.0.0.1:5000/products/financial/district', 'conditions': {'A3': 'North Bohemia', 'A11': {'$gt': 8000}}, 'columns': ['district_id', 'A3', 'A11']}}, {'function': 'combination', 'filter_dict': {'columns_left': [{'Id': 'Numerical data representing comment IDs in integer format.'}, {'PostId': 'Numerical data in integer format representing the unique identifier for a post.'}, {'Score': 'Numerical data representing a rating score as an integer, ranging from 0 to 100, where scores above 60 indicate positive comments and scores below 60 indicate negative comments.'}, {'Text': 'A string format containing detailed content of a comment.'}, {'CreationDate': 'Creation date of the comment in datetime format, specified as YYYY-MM-DD HH:MM:SS.'}, {'UserId': 'Numerical data in float format representing user comments, with UserId as an integer identifying the user who posted the comment.'}, {'UserDisplayName': ""A string format representing the user's display name, typically used in user interfaces.""}], 'columns_right': [{'cds': 'Numerical data in integer format related to the California Department of Schools.'}, {'rtype': 'Single character strings representing text data, with fields for rtype and unuseful.'}, {'sname': 'A collection of text data formatted as strings, containing school names and associated text entries.'}, {'dname': ""A collection of text data in String format, containing district names and segments, structured as 'dname,district name,district segment,text'.""}, {'cname': 'A list of county names formatted as strings.'}, {'enroll12': 'Numerical data representing enrollment numbers for grades 1 to 12, formatted as integers.'}, {'NumTstTakr': 'Numerical data representing the number of test takers in each school, formatted as integers.'}, {'AvgScrRead': 'Numerical data representing average scores in Reading, formatted as a float.'}, {'AvgScrMath': 'Numerical data representing average scores in Math, formatted as a float.'}, {'AvgScrWrite': 'Numerical data representing average scores in writing, formatted as a float.'}, {'NumGE1500': 'Numerical data in floating point format representing the number of test takers whose total SAT scores are greater than or equal to 1500, used to calculate the excellence rate.'}], 'type': 'combine', 'method': 'inner join', 'on': 'district_id'}}, {'function': 'http://127.0.0.1:5200/sum', 'filter_dict': {'group_by': None, 'columns': ['client_id']}}]}",0,71.24545359611511,0.0,0.0,0.0,0,0,1
112,"For the female client who was born in 1976/1/29, which district did she opened her account?",simple,financial,"retrieve clients, filter female filter bisrt 1976/1/29, retrieve district combine","{""plans"":[{""function"":""http://127.0.0.1:5200/retrieve"",""filter_dict"":{""product"":""http://127.0.0.1:5000/products/financial/client""}},{""function"":""http://127.0.0.1:5200/filter"",""filter_dict"":{""conditions"":{""gender"":""F"",""birth_date"":""1976-01-29""}}},{""function"":""http://127.0.0.1:5200/retrieve"",""filter_dict"":{""product"":""http://127.0.0.1:5000/products/financial/district""}},{""function"":'combination', 'filter_dict': {""columns_left"": ""district_id"", ""columns_right"": ""district_id"", ""type"": ""equals"", ""values"": [""None""]}}]}",-,-,Female refers to gender = 'F'; A2 refers to district names,"{'plans': [{'function': 'http://127.0.0.1:5000/products/debit_card_specializing/transactions_1k', 'filter_dict': {'product': 'client'}}, {'function': 'http://127.0.0.1:5200/filter', 'filter_dict': {'conditions': {'gender': 'F', 'birth_date': '1976-01-29'}}}, {'function': 'http://127.0.0.1:5000/products/student_club/Major', 'filter_dict': {'product': 'district'}}, {'function': 'combination', 'filter_dict': {'columns_left': [{'Id': 'Numerical data in integer format representing post IDs.'}, {'PostTypeId': 'Numerical data in integer format representing the Post Type Id, which is the identifier for a specific post type.'}, {'AcceptedAnswerId': 'Numerical data in float format representing a value, and an integer representing the accepted answer ID of a post.'}, {'CreaionDate': 'Creation date of the post in datetime format YYYY-MM-DD HH:MM:SS'}, {'Score': 'Numerical data representing the score of a post, formatted as integers.'}, {'ViewCount': 'Numerical data representing the view count of a post, formatted as a float. Higher values indicate greater popularity.'}, {'Body': 'HTML formatted text containing paragraphs and code snippets for the body of a post.'}, {'OwnerUserId': 'Numerical data in float format representing a value, and an integer representing the Owner User Id.'}, {'LasActivityDate': 'Last Activity Date in datetime format, represented as YYYY-MM-DD HH:MM:SS.'}, {'Title': 'A string format data representing the title of a post.'}, {'Tags': ""Data consists of text entries formatted as <category1><category2><category3>, with tags indicating the post's subject matter.""}, {'AnswerCount': 'Numerical data representing the total number of answers to a post, formatted as an integer.'}, {'CommentCount': 'Numerical data representing the total number of comments on a post, formatted as integers.'}, {'FavoriteCount': 'Numerical data representing the total number of favorites for a post, formatted as a float. Higher values indicate more valuable posts.'}, {'LastEditorUserId': 'Numerical data in float format representing a value, and an integer representing the ID of the last editor.'}, {'LastEditDate': 'Dates in the format YYYY-MM-DD HH:MM:SS representing the last edit date and time.'}, {'CommunityOwnedDate': 'Community Owned Date in datetime format, represented as YYYY-MM-DD HH:MM:SS.'}, {'ParentId': 'This data consists of a numerical value in float format representing the ParentId of a post. It indicates the ID of the parent post, where an integer value is used. If the ParentId is null, it signifies that the post is a root post; otherwise, it is a child post of another post.'}, {'ClosedDate': 'ClosedDate represents the date and time when a post is marked as closed, formatted as YYYY-MM-DD HH:MM:SS. A null or empty value indicates the post is not well-finished, while a non-null value signifies that the post is well-finished.'}, {'OwnerDisplayName': 'A string representing the display name of the post owner.'}, {'LastEditorDisplayName': 'A string representing the display name of the last editor.'}], 'columns_right': [{'Id': 'Numerical data in integer format representing post IDs.'}, {'PostTypeId': 'Numerical data in integer format representing the Post Type Id, which is the identifier for a specific post type.'}, {'AcceptedAnswerId': 'Numerical data in float format representing a value, and an integer representing the accepted answer ID of a post.'}, {'CreaionDate': 'Creation date of the post in datetime format YYYY-MM-DD HH:MM:SS'}, {'Score': 'Numerical data representing the score of a post, formatted as integers.'}, {'ViewCount': 'Numerical data representing the view count of a post, formatted as a float. Higher values indicate greater popularity.'}, {'Body': 'HTML formatted text containing paragraphs and code snippets for the body of a post.'}, {'OwnerUserId': 'Numerical data in float format representing a value, and an integer representing the Owner User Id.'}, {'LasActivityDate': 'Last Activity Date in datetime format, represented as YYYY-MM-DD HH:MM:SS.'}, {'Title': 'A string format data representing the title of a post.'}, {'Tags': ""Data consists of text entries formatted as <category1><category2><category3>, with tags indicating the post's subject matter.""}, {'AnswerCount': 'Numerical data representing the total number of answers to a post, formatted as an integer.'}, {'CommentCount': 'Numerical data representing the total number of comments on a post, formatted as integers.'}, {'FavoriteCount': 'Numerical data representing the total number of favorites for a post, formatted as a float. Higher values indicate more valuable posts.'}, {'LastEditorUserId': 'Numerical data in float format representing a value, and an integer representing the ID of the last editor.'}, {'LastEditDate': 'Dates in the format YYYY-MM-DD HH:MM:SS representing the last edit date and time.'}, {'CommunityOwnedDate': 'Community Owned Date in datetime format, represented as YYYY-MM-DD HH:MM:SS.'}, {'ParentId': 'This data consists of a numerical value in float format representing the ParentId of a post. It indicates the ID of the parent post, where an integer value is used. If the ParentId is null, it signifies that the post is a root post; otherwise, it is a child post of another post.'}, {'ClosedDate': 'ClosedDate represents the date and time when a post is marked as closed, formatted as YYYY-MM-DD HH:MM:SS. A null or empty value indicates the post is not well-finished, while a non-null value signifies that the post is well-finished.'}, {'OwnerDisplayName': 'A string representing the display name of the post owner.'}, {'LastEditorDisplayName': 'A string representing the display name of the last editor.'}], 'type': 'combine', 'values': {'on': 'district_id', 'columns': ['client.district_id', 'district.A2']}}}]}",0,66.08958053588867,0.25,0.1428571428571428,0.25,0,0,1
92,List out the no. of districts that have female average salary is more than 6000 but less than 10000?,simple,financial,"retrieve clients, filter female, retrieve district, filter A11 6000 but less than 10000, count unique","{""plans"":[{""function"":""http://127.0.0.1:5200/retrieve"",""filter_dict"":{""product"":""http://127.0.0.1:5000/products/financial/client""}},{""function"":""http://127.0.0.1:5200/filter"",""filter_dict"":{""conditions"":{""gender"":""F""}}},{""function"":""http://127.0.0.1:5200/retrieve"",""filter_dict"":{""product"":""http://127.0.0.1:5000/products/financial/district""}},{""function"":'combination', 'filter_dict': {""columns_left"": ""district_id"", ""columns_right"": ""district_id"", ""type"": ""equals"", ""values"": [""None""]}},{""function"":""http://127.0.0.1:5200/filter"",""filter_dict"":{""conditions"":{""A11"":{""min"":6000,""max"":10000}}}},{""function"":""http://127.0.0.1:5200/count"",""filter_dict"":{""columns"":""district_id"",""unique"":""True""}}]}",-,-,A11 refers to average salary; Female mapps to gender = 'F',"{'plans': [{'function': 'http://127.0.0.1:5000/products/california_schools/schools', 'filter_dict': {'product': 'District'}}, {'function': 'http://127.0.0.1:5000/products/superhero/gender', 'filter_dict': {'product': 'gender'}}, {'function': 'http://127.0.0.1:5200/filter', 'filter_dict': {'product': 'http://127.0.0.1:5000/products/superhero/gender', 'conditions': {'gender': 'F'}}}, {'function': 'combination', 'filter_dict': {'columns_left': [{'CDSCode': 'Numerical data in integer format representing CDS codes, with additional text fields.'}, {'NCESDist': 'A 7-digit numerical identifier for school districts, formatted as a float, where the first 2 digits represent the state and the last 5 digits represent the school district.'}, {'NCESSchool': 'Numerical data in float format representing the 5-digit NCES school identification number, which, when combined with the NCESDist, forms a unique 12-digit ID for each school.'}, {'StatusType': ""A string field that identifies the operational status of a district, with possible values including 'Active', 'Closed', 'Merged', and 'Pending'.""}, {'County': ""A string format data representing county names, with a structure that includes a header indicating 'County' followed by the actual county names as text.""}, {'District': ""A dataset containing textual information about districts, formatted as a CSV string with headers 'District' and 'text'.""}, {'School': 'A collection of text data related to schools, formatted as strings.'}, {'Street': 'Data type: texts; Format: Street Address, consisting of street names and related text.'}, {'StreetAbr': ""Abbreviated street address of a school, district, or administrative authority's physical location, formatted as text.""}, {'City': 'A collection of text data representing city names, formatted as a comma-separated string.'}, {'Zip': 'A zip code in text format, either 5 digits (XXXXX) or 10 digits with a hyphen (XXXXX-XXXX).'}, {'State': ""Mixed data type containing null values and strings, representing state information with a specific format including headers 'State' and 'text'.""}, {'MailStreet': 'This data consists of texts in the format of a Street Address, representing the unabbreviated mailing address of schools, districts, or administrative authorities. Note that some entities may lack data, and unpopulated fields have been filled with Street data.'}, {'MailStrAbr': 'Abbreviated mailing street address of a school, district, or administrative authority, formatted as a text string.'}, {'MailCity': 'MailCity is a string data type representing the mailing city associated with the address of a school, district, or administrative authority. It may contain empty values where the mailing address city is not provided, which have been filled with corresponding city data.'}, {'MailZip': ""MailZip is a text field representing the zip code associated with the mailing address of a school, district, or administrative authority. The format can be either 'XXXXX-XXXX' or 'XXXXX'. Note that some entries may be unpopulated and have been filled with available Zip data.""}, {'MailState': 'Mixed data type containing null or string values representing the mailing state in an address, with unpopulated cells filled with corresponding state data.'}, {'Phone': 'Phone number in the format (XXX) XXX-XXXX'}, {'Ext': 'A numerical data type representing the phone number extension of a school, district, or administrative authority, formatted as a float.'}, {'Website': 'A URL format representing the website address of a school, district, or administrative authority.'}, {'OpenDate': 'A date representing when the school opened, formatted as YYYY-MM-DD.'}, {'ClosedDate': 'ClosedDate represents the date a school closed, formatted as YYYY-MM-DD.'}, {'Charter': 'This data includes a numerical field that can be a float or NaN, indicating a charter school status coded as an integer: 1 for charter schools and 0 for non-charter schools.'}, {'CharterNum': 'Mixed data containing strings and floats, including a 4-digit charter school number represented as text.'}, {'FundingType': ""FundingType is a text field indicating the charter school funding type, represented as a string. Possible values include 'Not in CS funding model', 'Locally funded', and 'Directly funded'.""}, {'DOC': 'The District Ownership Code (DOC) is a numerical identifier represented as integers, used to categorize the Administrative Authority in the education system, with specific codes assigned to various types of educational institutions.'}, {'DOCType': 'A string representing the text description of the District Ownership Code Type (DOCType), which categorizes ownership types in a district.'}, {'SOC': 'Numerical data representing the School Ownership Code (SOC) as a float, used to identify various types of schools, including preschool, special education, and public schools.'}, {'SOCType': 'A string representing the School Ownership Code Type, which describes the type of school.'}, {'EdOpsCode': 'A string data type representing various education option codes, each corresponding to a specific type of educational institution or program.'}, {'EdOpsName': ""A string data type representing the long text description of an educational option, labeled as 'Educational Option Name'.""}, {'EILCode': 'A string format representing various educational levels or categories, including codes for Adult, Elementary, High School, and others.'}, {'EILName': 'A string representing the Educational Instruction Level Name, which describes the type of educational institution relative to the grade range it serves.'}, {'GSoffered': 'This data represents the grade span offered by a school, district, or administrative authority, formatted as X-Y, X-Adult, P-X, or K-X, where X and Y denote specific grade levels.'}, {'GSserved': ""Text data representing the grade span served in K-12 education, formatted as 'X-Y' or 'K-Z' where X, Y, and Z are integers, indicating the lowest and highest grades of student enrollment based on CALPADS Fall 1 data.""}, {'Virtual': ""Categorical data representing the type of virtual instruction offered by a school, with possible values: ['F', 'N', 'P', null]. 'F' indicates Exclusively Virtual, 'V' indicates Primarily Virtual, 'C' indicates Primarily Classroom, 'N' indicates Not Virtual, and 'P' indicates Partial Virtual (retired).""}, {'Magnet': 'This data indicates whether a school is a magnet school or offers a magnet program, represented as an integer: 1 for magnet and 0 for not magnet. The field may also contain NaN values.'}, {'Latitude': 'Numerical data representing latitude as a float, indicating the angular distance in degrees from the equator, measured north to south.'}, {'Longitude': 'Numerical data representing longitude as floating-point numbers, indicating the angular distance in degrees from the prime meridian (Greenwich, England), measured from west to east.'}, {'AdmFName1': ""A string data type representing the administrator's first name, specifically for superintendents or principals, with additional context regarding the display of administrator information in active and pending districts and schools.""}, {'AdmLName1': 'A string data type representing the last name of an administrator, specifically the superintendent or principal, with additional context regarding the display of administrator information for active and pending districts and schools.'}, {'AdmEmail1': ""This data represents an administrator's email address in the format email@example.com, specifically for superintendents or principals in active and pending districts and schools.""}, {'AdmFName2': ""A string data type representing a text field, specifically indicating that 'AdmFName2' is the same as another field labeled '1'.""}, {'AdmLName2': ""A string data type representing a text field labeled 'AdmLName2'.""}, {'AdmEmail2': 'Email address in the format email@example.com'}, {'AdmFName3': ""A string data type representing a text field labeled 'AdmFName3', which is not useful.""}, {'AdmLName3': ""A string data type representing a text field labeled 'AdmLName3', which is not useful.""}, {'AdmEmail3': ""Data type is text, specifically formatted as an email address (email@example.com). The entry 'AdmEmail3,,,text,not useful' indicates a potential email field with additional non-useful text.""}, {'LastUpdate': 'A date field representing the last update of a record, formatted as YYYY-MM-DD.'}], 'columns_right': [{'id': 'Numerical data in integer format representing unique identifiers for gender.'}, {'gender': ""Categorical data representing the gender of a superhero, with possible values 'Male', 'Female', or null.""}], 'type': 'Combine filtered client data with district data using district_id from both datasets'}}, {'function': 'http://127.0.0.1:5200/filter', 'filter_dict': {'product': 'data_product', 'conditions': {'A11': {'min': 6000, 'max': 10000}}}}, {'function': 'http://127.0.0.1:5200/count', 'filter_dict': {'columns': 'district', 'unique': 'True'}}]}",0,90.44868922233582,0.0,0.0,0.0,0,0,1
149,"Please list the account types that are not eligible for loans, and the average income of residents in the district where the account is located exceeds $8000 but is no more than $9000.",challenging,financial,"retrieve district, filter A11  BETWEEN 8000 AND 9000, retrieve accounts, combine district id, retrieve dips, filter type <> 'OWNER', combine ","{'plans': [{'function': 'http://127.0.0.1:5200/retrieve','filter_dict': {'product': 'http://127.0.0.1:5000/products/financial/district'}},{'function': 'http://127.0.0.1:5200/filter', ""values"": {""conditions"": {""A11"":{""min"":8000,""max"":9000}}}},{'function': 'http://127.0.0.1:5200/retrieve','filter_dict': {'product': 'http://127.0.0.1:5000/products/financial/account'}},{'function':'combination', 'filter_dict':{'columns_left': 'district_id', 'columns_right': 'district_id', 'type': 'equals','values': ['None']}},{'function': 'http://127.0.0.1:5200/retrieve','filter_dict': {'product': 'http://127.0.0.1:5000/products/financial/disp'}},{'function': 'http://127.0.0.1:5200/filter', ""values"": {""conditions"": {""type"":""DISPONENT""}}},{'function':'combination', 'filter_dict':{'columns_left': 'account_id', 'columns_right': 'account_id', 'type': 'equals','values': ['None']}},]}",index,account_id,"A11 represents the average salary; Salary and income share the similar meanings; when the account type = 'OWNER', it's eligible for loans","{'plans': [{'function': 'http://127.0.0.1:5000/products/financial/disp', 'filter_dict': {'product': 'disp'}}, {'function': 'http://127.0.0.1:5200/filter', 'filter_dict': {'product': 'http://127.0.0.1:5000/products/financial/disp', 'conditions': {'type': {'not': 'OWNER'}}}}, {'function': 'http://127.0.0.1:5200/returnResult', 'filter_dict': {}}, {'function': 'http://127.0.0.1:5000/products/financial/district', 'filter_dict': {'product': ['district_id', 'A2', 'A3', 'A4', 'A5', 'A6', 'A7', 'A8', 'A10', 'A11', 'A12', 'A13', 'A14', 'A15', 'A16']}}, {'function': 'http://127.0.0.1:5200/filter', 'filter_dict': {'product': 'http://127.0.0.1:5000/products/financial/district', 'conditions': {'A11': {'min': 8000, 'max': 9000}}}}, {'function': 'http://127.0.0.1:5200/returnResult', 'filter_dict': {}}, {'function': 'combination', 'filter_dict': {'columns_left': [{'disp_id': ""Numerical data in integer format representing a unique identifier for each record, labeled as 'disp_id' or disposition id.""}, {'client_id': 'Numerical data representing client IDs as integers.'}, {'account_id': 'Numerical data representing account IDs as integers.'}, {'type': 'A string containing text data that describes the type of disposition related to ownership and user rights, including commonsense evidence regarding account capabilities.'}], 'columns_right': [{'district_id': 'Numerical data in integer format representing district IDs and branch locations.'}, {'A2': 'A collection of text data in string format, representing district names and associated text entries, structured as comma-separated values.'}, {'A3': ""A string data type representing a region in a text format, with a specific structure including 'A3' and 'region' identifiers.""}, {'A4': 'Numerical data representing the number of inhabitants, formatted as integers.'}, {'A5': 'Numerical data in integer format representing the number of municipalities with inhabitants less than 499, categorized by municipality, district, and region.'}, {'A6': 'Numerical data in integer format representing the number of municipalities with populations between 500 and 1999, categorized by municipality, district, and region.'}, {'A7': 'Numerical data in integer format representing the number of municipalities with populations between 2000 and 9999, categorized by municipality, district, and region.'}, {'A8': 'A8 is a numerical dataset representing the count of municipalities with populations greater than 10,000, categorized by municipality, district, and region, formatted as integers.'}, {'A9': 'Numerical data in integer format, not useful.'}, {'A10': 'A10 is a numerical data point representing the ratio of urban inhabitants, formatted as a float.'}, {'A11': 'Numerical data representing average salary values in integer format.'}, {'A12': 'Numerical data representing the unemployment rate for the year 1995, formatted as a float.'}, {'A13': 'Numerical data representing the unemployment rate for the year 1996, formatted as a float.'}, {'A14': 'A14 represents the number of entrepreneurs per 1000 inhabitants, formatted as integers.'}, {'A15': 'Numerical data representing the number of committed crimes in 1995, formatted as a float.'}, {'A16': 'A16 represents the number of committed crimes in the year 1996, formatted as integers.'}], 'type': 'matching', 'values': {'left_key': 'account_id', 'right_key': 'district_id'}}}, {'function': 'http://127.0.0.1:5200/returnResult', 'filter_dict': {}}]}",0,60.12209367752075,0.0,0.0,0.0,0,0,1
1225,List and group all patients by sex for total bilirubin (T-BIL) level not within the normal range.,moderate,thrombosis_prediction,"retrieve patients, retrieve Laboratory, filter `T-BIL` >= 2.0, group by sex","{'plans': [{'function': 'http://127.0.0.1:5200/retrieve','filter_dict': {'product': 'http://127.0.0.1:5000/products/thrombosis_prediction/Patient'}},{'function': 'http://127.0.0.1:5200/retrieve','filter_dict': {'product': 'http://127.0.0.1:5000/products/thrombosis_prediction/Laboratory'}},{'function': 'http://127.0.0.1:5200/filter', ""values"": {""conditions"": {""T-BIL"":{""min"":2}}}},{'function':'combination', 'filter_dict':{'columns_left': 'ID', 'columns_right': 'ID', 'type': 'equals','values': ['None']}},{""function"":""http://127.0.0.1:5200/sortby"",""filter_dict"":{""ascending"":""True"",""columns"":""SEX""}}]}",index,ID,total bilirubin (T-BIL) not within normal range refers to T-BIL > = 2.0,"{'plans': [{'function': 'http://127.0.0.1:5000/products/thrombosis_prediction/Laboratory', 'filter_dict': {'product': 'Laboratory'}}, {'function': 'http://127.0.0.1:5200/filter', 'filter_dict': {'product': 'http://127.0.0.1:5000/products/thrombosis_prediction/Laboratory', 'conditions': {'T-BIL': {'min': 2.0}}}}, {'function': 'http://127.0.0.1:5000/products/thrombosis_prediction/Patient', 'filter_dict': {'product': 'Patient'}}, {'function': 'http://127.0.0.1:5200/filter', 'filter_dict': {'product': 'http://127.0.0.1:5000/products/thrombosis_prediction/Patient', 'conditions': {'columns': ['ID', 'SEX']}}}, {'function': 'combination', 'filter_dict': {'columns_left': [{'ID': 'Numerical data representing patient identification, formatted as integers.'}, {'Date': 'Dates in the format YYYY-MM-DD representing the date of laboratory tests.'}, {'GOT': 'Numerical data representing the levels of GOT and AST (glutamic oxaloacetic transaminase) in float format or NaN, with a normal range indicating values less than 60.'}, {'GPT': 'Numerical data representing the level of ALT (alanine aminotransferase) in the blood, formatted as a float. The normal range is indicated as less than 60.'}, {'LDH': 'Numerical data representing lactate dehydrogenase (LDH) levels, formatted as a float, with a normal range indicating values less than 500.'}, {'ALP': 'Numerical data representing alkaline phosphatase levels, formatted as a float, with a normal range indicating values less than 300.'}, {'TP': 'Numerical data representing total protein levels in float format, with a normal range of 6.0 to 8.5 grams per deciliter.'}, {'ALB': 'Numerical data representing albumin levels in float format, with a normal range of 3.5 to 5.5 g/dL.'}, {'UA': 'Numerical data representing uric acid levels in float format, with a normal range of > 8.0 for males and > 6.5 for females.'}, {'UN': 'Numerical data representing urea nitrogen levels in float format, with a normal range indicating values less than 30.'}, {'CRE': 'Numerical data representing creatinine levels in float format, with a normal range indicating values less than 1.5.'}, {'T-BIL': 'Numerical data representing total bilirubin levels, formatted as a float or NaN, with a normal range of less than 2.0.'}, {'T-CHO': 'Numerical data representing total cholesterol levels in float format, with a normal range indicating values less than 250.'}, {'TG': 'Numerical data representing triglyceride levels, formatted as a float, with a normal range defined as less than 200.'}, {'CPK': 'Numerical data representing creatinine phosphokinase (CPK) levels, formatted as a float, with a normal range indicating values less than 250.'}, {'GLU': 'Numerical data representing blood glucose levels in float format, with a normal range indicating values less than 180.'}, {'WBC': 'Numerical data representing white blood cell count in float format, with a normal range of 3.5 to 9.0.'}, {'RBC': 'Numerical data representing the count of red blood cells (RBC) in float format, with a normal range of 3.5 to 6.0.'}, {'HGB': 'Numerical data representing Hemoglobin levels in float format, with a normal range of 10 to 17.'}, {'HCT': 'Numerical data representing Hematocrit (HCT) values as floating-point numbers, with a normal range between 29 and 52.'}, {'PLT': 'Numerical data representing platelet count in float format, with a normal range of 100 to 400.'}, {'PT': 'Numerical data representing prothrombin time in seconds, with a normal range indicating values less than 14.'}, {'APTT': 'Numerical data representing the activated partial prothrombin time (APTT) in float format, with a normal range indicating values less than 45.'}, {'FG': 'Numerical data representing fibrinogen levels in float format, with a normal range of 150 to 450.'}, {'PIC': 'Numerical data in float format, possibly representing a series of values or measurements.'}, {'TAT': 'Numerical data representing Turnaround Time (TAT) in float format.'}, {'TAT2': 'Numerical data in float format representing TAT2 values.'}, {'U-PRO': ""Mixed data containing strings, integers, NaN values, special characters, and comparison operators, specifically related to proteinuria with a normal range indicated as '0 < N < 30'.""}, {'IGG': 'Numerical data representing IgG levels in float format, with a normal range of 900 to 2000.'}, {'IGA': 'Numerical data representing Immunoglobulin A (IgA) levels, formatted as a float. The normal range is defined as 80 < N < 500.'}, {'IGM': 'Numerical data representing immunoglobulin M (IgM) levels, formatted as a float, with a normal range of 40 to 400.'}, {'CRP': 'Numerical data representing C-reactive protein (CRP) levels, formatted as float or integer, with a normal range indicated as N < 1.0.'}, {'RA': 'A string value representing categories or statuses related to medical tests, specifically for Rheumatoid Factor, including normal range evidence.'}, {'RF': 'Numerical data representing RF and RAHA values, with a normal range indicated as less than 20.'}, {'C3': ""Numerical data representing a float value related to 'C3' complement levels, with a normal range indicating values greater than 35.""}, {'C4': ""Numerical data representing a float value related to 'C4' with a normal range indicating that values should be greater than 10.""}, {'RNP': 'Mixed data type containing integers, text, and null values, representing RNP and anti-ribonuclear protein information with associated evidence and normal range.'}, {'SM': 'Mixed data type containing integers, null values, and text, formatted as [integer, null, integer, text, integer, integer]. Example entry includes values related to SM and anti-SM with a commonsense evidence text description.'}, {'SC170': ""Mixed data format containing integers, text values, and nulls, with examples including integer values (e.g., 4, 16), text values (e.g., 'negative'), and null represented as 'nan'.""}, {'SSA': 'Mixed data containing text and integers, including SSA and anti-SSA values, with a text description of commonsense evidence and normal range information.'}, {'SSB': 'Mixed data containing two strings, four integers, and a null value, representing various attributes related to anti-SSB testing results and commonsense evidence.'}, {'CENTROMEA': 'Mixed data type containing integers or strings, null values, and text. Example entry includes a label (CENTROMEA), a category (anti-centromere), and a description with commonsense evidence and normal range information.'}, {'DNA': 'Numerical data representing float values related to DNA and anti-DNA measurements, with a normal range indicated as N < 8.'}, {'DNA-II': 'This data represents a measurement of anti-DNA levels in a sample, where the value can be null or missing. The format is not applicable (N/A), and the integer value indicates the level of anti-DNA, with a normal range defined as less than 8.'}], 'columns_right': [{'ID': 'Numerical data representing patient identification, formatted as integers.'}, {'SEX': ""Categorical data representing sex, with values 'F' for female, 'M' for male, or NaN for missing data.""}, {'Birthday': 'A list of birthdays in the date format YYYY-MM-DD.'}, {'Description': ""The first date when a patient's data was recorded, in the format YYYY-MM-DD. If not recorded, the value is null or empty.""}, {'First Date': 'A date representing when a patient first arrived at the hospital, formatted as YYYY-MM-DD.'}, {'Admission': ""Categorical data indicating patient admission status, with possible values: '-', 'nan', '+', '+('.""}, {'Diagnosis': 'Comma-separated values (CSV) format containing diagnosis information, disease names, and associated text, potentially including abbreviations and conditions.'}], 'type': 'merge', 'values': ['ID']}}, {'function': 'http://127.0.0.1:5200/count', 'filter_dict': {'columns': 'SEX', 'value': None, 'unique': False}}]}",0,79.86974334716797,0.0,0.0,0.0,0,0,1
1179,"For the patient who was diagnosed with SLE on 1994/2/19, what was his/her anti-Cardiolipin antibody concentration status on 1993/11/12?",moderate,thrombosis_prediction,"retrieve patients, filter Diagnosis SLE Description 1994-02-19, retrieve Examination filter date 1993/11/12","{""plans"":[{""function"":""http://127.0.0.1:5200/retrieve"",""filter_dict"":{""product"":""http://127.0.0.1:5000/products/thrombosis_prediction/Patient""}},{""function"":""http://127.0.0.1:5200/filter"",""filter_dict"":{""conditions"":{""Diagnosis"":""SLE"",""Description"":""1994-02-19""}}},{""function"":""http://127.0.0.1:5200/retrieve"",""filter_dict"":{""product"":""http://127.0.0.1:5000/products/thrombosis_prediction/Examination""}},{""function"":""http://127.0.0.1:5200/filter"",""filter_dict"":{""conditions"":{""Examination Date"":""1993-11-12""}}},{""function"":'combination', 'filter_dict': {""columns_left"": ""ID"", ""columns_right"": ""ID"", ""type"": ""equals"", ""values"": [""None""]}}]}",-,-,diagnosed with SLE refers to Diagnosis = 'SLE'; 1994/2/19 refers to Description = '1994-02-19'; anti-Cardiolipin refers to aCL IgM; 1993/11/12 refers to Examination Date = '1993/11/12',"{'plans': [{'function': 'http://127.0.0.1:5000/products/thrombosis_prediction/Patient', 'filter_dict': {'product': 'thrombosis_prediction'}}, {'function': 'http://127.0.0.1:5200/filter', 'filter_dict': {'product': 'http://127.0.0.1:5000/products/thrombosis_prediction/Patient', 'conditions': {'Diagnosis': ""contains 'SLE'"", 'First Date': ""is '1994-02-19'""}, 'columns': ['ID']}}, {'function': 'http://127.0.0.1:5000/products/thrombosis_prediction/Examination', 'filter_dict': {'product': 'thrombosis_prediction'}}, {'function': 'http://127.0.0.1:5200/filter', 'filter_dict': {'product': 'http://127.0.0.1:5000/products/thrombosis_prediction/Examination', 'conditions': {'Examination Date': ""is '1993-11-12'""}, 'columns': ['ID', 'aCL IgG', 'aCL IgM', 'aCL IgA']}}, {'function': 'combination', 'filter_dict': {'columns_left': [{'ID': 'Numerical data representing patient identification, formatted as integers.'}, {'SEX': ""Categorical data representing sex, with values 'F' for female, 'M' for male, or NaN for missing data.""}, {'Birthday': 'A list of birthdays in the date format YYYY-MM-DD.'}, {'Description': ""The first date when a patient's data was recorded, in the format YYYY-MM-DD. If not recorded, the value is null or empty.""}, {'First Date': 'A date representing when a patient first arrived at the hospital, formatted as YYYY-MM-DD.'}, {'Admission': ""Categorical data indicating patient admission status, with possible values: '-', 'nan', '+', '+('.""}, {'Diagnosis': 'Comma-separated values (CSV) format containing diagnosis information, disease names, and associated text, potentially including abbreviations and conditions.'}], 'columns_right': [{'ID': ""Numerical data representing a patient's identification as an integer and a numerical value as a float.""}, {'Examination Date': 'Examination Date in the format YYYY-MM-DD'}, {'aCL IgG': 'Numerical data representing the concentration of aCL IgG (anti-Cardiolipin antibody) in float format.'}, {'aCL IgM': 'Numerical data representing the concentration of anti-Cardiolipin antibody (IgM) in float format.'}, {'ANA': 'Numerical data representing the concentration of anti-nucleus antibodies, formatted as floating point numbers.'}, {'ANA Pattern': ""Comma-separated values (CSV) format containing text data for ANA patterns observed in ANA examination, with possible 'nan' for missing data.""}, {'aCL IgA': 'Numerical data representing the concentration of anti-Cardiolipin antibody (IgA) in integer format.'}, {'Diagnosis': 'A collection of text data representing diagnoses and disease names, formatted as strings.'}, {'KCT': ""Categorical data representing the measure of degree of coagulation with possible values: '-', nan, and '+'. The text indicates that '+' signifies positive and '-' signifies negative.""}, {'RVVT': ""Categorical data representing the results of a RVVT test for coagulation, with possible values of '-', '+', or NaN indicating negative, positive, or missing results respectively.""}, {'LAC': ""Categorical data representing the measure of degree of coagulation with values indicating positive ('+') or negative ('-') results, including NaN for missing values.""}, {'Symptoms': 'A collection of text strings describing symptoms and other observed symptoms.'}, {'Thrombosis': 'Numerical data representing the degree of thrombosis as integers, where 0 indicates no thrombosis, 1 indicates the most severe thrombosis, 2 indicates severe thrombosis, and 3 indicates mild thrombosis.'}], 'type': 'combine', 'method': 'inner join', 'on': 'ID'}}, {'function': 'returnResult', 'filter_dict': {'columns': ['ID', 'aCL IgG', 'aCL IgM', 'aCL IgA']}}]}",0,50.53588628768921,0.0,0.0,0.0,0,0,1
1155,"List the patient ID, sex and birthday of patient with LDH beyond normal range.",simple,thrombosis_prediction,"retrieve patients, retrieve labratory filterLDH > '500'","{""plans"":[{""function"":""http://127.0.0.1:5200/retrieve"",""filter_dict"":{""product"":""http://127.0.0.1:5000/products/thrombosis_prediction/Patient""}},{""function"":""http://127.0.0.1:5200/retrieve"",""filter_dict"":{""product"":""http://127.0.0.1:5000/products/thrombosis_prediction/Laboratory""}},{""function"":""http://127.0.0.1:5200/filter"",""filter_dict"":{""conditions"":{""LDH"":{""min"":500}}}},{""function"":'combination', 'filter_dict': {""columns_left"": ""ID"", ""columns_right"": ""ID"", ""type"": ""equals"", ""values"": [""None""]}}]}",index,ID,LDH beyond normal range refers to LDH > '500',"{'plans': [{'function': 'http://127.0.0.1:5000/products/thrombosis_prediction/Laboratory', 'filter_dict': {'product': 'Laboratory'}}, {'function': 'http://127.0.0.1:5200/filter', 'filter_dict': {'product': 'http://127.0.0.1:5000/products/thrombosis_prediction/Laboratory', 'conditions': {'LDH': '> 500'}}}, {'function': 'http://127.0.0.1:5000/products/thrombosis_prediction/Patient', 'filter_dict': {'product': 'thrombosis_prediction'}}, {'function': 'http://127.0.0.1:5200/filter', 'filter_dict': {'product': 'http://127.0.0.1:5000/products/thrombosis_prediction/Patient', 'conditions': {}}}, {'function': 'combination', 'filter_dict': {'columns_left': [{'ID': 'Numerical data representing patient identification, formatted as integers.'}, {'Date': 'Dates in the format YYYY-MM-DD representing the date of laboratory tests.'}, {'GOT': 'Numerical data representing the levels of GOT and AST (glutamic oxaloacetic transaminase) in float format or NaN, with a normal range indicating values less than 60.'}, {'GPT': 'Numerical data representing the level of ALT (alanine aminotransferase) in the blood, formatted as a float. The normal range is indicated as less than 60.'}, {'LDH': 'Numerical data representing lactate dehydrogenase (LDH) levels, formatted as a float, with a normal range indicating values less than 500.'}, {'ALP': 'Numerical data representing alkaline phosphatase levels, formatted as a float, with a normal range indicating values less than 300.'}, {'TP': 'Numerical data representing total protein levels in float format, with a normal range of 6.0 to 8.5 grams per deciliter.'}, {'ALB': 'Numerical data representing albumin levels in float format, with a normal range of 3.5 to 5.5 g/dL.'}, {'UA': 'Numerical data representing uric acid levels in float format, with a normal range of > 8.0 for males and > 6.5 for females.'}, {'UN': 'Numerical data representing urea nitrogen levels in float format, with a normal range indicating values less than 30.'}, {'CRE': 'Numerical data representing creatinine levels in float format, with a normal range indicating values less than 1.5.'}, {'T-BIL': 'Numerical data representing total bilirubin levels, formatted as a float or NaN, with a normal range of less than 2.0.'}, {'T-CHO': 'Numerical data representing total cholesterol levels in float format, with a normal range indicating values less than 250.'}, {'TG': 'Numerical data representing triglyceride levels, formatted as a float, with a normal range defined as less than 200.'}, {'CPK': 'Numerical data representing creatinine phosphokinase (CPK) levels, formatted as a float, with a normal range indicating values less than 250.'}, {'GLU': 'Numerical data representing blood glucose levels in float format, with a normal range indicating values less than 180.'}, {'WBC': 'Numerical data representing white blood cell count in float format, with a normal range of 3.5 to 9.0.'}, {'RBC': 'Numerical data representing the count of red blood cells (RBC) in float format, with a normal range of 3.5 to 6.0.'}, {'HGB': 'Numerical data representing Hemoglobin levels in float format, with a normal range of 10 to 17.'}, {'HCT': 'Numerical data representing Hematocrit (HCT) values as floating-point numbers, with a normal range between 29 and 52.'}, {'PLT': 'Numerical data representing platelet count in float format, with a normal range of 100 to 400.'}, {'PT': 'Numerical data representing prothrombin time in seconds, with a normal range indicating values less than 14.'}, {'APTT': 'Numerical data representing the activated partial prothrombin time (APTT) in float format, with a normal range indicating values less than 45.'}, {'FG': 'Numerical data representing fibrinogen levels in float format, with a normal range of 150 to 450.'}, {'PIC': 'Numerical data in float format, possibly representing a series of values or measurements.'}, {'TAT': 'Numerical data representing Turnaround Time (TAT) in float format.'}, {'TAT2': 'Numerical data in float format representing TAT2 values.'}, {'U-PRO': ""Mixed data containing strings, integers, NaN values, special characters, and comparison operators, specifically related to proteinuria with a normal range indicated as '0 < N < 30'.""}, {'IGG': 'Numerical data representing IgG levels in float format, with a normal range of 900 to 2000.'}, {'IGA': 'Numerical data representing Immunoglobulin A (IgA) levels, formatted as a float. The normal range is defined as 80 < N < 500.'}, {'IGM': 'Numerical data representing immunoglobulin M (IgM) levels, formatted as a float, with a normal range of 40 to 400.'}, {'CRP': 'Numerical data representing C-reactive protein (CRP) levels, formatted as float or integer, with a normal range indicated as N < 1.0.'}, {'RA': 'A string value representing categories or statuses related to medical tests, specifically for Rheumatoid Factor, including normal range evidence.'}, {'RF': 'Numerical data representing RF and RAHA values, with a normal range indicated as less than 20.'}, {'C3': ""Numerical data representing a float value related to 'C3' complement levels, with a normal range indicating values greater than 35.""}, {'C4': ""Numerical data representing a float value related to 'C4' with a normal range indicating that values should be greater than 10.""}, {'RNP': 'Mixed data type containing integers, text, and null values, representing RNP and anti-ribonuclear protein information with associated evidence and normal range.'}, {'SM': 'Mixed data type containing integers, null values, and text, formatted as [integer, null, integer, text, integer, integer]. Example entry includes values related to SM and anti-SM with a commonsense evidence text description.'}, {'SC170': ""Mixed data format containing integers, text values, and nulls, with examples including integer values (e.g., 4, 16), text values (e.g., 'negative'), and null represented as 'nan'.""}, {'SSA': 'Mixed data containing text and integers, including SSA and anti-SSA values, with a text description of commonsense evidence and normal range information.'}, {'SSB': 'Mixed data containing two strings, four integers, and a null value, representing various attributes related to anti-SSB testing results and commonsense evidence.'}, {'CENTROMEA': 'Mixed data type containing integers or strings, null values, and text. Example entry includes a label (CENTROMEA), a category (anti-centromere), and a description with commonsense evidence and normal range information.'}, {'DNA': 'Numerical data representing float values related to DNA and anti-DNA measurements, with a normal range indicated as N < 8.'}, {'DNA-II': 'This data represents a measurement of anti-DNA levels in a sample, where the value can be null or missing. The format is not applicable (N/A), and the integer value indicates the level of anti-DNA, with a normal range defined as less than 8.'}], 'columns_right': [{'ID': 'Numerical data representing patient identification, formatted as integers.'}, {'SEX': ""Categorical data representing sex, with values 'F' for female, 'M' for male, or NaN for missing data.""}, {'Birthday': 'A list of birthdays in the date format YYYY-MM-DD.'}, {'Description': ""The first date when a patient's data was recorded, in the format YYYY-MM-DD. If not recorded, the value is null or empty.""}, {'First Date': 'A date representing when a patient first arrived at the hospital, formatted as YYYY-MM-DD.'}, {'Admission': ""Categorical data indicating patient admission status, with possible values: '-', 'nan', '+', '+('.""}, {'Diagnosis': 'Comma-separated values (CSV) format containing diagnosis information, disease names, and associated text, potentially including abbreviations and conditions.'}], 'type': 'combine'}}, {'function': 'returnResult', 'filter_dict': {'columns': ['ID', 'SEX', 'Birthday']}}]}",0,75.8344259262085,0.0,0.0,0.0,0,0,1
1251,How many patients with an Ig G higher than normal?,simple,thrombosis_prediction,"retrieve patients, retrieve ´labratory, filter IGG >= 2000, combine count distinct","{""plans"":[{""function"":""http://127.0.0.1:5200/retrieve"",""filter_dict"":{""product"":""http://127.0.0.1:5000/products/thrombosis_prediction/Patient""}},{""function"":""http://127.0.0.1:5200/retrieve"",""filter_dict"":{""product"":""http://127.0.0.1:5000/products/thrombosis_prediction/Laboratory""}},{""function"":""http://127.0.0.1:5200/filter"",""filter_dict"":{""conditions"":{""IGG"":{""min"":2000}}}},{""function"":'combination', 'filter_dict': {""columns_left"": ""ID"", ""columns_right"": ""ID"", ""type"": ""equals"", ""values"": [""None""]}},{""function"":""http://127.0.0.1:5200/count"",""filter_dict"":{""columns"":""ID"",""unique"":""True""}}]}",-,-,Ig G higher than normal refers to IGG >= 2000; Should consider DISTINCT in the final result;,"{'plans': [{'function': 'http://127.0.0.1:5000/products/thrombosis_prediction/Laboratory', 'filter_dict': {'product': 'Laboratory'}}, {'function': 'http://127.0.0.1:5200/filter', 'filter_dict': {'product': 'http://127.0.0.1:5000/products/thrombosis_prediction/Laboratory', 'conditions': {'IGG': {'min': 2000}}}}, {'function': 'http://127.0.0.1:5200/count', 'filter_dict': {'columns': 'ID', 'unique': 'True'}}]}",0,21.79204106330872,0.2,0.1428571428571428,0.3333333333333333,0,0,1
1247,"Among the male patients who have a normal level of white blood cells, how many of them have an abnormal fibrinogen level?",challenging,thrombosis_prediction,"retrieve patients, filter sex M, retrieve Labratory filter WBC > 3.5 and WBC <9.0, fibrinogen level refers to FG < = 150 or FG > = 450, combine, count distinct","{'plans': [{'function': 'http://127.0.0.1:5200/retrieve','filter_dict': {'product': 'http://127.0.0.1:5000/products/thrombosis_prediction/Patient'}},{'function': 'http://127.0.0.1:5200/filter', ""values"": {""conditions"": {""SEX"":""M""}}},{'function': 'http://127.0.0.1:5200/retrieve','filter_dict': {'product': 'http://127.0.0.1:5000/products/thrombosis_prediction/Laboratory'}},{'function': 'http://127.0.0.1:5200/filter', ""values"": {""conditions"": {""WBC"":{""min"":3.5,""max"":9.0},""FG"":[{""max"":150},{""min"":450}]}}},{'function':'combination', 'filter_dict':{'columns_left': 'ID', 'columns_right': 'ID', 'type': 'equals','values': ['None']}},{""function"":""http://127.0.0.1:5200/count"",""filter_dict"":{""columns"":""ID"",""unique"":""True""}}]}",-,-, male patients refers to Sex = 'M'; normal level of white blood cells refers to WBC > 3.5 and WBC <9.0; abnormal fibrinogen level refers to FG < = 150 or FG > = 450; Don't compute repetitive ones.,"{'plans': [{'function': 'http://127.0.0.1:5000/products/thrombosis_prediction/Laboratory', 'filter_dict': {'product': 'Laboratory'}}, {'function': 'http://127.0.0.1:5200/filter', 'filter_dict': {'product': 'http://127.0.0.1:5000/products/thrombosis_prediction/Laboratory', 'conditions': {'WBC': {'min': 3.5, 'max': 9.0}}}}, {'function': 'http://127.0.0.1:5200/filter', 'filter_dict': {'product': 'http://127.0.0.1:5000/products/thrombosis_prediction/Laboratory', 'conditions': {'FG': {'min': None, 'max': 150}, 'FG_2': {'min': 450, 'max': None}}}}, {'function': 'combination', 'filter_dict': {'columns_left': [{'ID': 'Numerical data representing patient identification, formatted as integers.'}, {'Date': 'Dates in the format YYYY-MM-DD representing the date of laboratory tests.'}, {'GOT': 'Numerical data representing the levels of GOT and AST (glutamic oxaloacetic transaminase) in float format or NaN, with a normal range indicating values less than 60.'}, {'GPT': 'Numerical data representing the level of ALT (alanine aminotransferase) in the blood, formatted as a float. The normal range is indicated as less than 60.'}, {'LDH': 'Numerical data representing lactate dehydrogenase (LDH) levels, formatted as a float, with a normal range indicating values less than 500.'}, {'ALP': 'Numerical data representing alkaline phosphatase levels, formatted as a float, with a normal range indicating values less than 300.'}, {'TP': 'Numerical data representing total protein levels in float format, with a normal range of 6.0 to 8.5 grams per deciliter.'}, {'ALB': 'Numerical data representing albumin levels in float format, with a normal range of 3.5 to 5.5 g/dL.'}, {'UA': 'Numerical data representing uric acid levels in float format, with a normal range of > 8.0 for males and > 6.5 for females.'}, {'UN': 'Numerical data representing urea nitrogen levels in float format, with a normal range indicating values less than 30.'}, {'CRE': 'Numerical data representing creatinine levels in float format, with a normal range indicating values less than 1.5.'}, {'T-BIL': 'Numerical data representing total bilirubin levels, formatted as a float or NaN, with a normal range of less than 2.0.'}, {'T-CHO': 'Numerical data representing total cholesterol levels in float format, with a normal range indicating values less than 250.'}, {'TG': 'Numerical data representing triglyceride levels, formatted as a float, with a normal range defined as less than 200.'}, {'CPK': 'Numerical data representing creatinine phosphokinase (CPK) levels, formatted as a float, with a normal range indicating values less than 250.'}, {'GLU': 'Numerical data representing blood glucose levels in float format, with a normal range indicating values less than 180.'}, {'WBC': 'Numerical data representing white blood cell count in float format, with a normal range of 3.5 to 9.0.'}, {'RBC': 'Numerical data representing the count of red blood cells (RBC) in float format, with a normal range of 3.5 to 6.0.'}, {'HGB': 'Numerical data representing Hemoglobin levels in float format, with a normal range of 10 to 17.'}, {'HCT': 'Numerical data representing Hematocrit (HCT) values as floating-point numbers, with a normal range between 29 and 52.'}, {'PLT': 'Numerical data representing platelet count in float format, with a normal range of 100 to 400.'}, {'PT': 'Numerical data representing prothrombin time in seconds, with a normal range indicating values less than 14.'}, {'APTT': 'Numerical data representing the activated partial prothrombin time (APTT) in float format, with a normal range indicating values less than 45.'}, {'FG': 'Numerical data representing fibrinogen levels in float format, with a normal range of 150 to 450.'}, {'PIC': 'Numerical data in float format, possibly representing a series of values or measurements.'}, {'TAT': 'Numerical data representing Turnaround Time (TAT) in float format.'}, {'TAT2': 'Numerical data in float format representing TAT2 values.'}, {'U-PRO': ""Mixed data containing strings, integers, NaN values, special characters, and comparison operators, specifically related to proteinuria with a normal range indicated as '0 < N < 30'.""}, {'IGG': 'Numerical data representing IgG levels in float format, with a normal range of 900 to 2000.'}, {'IGA': 'Numerical data representing Immunoglobulin A (IgA) levels, formatted as a float. The normal range is defined as 80 < N < 500.'}, {'IGM': 'Numerical data representing immunoglobulin M (IgM) levels, formatted as a float, with a normal range of 40 to 400.'}, {'CRP': 'Numerical data representing C-reactive protein (CRP) levels, formatted as float or integer, with a normal range indicated as N < 1.0.'}, {'RA': 'A string value representing categories or statuses related to medical tests, specifically for Rheumatoid Factor, including normal range evidence.'}, {'RF': 'Numerical data representing RF and RAHA values, with a normal range indicated as less than 20.'}, {'C3': ""Numerical data representing a float value related to 'C3' complement levels, with a normal range indicating values greater than 35.""}, {'C4': ""Numerical data representing a float value related to 'C4' with a normal range indicating that values should be greater than 10.""}, {'RNP': 'Mixed data type containing integers, text, and null values, representing RNP and anti-ribonuclear protein information with associated evidence and normal range.'}, {'SM': 'Mixed data type containing integers, null values, and text, formatted as [integer, null, integer, text, integer, integer]. Example entry includes values related to SM and anti-SM with a commonsense evidence text description.'}, {'SC170': ""Mixed data format containing integers, text values, and nulls, with examples including integer values (e.g., 4, 16), text values (e.g., 'negative'), and null represented as 'nan'.""}, {'SSA': 'Mixed data containing text and integers, including SSA and anti-SSA values, with a text description of commonsense evidence and normal range information.'}, {'SSB': 'Mixed data containing two strings, four integers, and a null value, representing various attributes related to anti-SSB testing results and commonsense evidence.'}, {'CENTROMEA': 'Mixed data type containing integers or strings, null values, and text. Example entry includes a label (CENTROMEA), a category (anti-centromere), and a description with commonsense evidence and normal range information.'}, {'DNA': 'Numerical data representing float values related to DNA and anti-DNA measurements, with a normal range indicated as N < 8.'}, {'DNA-II': 'This data represents a measurement of anti-DNA levels in a sample, where the value can be null or missing. The format is not applicable (N/A), and the integer value indicates the level of anti-DNA, with a normal range defined as less than 8.'}], 'columns_right': [{'ID': 'Numerical data representing patient identification, formatted as integers.'}, {'SEX': ""Categorical data representing sex, with values 'F' for female, 'M' for male, or NaN for missing data.""}, {'Birthday': 'A list of birthdays in the date format YYYY-MM-DD.'}, {'Description': ""The first date when a patient's data was recorded, in the format YYYY-MM-DD. If not recorded, the value is null or empty.""}, {'First Date': 'A date representing when a patient first arrived at the hospital, formatted as YYYY-MM-DD.'}, {'Admission': ""Categorical data indicating patient admission status, with possible values: '-', 'nan', '+', '+('.""}, {'Diagnosis': 'Comma-separated values (CSV) format containing diagnosis information, disease names, and associated text, potentially including abbreviations and conditions.'}], 'type': 'combine'}}, {'function': 'http://127.0.0.1:5200/count', 'filter_dict': None}, {'function': 'http://127.0.0.1:5200/returnResult', 'filter_dict': None}]}",0,173.81907844543457,0.0,0.0,0.0,0,0,1
327,Which non-carcinogenic molecules consisted more than 5 atoms?,moderate,toxicology,"retrieve molecule, filter label -, retrieve atoms, combine, count grouptby molecuole, filter count > 5","{""plans"":[{""function"":""http://127.0.0.1:5200/retrieve"",""filter_dict"":{""product"":""http://127.0.0.1:5000/products/toxicology/molecule""}},{""function"":""http://127.0.0.1:5200/filter"",""filter_dict"":{""conditions"":{""label"":""-""}}},{""function"":""http://127.0.0.1:5200/retrieve"",""filter_dict"":{""product"":""http://127.0.0.1:5000/products/toxicology/atom""}},{""function"":'combination', 'filter_dict': {""columns_left"": ""molecule_id"", ""columns_right"": ""molecule_id"", ""type"": ""equals"", ""values"": [""None""]}},{""function"":""http://127.0.0.1:5200/count"",""filter_dict"":{""columns"":""atom_id"",""unique"":""False"",""group_by"":[""molecule_id""]}},{""function"":""http://127.0.0.1:5200/filter"",""filter_dict"":{""conditions"":{""count"":{""min"":5}}}}]}",index,molecule_id,label = '-' means molecules are non-carcinogenic; molecules consisted more than 5 atoms refers to COUNT(molecule_id) > 5,"{'plans': [{'function': 'http://127.0.0.1:5000/products/toxicology/molecule', 'filter_dict': {'product': 'toxicology/molecule'}}, {'function': 'http://127.0.0.1:5200/filter', 'filter_dict': {'product': 'http://127.0.0.1:5000/products/toxicology/molecule', 'conditions': {'label': '-'}}}, {'function': 'http://127.0.0.1:5200/count', 'filter_dict': {'product': {'columns': 'molecule_id', 'value': None, 'unique': False}}}, {'function': 'http://127.0.0.1:5200/filter', 'filter_dict': {'conditions': {'COUNT(molecule_id)': {'min': 5}}}}]}",0,27.479271173477173,0.0,0.0,0.0,0,0,1
248,"What are the atoms of the triple bond with the molecule ""TR041""?",simple,toxicology,"retrieve colucule, filter `molecule_id` = 'TR041', retrieve atom combine molecule id, retrieve bonds filter bond type '#'","{'plans': [{'function': 'http://127.0.0.1:5200/retrieve','filter_dict': {'product': 'http://127.0.0.1:5000/products/toxicology/molecule'}},{'function': 'http://127.0.0.1:5200/filter', ""values"": {""conditions"": {""molecule_id"":""TR041""}}},{'function': 'http://127.0.0.1:5200/retrieve','filter_dict': {'product': 'http://127.0.0.1:5000/products/toxicology/atom'}},{'function':'combination', 'filter_dict':{'columns_left': 'molecule_id', 'columns_right': 'molecule_id', 'type': 'equals','values': ['None']}},{'function': 'http://127.0.0.1:5200/retrieve','filter_dict': {'product': 'http://127.0.0.1:5000/products/toxicology/bond'}},{'function': 'http://127.0.0.1:5200/filter', ""values"": {""conditions"": {""bond_type"":""#""}}},{'function':'combination', 'filter_dict':{'columns_left': 'molecule_id', 'columns_right': 'molecule_id', 'type': 'equals','values': ['None']}}]}",-,-,"""TR041 is the molecule id; triple bond refers to bond_type = '#';""","{'plans': [{'function': 'http://127.0.0.1:5000/products/toxicology/bond', 'filter_dict': {'product': 'toxicology/bond'}}, {'function': 'http://127.0.0.1:5200/filter', 'filter_dict': {'product': 'http://127.0.0.1:5000/products/toxicology/bond', 'conditions': {'molecule_id': 'TR041', 'bond_type': '#'}}}, {'function': 'http://127.0.0.1:5200/process', 'filter_dict': {'product': 'http://127.0.0.1:5200/filter', 'operation': 'extract_atoms', 'parameters': {'bond_id_column': 'bond_id', 'split_pattern': '_'}}}, {'function': 'http://127.0.0.1:5200/returnResult', 'filter_dict': {'product': 'http://127.0.0.1:5200/process', 'result_type': 'atoms_involved'}}]}",0,23.45258951187133,0.0,0.0,0.0,0,0,1
243,What are the bonds that have phosphorus and nitrogen as their atom elements?,moderate,toxicology,"retrieve atoms, filter p und n, retriev connected combine, retrieve bonds comnine","{""plans"":[{""function"":""http://127.0.0.1:5200/retrieve"",""filter_dict"":{""product"":""http://127.0.0.1:5000/products/toxicology/atom""}},{""function"":""http://127.0.0.1:5200/filter"",""filter_dict"":{""conditions"":{""element"":[""p"",""n""]}}},{""function"":""http://127.0.0.1:5200/retrieve"",""filter_dict"":{""product"":""http://127.0.0.1:5000/products/toxicology/connected""}},{""function"":'combination', 'filter_dict': {""columns_left"": ""atom_id"", ""columns_right"": ""atom_id"", ""type"": ""equals"", ""values"": [""None""]}},{""function"":""http://127.0.0.1:5200/retrieve"",""filter_dict"":{""product"":""http://127.0.0.1:5000/products/toxicology/bond""}},{""function"":'combination', 'filter_dict': {""columns_left"": ""bond_id"", ""columns_right"": ""bond_id"", ""type"": ""equals"", ""values"": [""None""]}}]}",index,bond_id,have phosphorus as atom elements refers to element = 'p'; have nitrogen as atom elements refers to element = 'n',"{'plans': [{'function': 'http://127.0.0.1:5000/products/toxicology/bond', 'filter_dict': {'product': 'toxicology/bond'}}, {'function': 'http://127.0.0.1:5200/filter', 'filter_dict': {'conditions': {'bond_id': {'contains': ['P', 'N']}}}}]}",0,15.249395370483398,0.0,0.0,0.0,0,0,1
249,What are the elements of the atoms of TR144_8_19?,challenging,toxicology,"retrieve connected, filter bond_id = TR144_8_19, retrieve atom combine","{'plans': [{'function': 'http://127.0.0.1:5200/retrieve','filter_dict': {'product': 'http://127.0.0.1:5000/products/toxicology/connected'}},{'function': 'http://127.0.0.1:5200/filter', ""values"": {""conditions"": {""bond_id"":""TR144_8_19""}}},{'function': 'http://127.0.0.1:5200/retrieve','filter_dict': {'product': 'http://127.0.0.1:5000/products/toxicology/atom'}},{'function':'combination', 'filter_dict':{'columns_left': 'atom_id', 'columns_right': 'atom_id', 'type': 'equals','values': ['None']}}]}",-,-,TR144_8_19 is the bond id; ,"{'plans': [{'function': 'http://127.0.0.1:5000/products/codebase_community/posts', 'filter_dict': {'product': 'codebase_community'}}, {'function': 'http://127.0.0.1:5200/filter', 'filter_dict': {'product': 'http://127.0.0.1:5000/products/codebase_community/posts', 'conditions': {'atom_id': 'TR144_8_19'}}}, {'function': 'http://127.0.0.1:5200/filter', 'filter_dict': {'product': 'data product'}}]}",0,19.343613862991333,0.0,0.0,0.0,0,0,1
195,What is the most common bond type?,simple,toxicology,"retrieve bond, count bond group by bond type, max count","{""plans"":[{""function"":""http://127.0.0.1:5200/retrieve"",""filter_dict"":{""product"":""http://127.0.0.1:5000/products/toxicology/bond""}},{""function"":""http://127.0.0.1:5200/count"",""filter_dict"":{""columns"":""bond_id"",""unique"":""False"",""group_by"":[""bond_type""]}},{""function"":""http://127.0.0.1:5200/max"",""filter_dict"":{""columns"":""count"",""rows"":1}}]}",-,-,most common bond type refers MAX(COUNT(bond_type)),"{'plans': [{'function': 'http://127.0.0.1:5000/products/codebase_community/posts', 'filter_dict': {'product': 'codebase_community'}}, {'function': 'http://127.0.0.1:5200/count', 'filter_dict': {'product': 'http://127.0.0.1:5000/products/codebase_community/posts', 'columns': 'bond_type', 'value': None, 'unique': False}}, {'function': 'http://127.0.0.1:5200/count', 'filter_dict': {'columns': 'bond_type', 'unique': 'False'}}]}",0,22.8146071434021,0.0,0.0,0.0,0,0,1
