Unnamed: 0,question_id,query,difficulty,function,collection,step,response,retrieved_docs,mmr,hit_rate,precision,recall,f1,correctness_LLM,simple_match,exact_match
0,967,State code numbers of top 3 yougest drivers. How many Netherlandic drivers among them?,simple,retrieve,formula_1,retrieve drivers dataset,retrieve,"[""function name:retrieve\ndescription: retrieves the specified data product, takes the data products name and a list of requested columns as arguments\nfilter_dict: [{'product': 'product url'}]\n"", ""function name:getValues\nbase_api: http://127.0.0.1:5200/getValues\ndescription: Retrieves specififed data values in a list format\nfilter_dict: [{'columns': 'a column on wihich to match'}, {'values': 'a dict with a value to match if None returns the all columns from columns'}]\nexample: filter_dict:{'values':'None','column':'customer_id'}\n"", ""function name:diffrence\nbase_api: http://127.0.0.1:5200/diffrence\ndescription: Calcuates diffrence between multiple data sources\nfilter_dict: [{'source_A': 'The data source from which source_B is subtracted'}, {'source_B': 'The data source which is subtracted from source_A'}]\n"", ""function name:returnResult\ndescription: retrieves or extracts  the previously computed data, specified  by the columns in a dataframe\nfilter_dict: [{'columns': 'which columns to retrun/extract'}]\n""]",1.0,1,0.25,1,0.4,1,1.0,1
2,967,State code numbers of top 3 yougest drivers. How many Netherlandic drivers among them?,simple,sortby,formula_1,sort drivers by birth date to identify the top 3 youngest drivers,sortby,"['function name:sortby\nbase_api: http://127.0.0.1:5200/sortby\ndescription: sorts the data based on a the provided columns and either ascending or descending\nfilter_dict: [{\'columns\': \'a column on which the sorting is based on\'}, {\'ascending\': ""\'True\' if the data is sorted ascending, \'False\' for descending""}]\n', ""function name:division\nbase_api: http://127.0.0.1:5200/division\ndescription: Calcuates division of multiple data sources\nfilter_dict: [{'source_A': 'The data source which is divided by source_B'}, {'source_B': 'The data source which divides source_A'}]\n"", ""function name:multiplication\nbase_api: http://127.0.0.1:5200/multiplication\ndescription: Calcuates multiplication of multiple data sources\nfilter_dict: [{'source_A': 'The data source which is multiplied with source_B'}, {'source_B': 'The data source which is multiplied with source_A'}]\n"", ""function name:min\nbase_api: http://127.0.0.1:5200/min\ndescription: Retrieves the maximum value for a list of specified columns in a dataframe\nreturn_type: single value\nfilter_dict: [{'columns': 'a list of columns for which the minimum should be retrieved'}, {'rows': 'number of rows to be returned'}]\n""]",1.0,1,0.25,1,0.4,1,1.0,1
3,967,State code numbers of top 3 yougest drivers. How many Netherlandic drivers among them?,simple,retrieve,formula_1,retrieve driver IDs of the top 3 youngest drivers from driverStandings dataset,sortby,"[""function name:min\nbase_api: http://127.0.0.1:5200/min\ndescription: Retrieves the maximum value for a list of specified columns in a dataframe\nreturn_type: single value\nfilter_dict: [{'columns': 'a list of columns for which the minimum should be retrieved'}, {'rows': 'number of rows to be returned'}]\n"", ""function name:max\nbase_api: http://127.0.0.1:5200/max\ndescription: Retrieves the maximum value for a list of specified columns in a dataframe\nreturn_type: single value\nfilter_dict: [{'columns': 'a list of columns for which the maximum should be retrieved'}, {'rows': 'number of rows to be returned'}]\n"", ""function name:getValues\nbase_api: http://127.0.0.1:5200/getValues\ndescription: Retrieves specififed data values in a list format\nfilter_dict: [{'columns': 'a column on wihich to match'}, {'values': 'a dict with a value to match if None returns the all columns from columns'}]\nexample: filter_dict:{'values':'None','column':'customer_id'}\n"", 'function name:sortby\nbase_api: http://127.0.0.1:5200/sortby\ndescription: sorts the data based on a the provided columns and either ascending or descending\nfilter_dict: [{\'columns\': \'a column on which the sorting is based on\'}, {\'ascending\': ""\'True\' if the data is sorted ascending, \'False\' for descending""}]\n']",0.0,0,0.0,0,0.0,0,0.0,0
4,967,State code numbers of top 3 yougest drivers. How many Netherlandic drivers among them?,simple,combine,formula_1,combine top 3 youngest drivers from drivers dataset with their corresponding driver IDs from driverStandings dataset,combine,"[""function name:combine\ndescription: combines to data products via a join\nfilter_dict: [{'columns_left': 'which columns of the first data product to match on'}, {'columns_right': 'which columns of the second data product to match on'}, {'type': 'equal or unequal'}]\n"", ""function name:sum\nbase_api: http://127.0.0.1:5200/sum\ndescription: Calcuates the sum of a dataframe based on a list of group_by columns and\nfilter_dict: [{'group_by': 'a list of coulmns in the dataframe, can be None'}, {'columns': 'a list of columns for hicht the sum should be calculated, cant be None'}]\n"", ""function name:sum_multiple\nbase_api: http://127.0.0.1:5200/sum_multiple\ndescription: Calcuates summation of multiple data sources\nfilter_dict: [{'source_A': 'The data source which is added to source_B'}, {'source_B': 'The data source which is added to source_A'}]\n"", ""function name:mean\nbase_api: http://127.0.0.1:5200/sum\ndescription: Calcuates the mean of a dataframe based on a list of group_by columns and\nfilter_dict: [{'group_by': 'a list of coulmns in the dataframe, can be None'}, {'columns': 'a list of columns for hicht the mean should be calculated, cant be None'}]\n""]",1.0,1,0.25,1,0.4,1,1.0,1
5,967,State code numbers of top 3 yougest drivers. How many Netherlandic drivers among them?,simple,count,formula_1,count how many of the top 3 youngest drivers are from the Netherlands using the nationality information,count,"[""function name:count\nbase_api: http://127.0.0.1:5200/count\ndescription: counts the occurences of a specific value or values\nfilter_dict: [{'columns': 'a column in which the value to count is present'}, {'value': 'the value to count '}]\n"", ""function name:division\nbase_api: http://127.0.0.1:5200/division\ndescription: Calcuates division of multiple data sources\nfilter_dict: [{'source_A': 'The data source which is divided by source_B'}, {'source_B': 'The data source which divides source_A'}]\n"", ""function name:sum_multiple\nbase_api: http://127.0.0.1:5200/sum_multiple\ndescription: Calcuates summation of multiple data sources\nfilter_dict: [{'source_A': 'The data source which is added to source_B'}, {'source_B': 'The data source which is added to source_A'}]\n"", ""function name:multiplication\nbase_api: http://127.0.0.1:5200/multiplication\ndescription: Calcuates multiplication of multiple data sources\nfilter_dict: [{'source_A': 'The data source which is multiplied with source_B'}, {'source_B': 'The data source which is multiplied with source_A'}]\n""]",1.0,1,0.25,1,0.4,1,1.0,1
6,967,State code numbers of top 3 yougest drivers. How many Netherlandic drivers among them?,simple,returnResult,formula_1,return finished product with state code numbers of top 3 youngest drivers and count of Netherlandic drivers,combine,"[""function name:count\nbase_api: http://127.0.0.1:5200/count\ndescription: counts the occurences of a specific value or values\nfilter_dict: [{'columns': 'a column in which the value to count is present'}, {'value': 'the value to count '}]\n"", ""function name:retrieve\ndescription: retrieves the specified data product, takes the data products name and a list of requested columns as arguments\nfilter_dict: [{'product': 'product url'}]\n"", ""function name:combine\ndescription: combines to data products via a join\nfilter_dict: [{'columns_left': 'which columns of the first data product to match on'}, {'columns_right': 'which columns of the second data product to match on'}, {'type': 'equal or unequal'}]\n"", ""function name:sum_multiple\nbase_api: http://127.0.0.1:5200/sum_multiple\ndescription: Calcuates summation of multiple data sources\nfilter_dict: [{'source_A': 'The data source which is added to source_B'}, {'source_B': 'The data source which is added to source_A'}]\n""]",0.0,0,0.0,0,0.0,0,0.0,0
7,872,"In the race No. 45, for the driver who had the Q3 time as 0:01:33, what is his abbreviated code?",simple,retrieve,formula_1,retrieve Qualifying Dataset,retrieve,"[""function name:retrieve\ndescription: retrieves the specified data product, takes the data products name and a list of requested columns as arguments\nfilter_dict: [{'product': 'product url'}]\n"", ""function name:diffrence\nbase_api: http://127.0.0.1:5200/diffrence\ndescription: Calcuates diffrence between multiple data sources\nfilter_dict: [{'source_A': 'The data source from which source_B is subtracted'}, {'source_B': 'The data source which is subtracted from source_A'}]\n"", ""function name:getValues\nbase_api: http://127.0.0.1:5200/getValues\ndescription: Retrieves specififed data values in a list format\nfilter_dict: [{'columns': 'a column on wihich to match'}, {'values': 'a dict with a value to match if None returns the all columns from columns'}]\nexample: filter_dict:{'values':'None','column':'customer_id'}\n"", ""function name:division\nbase_api: http://127.0.0.1:5200/division\ndescription: Calcuates division of multiple data sources\nfilter_dict: [{'source_A': 'The data source which is divided by source_B'}, {'source_B': 'The data source which divides source_A'}]\n""]",1.0,1,0.25,1,0.4,1,1.0,1
8,872,"In the race No. 45, for the driver who had the Q3 time as 0:01:33, what is his abbreviated code?",simple,filter,formula_1,filter for race No. 45 and Q3 time of 0:01:33,filter,"[""function name:filter\nbase_api: http://127.0.0.1:5200/filter\ndescription: filters a data product based on the provided filterdict, it filters row wise keeping all input columns\nfilter_dict: [{'conditions': 'a dict ith the corresponding columns and their values'}]\nexample: {'condition':{'location':'berlin','year':{'min':2002,'max':2007}}\n"", ""function name:diffrence\nbase_api: http://127.0.0.1:5200/diffrence\ndescription: Calcuates diffrence between multiple data sources\nfilter_dict: [{'source_A': 'The data source from which source_B is subtracted'}, {'source_B': 'The data source which is subtracted from source_A'}]\n"", ""function name:division\nbase_api: http://127.0.0.1:5200/division\ndescription: Calcuates division of multiple data sources\nfilter_dict: [{'source_A': 'The data source which is divided by source_B'}, {'source_B': 'The data source which divides source_A'}]\n"", ""function name:count\nbase_api: http://127.0.0.1:5200/count\ndescription: counts the occurences of a specific value or values\nfilter_dict: [{'columns': 'a column in which the value to count is present'}, {'value': 'the value to count '}]\n""]",1.0,1,0.25,1,0.4,1,1.0,1
10,872,"In the race No. 45, for the driver who had the Q3 time as 0:01:33, what is his abbreviated code?",simple,retrieve,formula_1,retrieve Results Dataset,retrieve,"[""function name:retrieve\ndescription: retrieves the specified data product, takes the data products name and a list of requested columns as arguments\nfilter_dict: [{'product': 'product url'}]\n"", ""function name:returnResult\ndescription: retrieves or extracts  the previously computed data, specified  by the columns in a dataframe\nfilter_dict: [{'columns': 'which columns to retrun/extract'}]\n"", ""function name:getValues\nbase_api: http://127.0.0.1:5200/getValues\ndescription: Retrieves specififed data values in a list format\nfilter_dict: [{'columns': 'a column on wihich to match'}, {'values': 'a dict with a value to match if None returns the all columns from columns'}]\nexample: filter_dict:{'values':'None','column':'customer_id'}\n"", ""function name:diffrence\nbase_api: http://127.0.0.1:5200/diffrence\ndescription: Calcuates diffrence between multiple data sources\nfilter_dict: [{'source_A': 'The data source from which source_B is subtracted'}, {'source_B': 'The data source which is subtracted from source_A'}]\n""]",1.0,1,0.25,1,0.4,1,1.0,1
11,872,"In the race No. 45, for the driver who had the Q3 time as 0:01:33, what is his abbreviated code?",simple,filter,formula_1,filter for race No. 45 and match driverId from the previous step,filter,"[""function name:filter\nbase_api: http://127.0.0.1:5200/filter\ndescription: filters a data product based on the provided filterdict, it filters row wise keeping all input columns\nfilter_dict: [{'conditions': 'a dict ith the corresponding columns and their values'}]\nexample: {'condition':{'location':'berlin','year':{'min':2002,'max':2007}}\n"", ""function name:diffrence\nbase_api: http://127.0.0.1:5200/diffrence\ndescription: Calcuates diffrence between multiple data sources\nfilter_dict: [{'source_A': 'The data source from which source_B is subtracted'}, {'source_B': 'The data source which is subtracted from source_A'}]\n"", ""function name:getValues\nbase_api: http://127.0.0.1:5200/getValues\ndescription: Retrieves specififed data values in a list format\nfilter_dict: [{'columns': 'a column on wihich to match'}, {'values': 'a dict with a value to match if None returns the all columns from columns'}]\nexample: filter_dict:{'values':'None','column':'customer_id'}\n"", ""function name:division\nbase_api: http://127.0.0.1:5200/division\ndescription: Calcuates division of multiple data sources\nfilter_dict: [{'source_A': 'The data source which is divided by source_B'}, {'source_B': 'The data source which divides source_A'}]\n""]",1.0,1,0.25,1,0.4,1,1.0,1
13,872,"In the race No. 45, for the driver who had the Q3 time as 0:01:33, what is his abbreviated code?",simple,returnResult,formula_1,return finished product,returnResult,"[""function name:retrieve\ndescription: retrieves the specified data product, takes the data products name and a list of requested columns as arguments\nfilter_dict: [{'product': 'product url'}]\n"", ""function name:combine\ndescription: combines to data products via a join\nfilter_dict: [{'columns_left': 'which columns of the first data product to match on'}, {'columns_right': 'which columns of the second data product to match on'}, {'type': 'equal or unequal'}]\n"", ""function name:filter\nbase_api: http://127.0.0.1:5200/filter\ndescription: filters a data product based on the provided filterdict, it filters row wise keeping all input columns\nfilter_dict: [{'conditions': 'a dict ith the corresponding columns and their values'}]\nexample: {'condition':{'location':'berlin','year':{'min':2002,'max':2007}}\n"", ""function name:returnResult\ndescription: retrieves or extracts  the previously computed data, specified  by the columns in a dataframe\nfilter_dict: [{'columns': 'which columns to retrun/extract'}]\n""]",0.25,1,0.25,1,0.4,1,1.0,1
14,862,"For the Bahrain Grand Prix in 2007, how many drivers not finished the game?",simple,retrieve,formula_1,retrieve races data,getValues,"[""function name:getValues\nbase_api: http://127.0.0.1:5200/getValues\ndescription: Retrieves specififed data values in a list format\nfilter_dict: [{'columns': 'a column on wihich to match'}, {'values': 'a dict with a value to match if None returns the all columns from columns'}]\nexample: filter_dict:{'values':'None','column':'customer_id'}\n"", ""function name:retrieve\ndescription: retrieves the specified data product, takes the data products name and a list of requested columns as arguments\nfilter_dict: [{'product': 'product url'}]\n"", ""function name:diffrence\nbase_api: http://127.0.0.1:5200/diffrence\ndescription: Calcuates diffrence between multiple data sources\nfilter_dict: [{'source_A': 'The data source from which source_B is subtracted'}, {'source_B': 'The data source which is subtracted from source_A'}]\n"", ""function name:division\nbase_api: http://127.0.0.1:5200/division\ndescription: Calcuates division of multiple data sources\nfilter_dict: [{'source_A': 'The data source which is divided by source_B'}, {'source_B': 'The data source which divides source_A'}]\n""]",0.5,1,0.25,1,0.4,0,0.0,0
15,862,"For the Bahrain Grand Prix in 2007, how many drivers not finished the game?",simple,filter,formula_1,filter for Bahrain Grand Prix in 2007,filter,"[""function name:filter\nbase_api: http://127.0.0.1:5200/filter\ndescription: filters a data product based on the provided filterdict, it filters row wise keeping all input columns\nfilter_dict: [{'conditions': 'a dict ith the corresponding columns and their values'}]\nexample: {'condition':{'location':'berlin','year':{'min':2002,'max':2007}}\n"", ""function name:diffrence\nbase_api: http://127.0.0.1:5200/diffrence\ndescription: Calcuates diffrence between multiple data sources\nfilter_dict: [{'source_A': 'The data source from which source_B is subtracted'}, {'source_B': 'The data source which is subtracted from source_A'}]\n"", ""function name:division\nbase_api: http://127.0.0.1:5200/division\ndescription: Calcuates division of multiple data sources\nfilter_dict: [{'source_A': 'The data source which is divided by source_B'}, {'source_B': 'The data source which divides source_A'}]\n"", ""function name:sum_multiple\nbase_api: http://127.0.0.1:5200/sum_multiple\ndescription: Calcuates summation of multiple data sources\nfilter_dict: [{'source_A': 'The data source which is added to source_B'}, {'source_B': 'The data source which is added to source_A'}]\n""]",1.0,1,0.25,1,0.4,1,1.0,1
17,862,"For the Bahrain Grand Prix in 2007, how many drivers not finished the game?",simple,retrieve,formula_1,retrieve driverStandings data,retrieve,"[""function name:getValues\nbase_api: http://127.0.0.1:5200/getValues\ndescription: Retrieves specififed data values in a list format\nfilter_dict: [{'columns': 'a column on wihich to match'}, {'values': 'a dict with a value to match if None returns the all columns from columns'}]\nexample: filter_dict:{'values':'None','column':'customer_id'}\n"", ""function name:diffrence\nbase_api: http://127.0.0.1:5200/diffrence\ndescription: Calcuates diffrence between multiple data sources\nfilter_dict: [{'source_A': 'The data source from which source_B is subtracted'}, {'source_B': 'The data source which is subtracted from source_A'}]\n"", ""function name:retrieve\ndescription: retrieves the specified data product, takes the data products name and a list of requested columns as arguments\nfilter_dict: [{'product': 'product url'}]\n"", 'function name:sortby\nbase_api: http://127.0.0.1:5200/sortby\ndescription: sorts the data based on a the provided columns and either ascending or descending\nfilter_dict: [{\'columns\': \'a column on which the sorting is based on\'}, {\'ascending\': ""\'True\' if the data is sorted ascending, \'False\' for descending""}]\n']",0.3333333333333333,1,0.25,1,0.4,1,1.0,1
18,862,"For the Bahrain Grand Prix in 2007, how many drivers not finished the game?",simple,filter,formula_1,filter for driverStandings related to the extracted raceId,filter,"[""function name:filter\nbase_api: http://127.0.0.1:5200/filter\ndescription: filters a data product based on the provided filterdict, it filters row wise keeping all input columns\nfilter_dict: [{'conditions': 'a dict ith the corresponding columns and their values'}]\nexample: {'condition':{'location':'berlin','year':{'min':2002,'max':2007}}\n"", 'function name:sortby\nbase_api: http://127.0.0.1:5200/sortby\ndescription: sorts the data based on a the provided columns and either ascending or descending\nfilter_dict: [{\'columns\': \'a column on which the sorting is based on\'}, {\'ascending\': ""\'True\' if the data is sorted ascending, \'False\' for descending""}]\n', ""function name:getValues\nbase_api: http://127.0.0.1:5200/getValues\ndescription: Retrieves specififed data values in a list format\nfilter_dict: [{'columns': 'a column on wihich to match'}, {'values': 'a dict with a value to match if None returns the all columns from columns'}]\nexample: filter_dict:{'values':'None','column':'customer_id'}\n"", ""function name:returnResult\ndescription: retrieves or extracts  the previously computed data, specified  by the columns in a dataframe\nfilter_dict: [{'columns': 'which columns to retrun/extract'}]\n""]",1.0,1,0.25,1,0.4,1,1.0,1
19,862,"For the Bahrain Grand Prix in 2007, how many drivers not finished the game?",simple,filter,formula_1,"identify drivers with finishing positions indicating they did not finish (e.g., ""DNF"")",getValues,"[""function name:diffrence\nbase_api: http://127.0.0.1:5200/diffrence\ndescription: Calcuates diffrence between multiple data sources\nfilter_dict: [{'source_A': 'The data source from which source_B is subtracted'}, {'source_B': 'The data source which is subtracted from source_A'}]\n"", ""function name:division\nbase_api: http://127.0.0.1:5200/division\ndescription: Calcuates division of multiple data sources\nfilter_dict: [{'source_A': 'The data source which is divided by source_B'}, {'source_B': 'The data source which divides source_A'}]\n"", ""function name:getValues\nbase_api: http://127.0.0.1:5200/getValues\ndescription: Retrieves specififed data values in a list format\nfilter_dict: [{'columns': 'a column on wihich to match'}, {'values': 'a dict with a value to match if None returns the all columns from columns'}]\nexample: filter_dict:{'values':'None','column':'customer_id'}\n"", ""function name:count\nbase_api: http://127.0.0.1:5200/count\ndescription: counts the occurences of a specific value or values\nfilter_dict: [{'columns': 'a column in which the value to count is present'}, {'value': 'the value to count '}]\n""]",0.0,0,0.0,0,0.0,0,0.0,0
20,862,"For the Bahrain Grand Prix in 2007, how many drivers not finished the game?",simple,count,formula_1,count the number of drivers who did not finish,count,"[""function name:count\nbase_api: http://127.0.0.1:5200/count\ndescription: counts the occurences of a specific value or values\nfilter_dict: [{'columns': 'a column in which the value to count is present'}, {'value': 'the value to count '}]\n"", ""function name:sum_multiple\nbase_api: http://127.0.0.1:5200/sum_multiple\ndescription: Calcuates summation of multiple data sources\nfilter_dict: [{'source_A': 'The data source which is added to source_B'}, {'source_B': 'The data source which is added to source_A'}]\n"", ""function name:diffrence\nbase_api: http://127.0.0.1:5200/diffrence\ndescription: Calcuates diffrence between multiple data sources\nfilter_dict: [{'source_A': 'The data source from which source_B is subtracted'}, {'source_B': 'The data source which is subtracted from source_A'}]\n"", ""function name:division\nbase_api: http://127.0.0.1:5200/division\ndescription: Calcuates division of multiple data sources\nfilter_dict: [{'source_A': 'The data source which is divided by source_B'}, {'source_B': 'The data source which divides source_A'}]\n""]",1.0,1,0.25,1,0.4,1,1.0,1
21,862,"For the Bahrain Grand Prix in 2007, how many drivers not finished the game?",simple,returnResult,formula_1,return finished product,returnResult,"[""function name:retrieve\ndescription: retrieves the specified data product, takes the data products name and a list of requested columns as arguments\nfilter_dict: [{'product': 'product url'}]\n"", ""function name:combine\ndescription: combines to data products via a join\nfilter_dict: [{'columns_left': 'which columns of the first data product to match on'}, {'columns_right': 'which columns of the second data product to match on'}, {'type': 'equal or unequal'}]\n"", ""function name:filter\nbase_api: http://127.0.0.1:5200/filter\ndescription: filters a data product based on the provided filterdict, it filters row wise keeping all input columns\nfilter_dict: [{'conditions': 'a dict ith the corresponding columns and their values'}]\nexample: {'condition':{'location':'berlin','year':{'min':2002,'max':2007}}\n"", ""function name:returnResult\ndescription: retrieves or extracts  the previously computed data, specified  by the columns in a dataframe\nfilter_dict: [{'columns': 'which columns to retrun/extract'}]\n""]",0.25,1,0.25,1,0.4,1,1.0,1
22,875,Show me the season page of year when the race No. 901 took place.,simple,retrieve,formula_1,retrieve races dataset,retrieve,"[""function name:diffrence\nbase_api: http://127.0.0.1:5200/diffrence\ndescription: Calcuates diffrence between multiple data sources\nfilter_dict: [{'source_A': 'The data source from which source_B is subtracted'}, {'source_B': 'The data source which is subtracted from source_A'}]\n"", ""function name:retrieve\ndescription: retrieves the specified data product, takes the data products name and a list of requested columns as arguments\nfilter_dict: [{'product': 'product url'}]\n"", ""function name:getValues\nbase_api: http://127.0.0.1:5200/getValues\ndescription: Retrieves specififed data values in a list format\nfilter_dict: [{'columns': 'a column on wihich to match'}, {'values': 'a dict with a value to match if None returns the all columns from columns'}]\nexample: filter_dict:{'values':'None','column':'customer_id'}\n"", ""function name:division\nbase_api: http://127.0.0.1:5200/division\ndescription: Calcuates division of multiple data sources\nfilter_dict: [{'source_A': 'The data source which is divided by source_B'}, {'source_B': 'The data source which divides source_A'}]\n""]",0.5,1,0.25,1,0.4,1,1.0,1
23,875,Show me the season page of year when the race No. 901 took place.,simple,filter,formula_1,filter for race No. 901 to identify the year,filter,"[""function name:filter\nbase_api: http://127.0.0.1:5200/filter\ndescription: filters a data product based on the provided filterdict, it filters row wise keeping all input columns\nfilter_dict: [{'conditions': 'a dict ith the corresponding columns and their values'}]\nexample: {'condition':{'location':'berlin','year':{'min':2002,'max':2007}}\n"", ""function name:getValues\nbase_api: http://127.0.0.1:5200/getValues\ndescription: Retrieves specififed data values in a list format\nfilter_dict: [{'columns': 'a column on wihich to match'}, {'values': 'a dict with a value to match if None returns the all columns from columns'}]\nexample: filter_dict:{'values':'None','column':'customer_id'}\n"", ""function name:count\nbase_api: http://127.0.0.1:5200/count\ndescription: counts the occurences of a specific value or values\nfilter_dict: [{'columns': 'a column in which the value to count is present'}, {'value': 'the value to count '}]\n"", ""function name:diffrence\nbase_api: http://127.0.0.1:5200/diffrence\ndescription: Calcuates diffrence between multiple data sources\nfilter_dict: [{'source_A': 'The data source from which source_B is subtracted'}, {'source_B': 'The data source which is subtracted from source_A'}]\n""]",1.0,1,0.25,1,0.4,1,1.0,1
24,875,Show me the season page of year when the race No. 901 took place.,simple,retrieve,formula_1,retrieve seasons dataset,retrieve,"[""function name:retrieve\ndescription: retrieves the specified data product, takes the data products name and a list of requested columns as arguments\nfilter_dict: [{'product': 'product url'}]\n"", ""function name:diffrence\nbase_api: http://127.0.0.1:5200/diffrence\ndescription: Calcuates diffrence between multiple data sources\nfilter_dict: [{'source_A': 'The data source from which source_B is subtracted'}, {'source_B': 'The data source which is subtracted from source_A'}]\n"", ""function name:division\nbase_api: http://127.0.0.1:5200/division\ndescription: Calcuates division of multiple data sources\nfilter_dict: [{'source_A': 'The data source which is divided by source_B'}, {'source_B': 'The data source which divides source_A'}]\n"", ""function name:getValues\nbase_api: http://127.0.0.1:5200/getValues\ndescription: Retrieves specififed data values in a list format\nfilter_dict: [{'columns': 'a column on wihich to match'}, {'values': 'a dict with a value to match if None returns the all columns from columns'}]\nexample: filter_dict:{'values':'None','column':'customer_id'}\n""]",1.0,1,0.25,1,0.4,1,1.0,1
25,875,Show me the season page of year when the race No. 901 took place.,simple,combine,formula_1,combine the year from races dataset with the seasons dataset to find the corresponding season page,combine,"[""function name:combine\ndescription: combines to data products via a join\nfilter_dict: [{'columns_left': 'which columns of the first data product to match on'}, {'columns_right': 'which columns of the second data product to match on'}, {'type': 'equal or unequal'}]\n"", ""function name:sum_multiple\nbase_api: http://127.0.0.1:5200/sum_multiple\ndescription: Calcuates summation of multiple data sources\nfilter_dict: [{'source_A': 'The data source which is added to source_B'}, {'source_B': 'The data source which is added to source_A'}]\n"", ""function name:division\nbase_api: http://127.0.0.1:5200/division\ndescription: Calcuates division of multiple data sources\nfilter_dict: [{'source_A': 'The data source which is divided by source_B'}, {'source_B': 'The data source which divides source_A'}]\n"", ""function name:diffrence\nbase_api: http://127.0.0.1:5200/diffrence\ndescription: Calcuates diffrence between multiple data sources\nfilter_dict: [{'source_A': 'The data source from which source_B is subtracted'}, {'source_B': 'The data source which is subtracted from source_A'}]\n""]",1.0,1,0.25,1,0.4,1,1.0,1
26,875,Show me the season page of year when the race No. 901 took place.,simple,returnResult,formula_1,return finished product,returnResult,"[""function name:retrieve\ndescription: retrieves the specified data product, takes the data products name and a list of requested columns as arguments\nfilter_dict: [{'product': 'product url'}]\n"", ""function name:combine\ndescription: combines to data products via a join\nfilter_dict: [{'columns_left': 'which columns of the first data product to match on'}, {'columns_right': 'which columns of the second data product to match on'}, {'type': 'equal or unequal'}]\n"", ""function name:filter\nbase_api: http://127.0.0.1:5200/filter\ndescription: filters a data product based on the provided filterdict, it filters row wise keeping all input columns\nfilter_dict: [{'conditions': 'a dict ith the corresponding columns and their values'}]\nexample: {'condition':{'location':'berlin','year':{'min':2002,'max':2007}}\n"", ""function name:returnResult\ndescription: retrieves or extracts  the previously computed data, specified  by the columns in a dataframe\nfilter_dict: [{'columns': 'which columns to retrun/extract'}]\n""]",0.25,1,0.25,1,0.4,1,1.0,1
27,951,How many Japanese constructors have 0 points in 2 races?,simple,retrieve,formula_1,retrieve constructorStandings data,retrieve,"[""function name:retrieve\ndescription: retrieves the specified data product, takes the data products name and a list of requested columns as arguments\nfilter_dict: [{'product': 'product url'}]\n"", 'function name:sortby\nbase_api: http://127.0.0.1:5200/sortby\ndescription: sorts the data based on a the provided columns and either ascending or descending\nfilter_dict: [{\'columns\': \'a column on which the sorting is based on\'}, {\'ascending\': ""\'True\' if the data is sorted ascending, \'False\' for descending""}]\n', ""function name:getValues\nbase_api: http://127.0.0.1:5200/getValues\ndescription: Retrieves specififed data values in a list format\nfilter_dict: [{'columns': 'a column on wihich to match'}, {'values': 'a dict with a value to match if None returns the all columns from columns'}]\nexample: filter_dict:{'values':'None','column':'customer_id'}\n"", ""function name:returnResult\ndescription: retrieves or extracts  the previously computed data, specified  by the columns in a dataframe\nfilter_dict: [{'columns': 'which columns to retrun/extract'}]\n""]",1.0,1,0.25,1,0.4,1,1.0,1
28,951,How many Japanese constructors have 0 points in 2 races?,simple,retrieve,formula_1,retrieve constructorResults data,retrieve,"[""function name:retrieve\ndescription: retrieves the specified data product, takes the data products name and a list of requested columns as arguments\nfilter_dict: [{'product': 'product url'}]\n"", ""function name:returnResult\ndescription: retrieves or extracts  the previously computed data, specified  by the columns in a dataframe\nfilter_dict: [{'columns': 'which columns to retrun/extract'}]\n"", ""function name:getValues\nbase_api: http://127.0.0.1:5200/getValues\ndescription: Retrieves specififed data values in a list format\nfilter_dict: [{'columns': 'a column on wihich to match'}, {'values': 'a dict with a value to match if None returns the all columns from columns'}]\nexample: filter_dict:{'values':'None','column':'customer_id'}\n"", ""function name:diffrence\nbase_api: http://127.0.0.1:5200/diffrence\ndescription: Calcuates diffrence between multiple data sources\nfilter_dict: [{'source_A': 'The data source from which source_B is subtracted'}, {'source_B': 'The data source which is subtracted from source_A'}]\n""]",1.0,1,0.25,1,0.4,1,1.0,1
29,951,How many Japanese constructors have 0 points in 2 races?,simple,retrieve,formula_1,retrieve races data,retrieve,"[""function name:getValues\nbase_api: http://127.0.0.1:5200/getValues\ndescription: Retrieves specififed data values in a list format\nfilter_dict: [{'columns': 'a column on wihich to match'}, {'values': 'a dict with a value to match if None returns the all columns from columns'}]\nexample: filter_dict:{'values':'None','column':'customer_id'}\n"", ""function name:retrieve\ndescription: retrieves the specified data product, takes the data products name and a list of requested columns as arguments\nfilter_dict: [{'product': 'product url'}]\n"", ""function name:diffrence\nbase_api: http://127.0.0.1:5200/diffrence\ndescription: Calcuates diffrence between multiple data sources\nfilter_dict: [{'source_A': 'The data source from which source_B is subtracted'}, {'source_B': 'The data source which is subtracted from source_A'}]\n"", ""function name:division\nbase_api: http://127.0.0.1:5200/division\ndescription: Calcuates division of multiple data sources\nfilter_dict: [{'source_A': 'The data source which is divided by source_B'}, {'source_B': 'The data source which divides source_A'}]\n""]",0.5,1,0.25,1,0.4,1,1.0,1
30,951,How many Japanese constructors have 0 points in 2 races?,simple,filter,formula_1,filter constructorStandings for Japanese constructors,filter,"['function name:sortby\nbase_api: http://127.0.0.1:5200/sortby\ndescription: sorts the data based on a the provided columns and either ascending or descending\nfilter_dict: [{\'columns\': \'a column on which the sorting is based on\'}, {\'ascending\': ""\'True\' if the data is sorted ascending, \'False\' for descending""}]\n', ""function name:division\nbase_api: http://127.0.0.1:5200/division\ndescription: Calcuates division of multiple data sources\nfilter_dict: [{'source_A': 'The data source which is divided by source_B'}, {'source_B': 'The data source which divides source_A'}]\n"", ""function name:filter\nbase_api: http://127.0.0.1:5200/filter\ndescription: filters a data product based on the provided filterdict, it filters row wise keeping all input columns\nfilter_dict: [{'conditions': 'a dict ith the corresponding columns and their values'}]\nexample: {'condition':{'location':'berlin','year':{'min':2002,'max':2007}}\n"", ""function name:mean\nbase_api: http://127.0.0.1:5200/sum\ndescription: Calcuates the mean of a dataframe based on a list of group_by columns and\nfilter_dict: [{'group_by': 'a list of coulmns in the dataframe, can be None'}, {'columns': 'a list of columns for hicht the mean should be calculated, cant be None'}]\n""]",0.3333333333333333,1,0.25,1,0.4,1,1.0,1
31,951,How many Japanese constructors have 0 points in 2 races?,simple,filter,formula_1,filter constructorResults for constructors with 0 points,filter,"[""function name:filter\nbase_api: http://127.0.0.1:5200/filter\ndescription: filters a data product based on the provided filterdict, it filters row wise keeping all input columns\nfilter_dict: [{'conditions': 'a dict ith the corresponding columns and their values'}]\nexample: {'condition':{'location':'berlin','year':{'min':2002,'max':2007}}\n"", ""function name:sum_multiple\nbase_api: http://127.0.0.1:5200/sum_multiple\ndescription: Calcuates summation of multiple data sources\nfilter_dict: [{'source_A': 'The data source which is added to source_B'}, {'source_B': 'The data source which is added to source_A'}]\n"", ""function name:diffrence\nbase_api: http://127.0.0.1:5200/diffrence\ndescription: Calcuates diffrence between multiple data sources\nfilter_dict: [{'source_A': 'The data source from which source_B is subtracted'}, {'source_B': 'The data source which is subtracted from source_A'}]\n"", ""function name:division\nbase_api: http://127.0.0.1:5200/division\ndescription: Calcuates division of multiple data sources\nfilter_dict: [{'source_A': 'The data source which is divided by source_B'}, {'source_B': 'The data source which divides source_A'}]\n""]",1.0,1,0.25,1,0.4,1,1.0,1
32,951,How many Japanese constructors have 0 points in 2 races?,simple,filter,formula_1,filter races to identify the two specific races,filter,"[""function name:filter\nbase_api: http://127.0.0.1:5200/filter\ndescription: filters a data product based on the provided filterdict, it filters row wise keeping all input columns\nfilter_dict: [{'conditions': 'a dict ith the corresponding columns and their values'}]\nexample: {'condition':{'location':'berlin','year':{'min':2002,'max':2007}}\n"", ""function name:division\nbase_api: http://127.0.0.1:5200/division\ndescription: Calcuates division of multiple data sources\nfilter_dict: [{'source_A': 'The data source which is divided by source_B'}, {'source_B': 'The data source which divides source_A'}]\n"", ""function name:diffrence\nbase_api: http://127.0.0.1:5200/diffrence\ndescription: Calcuates diffrence between multiple data sources\nfilter_dict: [{'source_A': 'The data source from which source_B is subtracted'}, {'source_B': 'The data source which is subtracted from source_A'}]\n"", ""function name:multiplication\nbase_api: http://127.0.0.1:5200/multiplication\ndescription: Calcuates multiplication of multiple data sources\nfilter_dict: [{'source_A': 'The data source which is multiplied with source_B'}, {'source_B': 'The data source which is multiplied with source_A'}]\n""]",1.0,1,0.25,1,0.4,1,1.0,1
33,951,How many Japanese constructors have 0 points in 2 races?,simple,combine,formula_1,combine filtered constructorStandings and constructorResults to identify Japanese constructors with 0 points in the two races,diffrence,"[""function name:diffrence\nbase_api: http://127.0.0.1:5200/diffrence\ndescription: Calcuates diffrence between multiple data sources\nfilter_dict: [{'source_A': 'The data source from which source_B is subtracted'}, {'source_B': 'The data source which is subtracted from source_A'}]\n"", ""function name:division\nbase_api: http://127.0.0.1:5200/division\ndescription: Calcuates division of multiple data sources\nfilter_dict: [{'source_A': 'The data source which is divided by source_B'}, {'source_B': 'The data source which divides source_A'}]\n"", ""function name:sum_multiple\nbase_api: http://127.0.0.1:5200/sum_multiple\ndescription: Calcuates summation of multiple data sources\nfilter_dict: [{'source_A': 'The data source which is added to source_B'}, {'source_B': 'The data source which is added to source_A'}]\n"", ""function name:mean\nbase_api: http://127.0.0.1:5200/sum\ndescription: Calcuates the mean of a dataframe based on a list of group_by columns and\nfilter_dict: [{'group_by': 'a list of coulmns in the dataframe, can be None'}, {'columns': 'a list of columns for hicht the mean should be calculated, cant be None'}]\n""]",0.0,0,0.0,0,0.0,0,0.0,0
34,951,How many Japanese constructors have 0 points in 2 races?,simple,count,formula_1,count the number of Japanese constructors identified,count,"[""function name:count\nbase_api: http://127.0.0.1:5200/count\ndescription: counts the occurences of a specific value or values\nfilter_dict: [{'columns': 'a column in which the value to count is present'}, {'value': 'the value to count '}]\n"", ""function name:sum_multiple\nbase_api: http://127.0.0.1:5200/sum_multiple\ndescription: Calcuates summation of multiple data sources\nfilter_dict: [{'source_A': 'The data source which is added to source_B'}, {'source_B': 'The data source which is added to source_A'}]\n"", ""function name:division\nbase_api: http://127.0.0.1:5200/division\ndescription: Calcuates division of multiple data sources\nfilter_dict: [{'source_A': 'The data source which is divided by source_B'}, {'source_B': 'The data source which divides source_A'}]\n"", ""function name:multiplication\nbase_api: http://127.0.0.1:5200/multiplication\ndescription: Calcuates multiplication of multiple data sources\nfilter_dict: [{'source_A': 'The data source which is multiplied with source_B'}, {'source_B': 'The data source which is multiplied with source_A'}]\n""]",1.0,1,0.25,1,0.4,1,1.0,1
35,951,How many Japanese constructors have 0 points in 2 races?,simple,returnResult,formula_1,return finished product,returnResult,"[""function name:retrieve\ndescription: retrieves the specified data product, takes the data products name and a list of requested columns as arguments\nfilter_dict: [{'product': 'product url'}]\n"", ""function name:combine\ndescription: combines to data products via a join\nfilter_dict: [{'columns_left': 'which columns of the first data product to match on'}, {'columns_right': 'which columns of the second data product to match on'}, {'type': 'equal or unequal'}]\n"", ""function name:filter\nbase_api: http://127.0.0.1:5200/filter\ndescription: filters a data product based on the provided filterdict, it filters row wise keeping all input columns\nfilter_dict: [{'conditions': 'a dict ith the corresponding columns and their values'}]\nexample: {'condition':{'location':'berlin','year':{'min':2002,'max':2007}}\n"", ""function name:returnResult\ndescription: retrieves or extracts  the previously computed data, specified  by the columns in a dataframe\nfilter_dict: [{'columns': 'which columns to retrun/extract'}]\n""]",0.25,1,0.25,1,0.4,1,1.0,1
36,737,What is Copycat's race?,simple,retrieve,superhero,retrieve race dataset,retrieve,"[""function name:diffrence\nbase_api: http://127.0.0.1:5200/diffrence\ndescription: Calcuates diffrence between multiple data sources\nfilter_dict: [{'source_A': 'The data source from which source_B is subtracted'}, {'source_B': 'The data source which is subtracted from source_A'}]\n"", ""function name:retrieve\ndescription: retrieves the specified data product, takes the data products name and a list of requested columns as arguments\nfilter_dict: [{'product': 'product url'}]\n"", ""function name:division\nbase_api: http://127.0.0.1:5200/division\ndescription: Calcuates division of multiple data sources\nfilter_dict: [{'source_A': 'The data source which is divided by source_B'}, {'source_B': 'The data source which divides source_A'}]\n"", ""function name:getValues\nbase_api: http://127.0.0.1:5200/getValues\ndescription: Retrieves specififed data values in a list format\nfilter_dict: [{'columns': 'a column on wihich to match'}, {'values': 'a dict with a value to match if None returns the all columns from columns'}]\nexample: filter_dict:{'values':'None','column':'customer_id'}\n""]",0.5,1,0.25,1,0.4,1,1.0,1
37,737,What is Copycat's race?,simple,filter,superhero,filter for Copycat's race,filter,"[""function name:filter\nbase_api: http://127.0.0.1:5200/filter\ndescription: filters a data product based on the provided filterdict, it filters row wise keeping all input columns\nfilter_dict: [{'conditions': 'a dict ith the corresponding columns and their values'}]\nexample: {'condition':{'location':'berlin','year':{'min':2002,'max':2007}}\n"", ""function name:diffrence\nbase_api: http://127.0.0.1:5200/diffrence\ndescription: Calcuates diffrence between multiple data sources\nfilter_dict: [{'source_A': 'The data source from which source_B is subtracted'}, {'source_B': 'The data source which is subtracted from source_A'}]\n"", ""function name:multiplication\nbase_api: http://127.0.0.1:5200/multiplication\ndescription: Calcuates multiplication of multiple data sources\nfilter_dict: [{'source_A': 'The data source which is multiplied with source_B'}, {'source_B': 'The data source which is multiplied with source_A'}]\n"", ""function name:division\nbase_api: http://127.0.0.1:5200/division\ndescription: Calcuates division of multiple data sources\nfilter_dict: [{'source_A': 'The data source which is divided by source_B'}, {'source_B': 'The data source which divides source_A'}]\n""]",1.0,1,0.25,1,0.4,1,1.0,1
38,737,What is Copycat's race?,simple,retrieve,superhero,retrieve foreign_data dataset,retrieve,"[""function name:retrieve\ndescription: retrieves the specified data product, takes the data products name and a list of requested columns as arguments\nfilter_dict: [{'product': 'product url'}]\n"", ""function name:diffrence\nbase_api: http://127.0.0.1:5200/diffrence\ndescription: Calcuates diffrence between multiple data sources\nfilter_dict: [{'source_A': 'The data source from which source_B is subtracted'}, {'source_B': 'The data source which is subtracted from source_A'}]\n"", ""function name:returnResult\ndescription: retrieves or extracts  the previously computed data, specified  by the columns in a dataframe\nfilter_dict: [{'columns': 'which columns to retrun/extract'}]\n"", ""function name:getValues\nbase_api: http://127.0.0.1:5200/getValues\ndescription: Retrieves specififed data values in a list format\nfilter_dict: [{'columns': 'a column on wihich to match'}, {'values': 'a dict with a value to match if None returns the all columns from columns'}]\nexample: filter_dict:{'values':'None','column':'customer_id'}\n""]",1.0,1,0.25,1,0.4,1,1.0,1
39,737,What is Copycat's race?,simple,filter,superhero,filter for Copycat's characteristics,filter,"[""function name:filter\nbase_api: http://127.0.0.1:5200/filter\ndescription: filters a data product based on the provided filterdict, it filters row wise keeping all input columns\nfilter_dict: [{'conditions': 'a dict ith the corresponding columns and their values'}]\nexample: {'condition':{'location':'berlin','year':{'min':2002,'max':2007}}\n"", ""function name:diffrence\nbase_api: http://127.0.0.1:5200/diffrence\ndescription: Calcuates diffrence between multiple data sources\nfilter_dict: [{'source_A': 'The data source from which source_B is subtracted'}, {'source_B': 'The data source which is subtracted from source_A'}]\n"", ""function name:getValues\nbase_api: http://127.0.0.1:5200/getValues\ndescription: Retrieves specififed data values in a list format\nfilter_dict: [{'columns': 'a column on wihich to match'}, {'values': 'a dict with a value to match if None returns the all columns from columns'}]\nexample: filter_dict:{'values':'None','column':'customer_id'}\n"", ""function name:multiplication\nbase_api: http://127.0.0.1:5200/multiplication\ndescription: Calcuates multiplication of multiple data sources\nfilter_dict: [{'source_A': 'The data source which is multiplied with source_B'}, {'source_B': 'The data source which is multiplied with source_A'}]\n""]",1.0,1,0.25,1,0.4,1,1.0,1
40,737,What is Copycat's race?,simple,combine,superhero,combine race from race dataset and characteristics from foreign_data dataset,combine,"[""function name:combine\ndescription: combines to data products via a join\nfilter_dict: [{'columns_left': 'which columns of the first data product to match on'}, {'columns_right': 'which columns of the second data product to match on'}, {'type': 'equal or unequal'}]\n"", ""function name:diffrence\nbase_api: http://127.0.0.1:5200/diffrence\ndescription: Calcuates diffrence between multiple data sources\nfilter_dict: [{'source_A': 'The data source from which source_B is subtracted'}, {'source_B': 'The data source which is subtracted from source_A'}]\n"", ""function name:sum_multiple\nbase_api: http://127.0.0.1:5200/sum_multiple\ndescription: Calcuates summation of multiple data sources\nfilter_dict: [{'source_A': 'The data source which is added to source_B'}, {'source_B': 'The data source which is added to source_A'}]\n"", ""function name:multiplication\nbase_api: http://127.0.0.1:5200/multiplication\ndescription: Calcuates multiplication of multiple data sources\nfilter_dict: [{'source_A': 'The data source which is multiplied with source_B'}, {'source_B': 'The data source which is multiplied with source_A'}]\n""]",1.0,1,0.25,1,0.4,1,1.0,1
41,737,What is Copycat's race?,simple,returnResult,superhero,return finished product,returnResult,"[""function name:retrieve\ndescription: retrieves the specified data product, takes the data products name and a list of requested columns as arguments\nfilter_dict: [{'product': 'product url'}]\n"", ""function name:combine\ndescription: combines to data products via a join\nfilter_dict: [{'columns_left': 'which columns of the first data product to match on'}, {'columns_right': 'which columns of the second data product to match on'}, {'type': 'equal or unequal'}]\n"", ""function name:filter\nbase_api: http://127.0.0.1:5200/filter\ndescription: filters a data product based on the provided filterdict, it filters row wise keeping all input columns\nfilter_dict: [{'conditions': 'a dict ith the corresponding columns and their values'}]\nexample: {'condition':{'location':'berlin','year':{'min':2002,'max':2007}}\n"", ""function name:returnResult\ndescription: retrieves or extracts  the previously computed data, specified  by the columns in a dataframe\nfilter_dict: [{'columns': 'which columns to retrun/extract'}]\n""]",0.25,1,0.25,1,0.4,1,1.0,1
42,424,What proportion of cards do not have a text box with a normal layout?,simple,retrieve,card_games,retrieve card dataset,retrieve,"[""function name:retrieve\ndescription: retrieves the specified data product, takes the data products name and a list of requested columns as arguments\nfilter_dict: [{'product': 'product url'}]\n"", ""function name:getValues\nbase_api: http://127.0.0.1:5200/getValues\ndescription: Retrieves specififed data values in a list format\nfilter_dict: [{'columns': 'a column on wihich to match'}, {'values': 'a dict with a value to match if None returns the all columns from columns'}]\nexample: filter_dict:{'values':'None','column':'customer_id'}\n"", ""function name:diffrence\nbase_api: http://127.0.0.1:5200/diffrence\ndescription: Calcuates diffrence between multiple data sources\nfilter_dict: [{'source_A': 'The data source from which source_B is subtracted'}, {'source_B': 'The data source which is subtracted from source_A'}]\n"", ""function name:division\nbase_api: http://127.0.0.1:5200/division\ndescription: Calcuates division of multiple data sources\nfilter_dict: [{'source_A': 'The data source which is divided by source_B'}, {'source_B': 'The data source which divides source_A'}]\n""]",1.0,1,0.25,1,0.4,1,1.0,1
44,424,What proportion of cards do not have a text box with a normal layout?,simple,retrieve,card_games,retrieve posts dataset,retrieve,"[""function name:retrieve\ndescription: retrieves the specified data product, takes the data products name and a list of requested columns as arguments\nfilter_dict: [{'product': 'product url'}]\n"", ""function name:diffrence\nbase_api: http://127.0.0.1:5200/diffrence\ndescription: Calcuates diffrence between multiple data sources\nfilter_dict: [{'source_A': 'The data source from which source_B is subtracted'}, {'source_B': 'The data source which is subtracted from source_A'}]\n"", ""function name:getValues\nbase_api: http://127.0.0.1:5200/getValues\ndescription: Retrieves specififed data values in a list format\nfilter_dict: [{'columns': 'a column on wihich to match'}, {'values': 'a dict with a value to match if None returns the all columns from columns'}]\nexample: filter_dict:{'values':'None','column':'customer_id'}\n"", ""function name:sum_multiple\nbase_api: http://127.0.0.1:5200/sum_multiple\ndescription: Calcuates summation of multiple data sources\nfilter_dict: [{'source_A': 'The data source which is added to source_B'}, {'source_B': 'The data source which is added to source_A'}]\n""]",1.0,1,0.25,1,0.4,1,1.0,1
46,424,What proportion of cards do not have a text box with a normal layout?,simple,combine,card_games,combine results from card analysis and statistical methods,combine,"[""function name:combine\ndescription: combines to data products via a join\nfilter_dict: [{'columns_left': 'which columns of the first data product to match on'}, {'columns_right': 'which columns of the second data product to match on'}, {'type': 'equal or unequal'}]\n"", ""function name:sum_multiple\nbase_api: http://127.0.0.1:5200/sum_multiple\ndescription: Calcuates summation of multiple data sources\nfilter_dict: [{'source_A': 'The data source which is added to source_B'}, {'source_B': 'The data source which is added to source_A'}]\n"", ""function name:mean\nbase_api: http://127.0.0.1:5200/sum\ndescription: Calcuates the mean of a dataframe based on a list of group_by columns and\nfilter_dict: [{'group_by': 'a list of coulmns in the dataframe, can be None'}, {'columns': 'a list of columns for hicht the mean should be calculated, cant be None'}]\n"", ""function name:multiplication\nbase_api: http://127.0.0.1:5200/multiplication\ndescription: Calcuates multiplication of multiple data sources\nfilter_dict: [{'source_A': 'The data source which is multiplied with source_B'}, {'source_B': 'The data source which is multiplied with source_A'}]\n""]",1.0,1,0.25,1,0.4,1,1.0,1
47,424,What proportion of cards do not have a text box with a normal layout?,simple,returnResult,card_games,return finished product,returnResult,"[""function name:retrieve\ndescription: retrieves the specified data product, takes the data products name and a list of requested columns as arguments\nfilter_dict: [{'product': 'product url'}]\n"", ""function name:combine\ndescription: combines to data products via a join\nfilter_dict: [{'columns_left': 'which columns of the first data product to match on'}, {'columns_right': 'which columns of the second data product to match on'}, {'type': 'equal or unequal'}]\n"", ""function name:filter\nbase_api: http://127.0.0.1:5200/filter\ndescription: filters a data product based on the provided filterdict, it filters row wise keeping all input columns\nfilter_dict: [{'conditions': 'a dict ith the corresponding columns and their values'}]\nexample: {'condition':{'location':'berlin','year':{'min':2002,'max':2007}}\n"", ""function name:returnResult\ndescription: retrieves or extracts  the previously computed data, specified  by the columns in a dataframe\nfilter_dict: [{'columns': 'which columns to retrun/extract'}]\n""]",0.25,1,0.25,1,0.4,1,1.0,1
48,341,What are the borderless cards available without powerful foils?,simple,retrieve,card_games,retrieve Magic: The Gathering Card Data,retrieve,"[""function name:retrieve\ndescription: retrieves the specified data product, takes the data products name and a list of requested columns as arguments\nfilter_dict: [{'product': 'product url'}]\n"", ""function name:multiplication\nbase_api: http://127.0.0.1:5200/multiplication\ndescription: Calcuates multiplication of multiple data sources\nfilter_dict: [{'source_A': 'The data source which is multiplied with source_B'}, {'source_B': 'The data source which is multiplied with source_A'}]\n"", ""function name:getValues\nbase_api: http://127.0.0.1:5200/getValues\ndescription: Retrieves specififed data values in a list format\nfilter_dict: [{'columns': 'a column on wihich to match'}, {'values': 'a dict with a value to match if None returns the all columns from columns'}]\nexample: filter_dict:{'values':'None','column':'customer_id'}\n"", ""function name:diffrence\nbase_api: http://127.0.0.1:5200/diffrence\ndescription: Calcuates diffrence between multiple data sources\nfilter_dict: [{'source_A': 'The data source from which source_B is subtracted'}, {'source_B': 'The data source which is subtracted from source_A'}]\n""]",1.0,1,0.25,1,0.4,1,1.0,1
49,341,What are the borderless cards available without powerful foils?,simple,filter,card_games,filter for borderless cards,filter,"[""function name:filter\nbase_api: http://127.0.0.1:5200/filter\ndescription: filters a data product based on the provided filterdict, it filters row wise keeping all input columns\nfilter_dict: [{'conditions': 'a dict ith the corresponding columns and their values'}]\nexample: {'condition':{'location':'berlin','year':{'min':2002,'max':2007}}\n"", ""function name:division\nbase_api: http://127.0.0.1:5200/division\ndescription: Calcuates division of multiple data sources\nfilter_dict: [{'source_A': 'The data source which is divided by source_B'}, {'source_B': 'The data source which divides source_A'}]\n"", ""function name:diffrence\nbase_api: http://127.0.0.1:5200/diffrence\ndescription: Calcuates diffrence between multiple data sources\nfilter_dict: [{'source_A': 'The data source from which source_B is subtracted'}, {'source_B': 'The data source which is subtracted from source_A'}]\n"", ""function name:getValues\nbase_api: http://127.0.0.1:5200/getValues\ndescription: Retrieves specififed data values in a list format\nfilter_dict: [{'columns': 'a column on wihich to match'}, {'values': 'a dict with a value to match if None returns the all columns from columns'}]\nexample: filter_dict:{'values':'None','column':'customer_id'}\n""]",1.0,1,0.25,1,0.4,1,1.0,1
50,341,What are the borderless cards available without powerful foils?,simple,filter,card_games,filter for non-foil cards,filter,"[""function name:filter\nbase_api: http://127.0.0.1:5200/filter\ndescription: filters a data product based on the provided filterdict, it filters row wise keeping all input columns\nfilter_dict: [{'conditions': 'a dict ith the corresponding columns and their values'}]\nexample: {'condition':{'location':'berlin','year':{'min':2002,'max':2007}}\n"", ""function name:getValues\nbase_api: http://127.0.0.1:5200/getValues\ndescription: Retrieves specififed data values in a list format\nfilter_dict: [{'columns': 'a column on wihich to match'}, {'values': 'a dict with a value to match if None returns the all columns from columns'}]\nexample: filter_dict:{'values':'None','column':'customer_id'}\n"", ""function name:count\nbase_api: http://127.0.0.1:5200/count\ndescription: counts the occurences of a specific value or values\nfilter_dict: [{'columns': 'a column in which the value to count is present'}, {'value': 'the value to count '}]\n"", 'function name:sortby\nbase_api: http://127.0.0.1:5200/sortby\ndescription: sorts the data based on a the provided columns and either ascending or descending\nfilter_dict: [{\'columns\': \'a column on which the sorting is based on\'}, {\'ascending\': ""\'True\' if the data is sorted ascending, \'False\' for descending""}]\n']",1.0,1,0.25,1,0.4,1,1.0,1
51,341,What are the borderless cards available without powerful foils?,simple,retrieve,card_games,retrieve Core Set Information,retrieve,"[""function name:retrieve\ndescription: retrieves the specified data product, takes the data products name and a list of requested columns as arguments\nfilter_dict: [{'product': 'product url'}]\n"", ""function name:getValues\nbase_api: http://127.0.0.1:5200/getValues\ndescription: Retrieves specififed data values in a list format\nfilter_dict: [{'columns': 'a column on wihich to match'}, {'values': 'a dict with a value to match if None returns the all columns from columns'}]\nexample: filter_dict:{'values':'None','column':'customer_id'}\n"", ""function name:diffrence\nbase_api: http://127.0.0.1:5200/diffrence\ndescription: Calcuates diffrence between multiple data sources\nfilter_dict: [{'source_A': 'The data source from which source_B is subtracted'}, {'source_B': 'The data source which is subtracted from source_A'}]\n"", ""function name:count\nbase_api: http://127.0.0.1:5200/count\ndescription: counts the occurences of a specific value or values\nfilter_dict: [{'columns': 'a column in which the value to count is present'}, {'value': 'the value to count '}]\n""]",1.0,1,0.25,1,0.4,1,1.0,1
52,341,What are the borderless cards available without powerful foils?,simple,combine,card_games,combine results from Magic: The Gathering Card Data and Core Set Information,combine,"[""function name:combine\ndescription: combines to data products via a join\nfilter_dict: [{'columns_left': 'which columns of the first data product to match on'}, {'columns_right': 'which columns of the second data product to match on'}, {'type': 'equal or unequal'}]\n"", ""function name:sum_multiple\nbase_api: http://127.0.0.1:5200/sum_multiple\ndescription: Calcuates summation of multiple data sources\nfilter_dict: [{'source_A': 'The data source which is added to source_B'}, {'source_B': 'The data source which is added to source_A'}]\n"", ""function name:multiplication\nbase_api: http://127.0.0.1:5200/multiplication\ndescription: Calcuates multiplication of multiple data sources\nfilter_dict: [{'source_A': 'The data source which is multiplied with source_B'}, {'source_B': 'The data source which is multiplied with source_A'}]\n"", ""function name:division\nbase_api: http://127.0.0.1:5200/division\ndescription: Calcuates division of multiple data sources\nfilter_dict: [{'source_A': 'The data source which is divided by source_B'}, {'source_B': 'The data source which divides source_A'}]\n""]",1.0,1,0.25,1,0.4,1,1.0,1
53,341,What are the borderless cards available without powerful foils?,simple,retrieve,card_games,retrieve Card Characteristics Dataset,retrieve,"[""function name:retrieve\ndescription: retrieves the specified data product, takes the data products name and a list of requested columns as arguments\nfilter_dict: [{'product': 'product url'}]\n"", ""function name:diffrence\nbase_api: http://127.0.0.1:5200/diffrence\ndescription: Calcuates diffrence between multiple data sources\nfilter_dict: [{'source_A': 'The data source from which source_B is subtracted'}, {'source_B': 'The data source which is subtracted from source_A'}]\n"", ""function name:getValues\nbase_api: http://127.0.0.1:5200/getValues\ndescription: Retrieves specififed data values in a list format\nfilter_dict: [{'columns': 'a column on wihich to match'}, {'values': 'a dict with a value to match if None returns the all columns from columns'}]\nexample: filter_dict:{'values':'None','column':'customer_id'}\n"", ""function name:division\nbase_api: http://127.0.0.1:5200/division\ndescription: Calcuates division of multiple data sources\nfilter_dict: [{'source_A': 'The data source which is divided by source_B'}, {'source_B': 'The data source which divides source_A'}]\n""]",1.0,1,0.25,1,0.4,1,1.0,1
54,341,What are the borderless cards available without powerful foils?,simple,filter,card_games,filter for non-powerful foils,filter,"[""function name:filter\nbase_api: http://127.0.0.1:5200/filter\ndescription: filters a data product based on the provided filterdict, it filters row wise keeping all input columns\nfilter_dict: [{'conditions': 'a dict ith the corresponding columns and their values'}]\nexample: {'condition':{'location':'berlin','year':{'min':2002,'max':2007}}\n"", ""function name:division\nbase_api: http://127.0.0.1:5200/division\ndescription: Calcuates division of multiple data sources\nfilter_dict: [{'source_A': 'The data source which is divided by source_B'}, {'source_B': 'The data source which divides source_A'}]\n"", ""function name:diffrence\nbase_api: http://127.0.0.1:5200/diffrence\ndescription: Calcuates diffrence between multiple data sources\nfilter_dict: [{'source_A': 'The data source from which source_B is subtracted'}, {'source_B': 'The data source which is subtracted from source_A'}]\n"", ""function name:getValues\nbase_api: http://127.0.0.1:5200/getValues\ndescription: Retrieves specififed data values in a list format\nfilter_dict: [{'columns': 'a column on wihich to match'}, {'values': 'a dict with a value to match if None returns the all columns from columns'}]\nexample: filter_dict:{'values':'None','column':'customer_id'}\n""]",1.0,1,0.25,1,0.4,1,1.0,1
55,341,What are the borderless cards available without powerful foils?,simple,combine,card_games,combine results from the previous combination and Card Characteristics Dataset,combine,"[""function name:combine\ndescription: combines to data products via a join\nfilter_dict: [{'columns_left': 'which columns of the first data product to match on'}, {'columns_right': 'which columns of the second data product to match on'}, {'type': 'equal or unequal'}]\n"", ""function name:sum_multiple\nbase_api: http://127.0.0.1:5200/sum_multiple\ndescription: Calcuates summation of multiple data sources\nfilter_dict: [{'source_A': 'The data source which is added to source_B'}, {'source_B': 'The data source which is added to source_A'}]\n"", ""function name:multiplication\nbase_api: http://127.0.0.1:5200/multiplication\ndescription: Calcuates multiplication of multiple data sources\nfilter_dict: [{'source_A': 'The data source which is multiplied with source_B'}, {'source_B': 'The data source which is multiplied with source_A'}]\n"", ""function name:diffrence\nbase_api: http://127.0.0.1:5200/diffrence\ndescription: Calcuates diffrence between multiple data sources\nfilter_dict: [{'source_A': 'The data source from which source_B is subtracted'}, {'source_B': 'The data source which is subtracted from source_A'}]\n""]",1.0,1,0.25,1,0.4,1,1.0,1
56,341,What are the borderless cards available without powerful foils?,simple,returnResult,card_games,return finished product,returnResult,"[""function name:retrieve\ndescription: retrieves the specified data product, takes the data products name and a list of requested columns as arguments\nfilter_dict: [{'product': 'product url'}]\n"", ""function name:combine\ndescription: combines to data products via a join\nfilter_dict: [{'columns_left': 'which columns of the first data product to match on'}, {'columns_right': 'which columns of the second data product to match on'}, {'type': 'equal or unequal'}]\n"", ""function name:filter\nbase_api: http://127.0.0.1:5200/filter\ndescription: filters a data product based on the provided filterdict, it filters row wise keeping all input columns\nfilter_dict: [{'conditions': 'a dict ith the corresponding columns and their values'}]\nexample: {'condition':{'location':'berlin','year':{'min':2002,'max':2007}}\n"", ""function name:returnResult\ndescription: retrieves or extracts  the previously computed data, specified  by the columns in a dataframe\nfilter_dict: [{'columns': 'which columns to retrun/extract'}]\n""]",0.25,1,0.25,1,0.4,1,1.0,1
57,1145,Which top 4 leagues had the most games in the 2015-2016 season?,simple,retrieve,european_football_2,retrieve Match Dataset,retrieve,"[""function name:diffrence\nbase_api: http://127.0.0.1:5200/diffrence\ndescription: Calcuates diffrence between multiple data sources\nfilter_dict: [{'source_A': 'The data source from which source_B is subtracted'}, {'source_B': 'The data source which is subtracted from source_A'}]\n"", ""function name:retrieve\ndescription: retrieves the specified data product, takes the data products name and a list of requested columns as arguments\nfilter_dict: [{'product': 'product url'}]\n"", ""function name:multiplication\nbase_api: http://127.0.0.1:5200/multiplication\ndescription: Calcuates multiplication of multiple data sources\nfilter_dict: [{'source_A': 'The data source which is multiplied with source_B'}, {'source_B': 'The data source which is multiplied with source_A'}]\n"", ""function name:getValues\nbase_api: http://127.0.0.1:5200/getValues\ndescription: Retrieves specififed data values in a list format\nfilter_dict: [{'columns': 'a column on wihich to match'}, {'values': 'a dict with a value to match if None returns the all columns from columns'}]\nexample: filter_dict:{'values':'None','column':'customer_id'}\n""]",0.5,1,0.25,1,0.4,1,1.0,1
58,1145,Which top 4 leagues had the most games in the 2015-2016 season?,simple,filter,european_football_2,filter Match Dataset for the 2015-2016 season,filter,"[""function name:filter\nbase_api: http://127.0.0.1:5200/filter\ndescription: filters a data product based on the provided filterdict, it filters row wise keeping all input columns\nfilter_dict: [{'conditions': 'a dict ith the corresponding columns and their values'}]\nexample: {'condition':{'location':'berlin','year':{'min':2002,'max':2007}}\n"", ""function name:diffrence\nbase_api: http://127.0.0.1:5200/diffrence\ndescription: Calcuates diffrence between multiple data sources\nfilter_dict: [{'source_A': 'The data source from which source_B is subtracted'}, {'source_B': 'The data source which is subtracted from source_A'}]\n"", ""function name:division\nbase_api: http://127.0.0.1:5200/division\ndescription: Calcuates division of multiple data sources\nfilter_dict: [{'source_A': 'The data source which is divided by source_B'}, {'source_B': 'The data source which divides source_A'}]\n"", ""function name:combine\ndescription: combines to data products via a join\nfilter_dict: [{'columns_left': 'which columns of the first data product to match on'}, {'columns_right': 'which columns of the second data product to match on'}, {'type': 'equal or unequal'}]\n""]",1.0,1,0.25,1,0.4,1,1.0,1
59,1145,Which top 4 leagues had the most games in the 2015-2016 season?,simple,count,european_football_2,count the number of games played in each league,count,"[""function name:count\nbase_api: http://127.0.0.1:5200/count\ndescription: counts the occurences of a specific value or values\nfilter_dict: [{'columns': 'a column in which the value to count is present'}, {'value': 'the value to count '}]\n"", ""function name:division\nbase_api: http://127.0.0.1:5200/division\ndescription: Calcuates division of multiple data sources\nfilter_dict: [{'source_A': 'The data source which is divided by source_B'}, {'source_B': 'The data source which divides source_A'}]\n"", ""function name:sum_multiple\nbase_api: http://127.0.0.1:5200/sum_multiple\ndescription: Calcuates summation of multiple data sources\nfilter_dict: [{'source_A': 'The data source which is added to source_B'}, {'source_B': 'The data source which is added to source_A'}]\n"", ""function name:diffrence\nbase_api: http://127.0.0.1:5200/diffrence\ndescription: Calcuates diffrence between multiple data sources\nfilter_dict: [{'source_A': 'The data source from which source_B is subtracted'}, {'source_B': 'The data source which is subtracted from source_A'}]\n""]",1.0,1,0.25,1,0.4,1,1.0,1
60,1145,Which top 4 leagues had the most games in the 2015-2016 season?,simple,retrieve,european_football_2,retrieve League Dataset,retrieve,"[""function name:retrieve\ndescription: retrieves the specified data product, takes the data products name and a list of requested columns as arguments\nfilter_dict: [{'product': 'product url'}]\n"", ""function name:division\nbase_api: http://127.0.0.1:5200/division\ndescription: Calcuates division of multiple data sources\nfilter_dict: [{'source_A': 'The data source which is divided by source_B'}, {'source_B': 'The data source which divides source_A'}]\n"", ""function name:diffrence\nbase_api: http://127.0.0.1:5200/diffrence\ndescription: Calcuates diffrence between multiple data sources\nfilter_dict: [{'source_A': 'The data source from which source_B is subtracted'}, {'source_B': 'The data source which is subtracted from source_A'}]\n"", ""function name:getValues\nbase_api: http://127.0.0.1:5200/getValues\ndescription: Retrieves specififed data values in a list format\nfilter_dict: [{'columns': 'a column on wihich to match'}, {'values': 'a dict with a value to match if None returns the all columns from columns'}]\nexample: filter_dict:{'values':'None','column':'customer_id'}\n""]",1.0,1,0.25,1,0.4,1,1.0,1
61,1145,Which top 4 leagues had the most games in the 2015-2016 season?,simple,combine,european_football_2,combine league names with their corresponding game counts from the Match Dataset,combine,"[""function name:combine\ndescription: combines to data products via a join\nfilter_dict: [{'columns_left': 'which columns of the first data product to match on'}, {'columns_right': 'which columns of the second data product to match on'}, {'type': 'equal or unequal'}]\n"", ""function name:count\nbase_api: http://127.0.0.1:5200/count\ndescription: counts the occurences of a specific value or values\nfilter_dict: [{'columns': 'a column in which the value to count is present'}, {'value': 'the value to count '}]\n"", ""function name:sum\nbase_api: http://127.0.0.1:5200/sum\ndescription: Calcuates the sum of a dataframe based on a list of group_by columns and\nfilter_dict: [{'group_by': 'a list of coulmns in the dataframe, can be None'}, {'columns': 'a list of columns for hicht the sum should be calculated, cant be None'}]\n"", ""function name:sum_multiple\nbase_api: http://127.0.0.1:5200/sum_multiple\ndescription: Calcuates summation of multiple data sources\nfilter_dict: [{'source_A': 'The data source which is added to source_B'}, {'source_B': 'The data source which is added to source_A'}]\n""]",1.0,1,0.25,1,0.4,1,1.0,1
62,1145,Which top 4 leagues had the most games in the 2015-2016 season?,simple,sortby,european_football_2,sort leagues by the number of games and select the top 4,sortby,"['function name:sortby\nbase_api: http://127.0.0.1:5200/sortby\ndescription: sorts the data based on a the provided columns and either ascending or descending\nfilter_dict: [{\'columns\': \'a column on which the sorting is based on\'}, {\'ascending\': ""\'True\' if the data is sorted ascending, \'False\' for descending""}]\n', ""function name:division\nbase_api: http://127.0.0.1:5200/division\ndescription: Calcuates division of multiple data sources\nfilter_dict: [{'source_A': 'The data source which is divided by source_B'}, {'source_B': 'The data source which divides source_A'}]\n"", ""function name:max\nbase_api: http://127.0.0.1:5200/max\ndescription: Retrieves the maximum value for a list of specified columns in a dataframe\nreturn_type: single value\nfilter_dict: [{'columns': 'a list of columns for which the maximum should be retrieved'}, {'rows': 'number of rows to be returned'}]\n"", ""function name:min\nbase_api: http://127.0.0.1:5200/min\ndescription: Retrieves the maximum value for a list of specified columns in a dataframe\nreturn_type: single value\nfilter_dict: [{'columns': 'a list of columns for which the minimum should be retrieved'}, {'rows': 'number of rows to be returned'}]\n""]",1.0,1,0.25,1,0.4,1,1.0,1
63,1145,Which top 4 leagues had the most games in the 2015-2016 season?,simple,returnResult,european_football_2,return finished product,returnResult,"[""function name:retrieve\ndescription: retrieves the specified data product, takes the data products name and a list of requested columns as arguments\nfilter_dict: [{'product': 'product url'}]\n"", ""function name:combine\ndescription: combines to data products via a join\nfilter_dict: [{'columns_left': 'which columns of the first data product to match on'}, {'columns_right': 'which columns of the second data product to match on'}, {'type': 'equal or unequal'}]\n"", ""function name:filter\nbase_api: http://127.0.0.1:5200/filter\ndescription: filters a data product based on the provided filterdict, it filters row wise keeping all input columns\nfilter_dict: [{'conditions': 'a dict ith the corresponding columns and their values'}]\nexample: {'condition':{'location':'berlin','year':{'min':2002,'max':2007}}\n"", ""function name:returnResult\ndescription: retrieves or extracts  the previously computed data, specified  by the columns in a dataframe\nfilter_dict: [{'columns': 'which columns to retrun/extract'}]\n""]",0.25,1,0.25,1,0.4,1,1.0,1
64,1039,Find the average number of long-shot done by Ahmed Samir Farag.,simple,retrieve,european_football_2,retrieve posts dataset,retrieve,"[""function name:retrieve\ndescription: retrieves the specified data product, takes the data products name and a list of requested columns as arguments\nfilter_dict: [{'product': 'product url'}]\n"", ""function name:diffrence\nbase_api: http://127.0.0.1:5200/diffrence\ndescription: Calcuates diffrence between multiple data sources\nfilter_dict: [{'source_A': 'The data source from which source_B is subtracted'}, {'source_B': 'The data source which is subtracted from source_A'}]\n"", ""function name:getValues\nbase_api: http://127.0.0.1:5200/getValues\ndescription: Retrieves specififed data values in a list format\nfilter_dict: [{'columns': 'a column on wihich to match'}, {'values': 'a dict with a value to match if None returns the all columns from columns'}]\nexample: filter_dict:{'values':'None','column':'customer_id'}\n"", ""function name:sum_multiple\nbase_api: http://127.0.0.1:5200/sum_multiple\ndescription: Calcuates summation of multiple data sources\nfilter_dict: [{'source_A': 'The data source which is added to source_B'}, {'source_B': 'The data source which is added to source_A'}]\n""]",1.0,1,0.25,1,0.4,1,1.0,1
65,1039,Find the average number of long-shot done by Ahmed Samir Farag.,simple,retrieve,european_football_2,retrieve Team dataset,retrieve,"[""function name:retrieve\ndescription: retrieves the specified data product, takes the data products name and a list of requested columns as arguments\nfilter_dict: [{'product': 'product url'}]\n"", ""function name:diffrence\nbase_api: http://127.0.0.1:5200/diffrence\ndescription: Calcuates diffrence between multiple data sources\nfilter_dict: [{'source_A': 'The data source from which source_B is subtracted'}, {'source_B': 'The data source which is subtracted from source_A'}]\n"", ""function name:division\nbase_api: http://127.0.0.1:5200/division\ndescription: Calcuates division of multiple data sources\nfilter_dict: [{'source_A': 'The data source which is divided by source_B'}, {'source_B': 'The data source which divides source_A'}]\n"", ""function name:getValues\nbase_api: http://127.0.0.1:5200/getValues\ndescription: Retrieves specififed data values in a list format\nfilter_dict: [{'columns': 'a column on wihich to match'}, {'values': 'a dict with a value to match if None returns the all columns from columns'}]\nexample: filter_dict:{'values':'None','column':'customer_id'}\n""]",1.0,1,0.25,1,0.4,1,1.0,1
66,1039,Find the average number of long-shot done by Ahmed Samir Farag.,simple,retrieve,european_football_2,retrieve constructorStandings dataset,retrieve,"[""function name:retrieve\ndescription: retrieves the specified data product, takes the data products name and a list of requested columns as arguments\nfilter_dict: [{'product': 'product url'}]\n"", 'function name:sortby\nbase_api: http://127.0.0.1:5200/sortby\ndescription: sorts the data based on a the provided columns and either ascending or descending\nfilter_dict: [{\'columns\': \'a column on which the sorting is based on\'}, {\'ascending\': ""\'True\' if the data is sorted ascending, \'False\' for descending""}]\n', ""function name:returnResult\ndescription: retrieves or extracts  the previously computed data, specified  by the columns in a dataframe\nfilter_dict: [{'columns': 'which columns to retrun/extract'}]\n"", ""function name:diffrence\nbase_api: http://127.0.0.1:5200/diffrence\ndescription: Calcuates diffrence between multiple data sources\nfilter_dict: [{'source_A': 'The data source from which source_B is subtracted'}, {'source_B': 'The data source which is subtracted from source_A'}]\n""]",1.0,1,0.25,1,0.4,1,1.0,1
68,1039,Find the average number of long-shot done by Ahmed Samir Farag.,simple,returnResult,european_football_2,return finished product,returnResult,"[""function name:retrieve\ndescription: retrieves the specified data product, takes the data products name and a list of requested columns as arguments\nfilter_dict: [{'product': 'product url'}]\n"", ""function name:combine\ndescription: combines to data products via a join\nfilter_dict: [{'columns_left': 'which columns of the first data product to match on'}, {'columns_right': 'which columns of the second data product to match on'}, {'type': 'equal or unequal'}]\n"", ""function name:filter\nbase_api: http://127.0.0.1:5200/filter\ndescription: filters a data product based on the provided filterdict, it filters row wise keeping all input columns\nfilter_dict: [{'conditions': 'a dict ith the corresponding columns and their values'}]\nexample: {'condition':{'location':'berlin','year':{'min':2002,'max':2007}}\n"", ""function name:returnResult\ndescription: retrieves or extracts  the previously computed data, specified  by the columns in a dataframe\nfilter_dict: [{'columns': 'which columns to retrun/extract'}]\n""]",0.25,1,0.25,1,0.4,1,1.0,1
69,1251,How many patients with an Ig G higher than normal?,simple,retrieve,thrombosis_prediction,retrieve Examination Dataset,retrieve,"[""function name:retrieve\ndescription: retrieves the specified data product, takes the data products name and a list of requested columns as arguments\nfilter_dict: [{'product': 'product url'}]\n"", ""function name:diffrence\nbase_api: http://127.0.0.1:5200/diffrence\ndescription: Calcuates diffrence between multiple data sources\nfilter_dict: [{'source_A': 'The data source from which source_B is subtracted'}, {'source_B': 'The data source which is subtracted from source_A'}]\n"", ""function name:returnResult\ndescription: retrieves or extracts  the previously computed data, specified  by the columns in a dataframe\nfilter_dict: [{'columns': 'which columns to retrun/extract'}]\n"", ""function name:getValues\nbase_api: http://127.0.0.1:5200/getValues\ndescription: Retrieves specififed data values in a list format\nfilter_dict: [{'columns': 'a column on wihich to match'}, {'values': 'a dict with a value to match if None returns the all columns from columns'}]\nexample: filter_dict:{'values':'None','column':'customer_id'}\n""]",1.0,1,0.25,1,0.4,1,1.0,1
70,1251,How many patients with an Ig G higher than normal?,simple,filter,thrombosis_prediction,filter for patients with IgG levels higher than normal,filter,"[""function name:filter\nbase_api: http://127.0.0.1:5200/filter\ndescription: filters a data product based on the provided filterdict, it filters row wise keeping all input columns\nfilter_dict: [{'conditions': 'a dict ith the corresponding columns and their values'}]\nexample: {'condition':{'location':'berlin','year':{'min':2002,'max':2007}}\n"", ""function name:getValues\nbase_api: http://127.0.0.1:5200/getValues\ndescription: Retrieves specififed data values in a list format\nfilter_dict: [{'columns': 'a column on wihich to match'}, {'values': 'a dict with a value to match if None returns the all columns from columns'}]\nexample: filter_dict:{'values':'None','column':'customer_id'}\n"", ""function name:count\nbase_api: http://127.0.0.1:5200/count\ndescription: counts the occurences of a specific value or values\nfilter_dict: [{'columns': 'a column in which the value to count is present'}, {'value': 'the value to count '}]\n"", ""function name:diffrence\nbase_api: http://127.0.0.1:5200/diffrence\ndescription: Calcuates diffrence between multiple data sources\nfilter_dict: [{'source_A': 'The data source from which source_B is subtracted'}, {'source_B': 'The data source which is subtracted from source_A'}]\n""]",1.0,1,0.25,1,0.4,1,1.0,1
71,1251,How many patients with an Ig G higher than normal?,simple,count,thrombosis_prediction,count the number of patients with elevated IgG levels,count,"[""function name:count\nbase_api: http://127.0.0.1:5200/count\ndescription: counts the occurences of a specific value or values\nfilter_dict: [{'columns': 'a column in which the value to count is present'}, {'value': 'the value to count '}]\n"", ""function name:sum_multiple\nbase_api: http://127.0.0.1:5200/sum_multiple\ndescription: Calcuates summation of multiple data sources\nfilter_dict: [{'source_A': 'The data source which is added to source_B'}, {'source_B': 'The data source which is added to source_A'}]\n"", ""function name:sum\nbase_api: http://127.0.0.1:5200/sum\ndescription: Calcuates the sum of a dataframe based on a list of group_by columns and\nfilter_dict: [{'group_by': 'a list of coulmns in the dataframe, can be None'}, {'columns': 'a list of columns for hicht the sum should be calculated, cant be None'}]\n"", ""function name:multiplication\nbase_api: http://127.0.0.1:5200/multiplication\ndescription: Calcuates multiplication of multiple data sources\nfilter_dict: [{'source_A': 'The data source which is multiplied with source_B'}, {'source_B': 'The data source which is multiplied with source_A'}]\n""]",1.0,1,0.25,1,0.4,1,1.0,1
72,1251,How many patients with an Ig G higher than normal?,simple,retrieve,thrombosis_prediction,retrieve Member Dataset,retrieve,"[""function name:retrieve\ndescription: retrieves the specified data product, takes the data products name and a list of requested columns as arguments\nfilter_dict: [{'product': 'product url'}]\n"", ""function name:getValues\nbase_api: http://127.0.0.1:5200/getValues\ndescription: Retrieves specififed data values in a list format\nfilter_dict: [{'columns': 'a column on wihich to match'}, {'values': 'a dict with a value to match if None returns the all columns from columns'}]\nexample: filter_dict:{'values':'None','column':'customer_id'}\n"", ""function name:diffrence\nbase_api: http://127.0.0.1:5200/diffrence\ndescription: Calcuates diffrence between multiple data sources\nfilter_dict: [{'source_A': 'The data source from which source_B is subtracted'}, {'source_B': 'The data source which is subtracted from source_A'}]\n"", ""function name:returnResult\ndescription: retrieves or extracts  the previously computed data, specified  by the columns in a dataframe\nfilter_dict: [{'columns': 'which columns to retrun/extract'}]\n""]",1.0,1,0.25,1,0.4,1,1.0,1
73,1251,How many patients with an Ig G higher than normal?,simple,combine,thrombosis_prediction,combine patient counts from Examination Dataset with Member Dataset for demographic context,combine,"[""function name:combine\ndescription: combines to data products via a join\nfilter_dict: [{'columns_left': 'which columns of the first data product to match on'}, {'columns_right': 'which columns of the second data product to match on'}, {'type': 'equal or unequal'}]\n"", ""function name:sum\nbase_api: http://127.0.0.1:5200/sum\ndescription: Calcuates the sum of a dataframe based on a list of group_by columns and\nfilter_dict: [{'group_by': 'a list of coulmns in the dataframe, can be None'}, {'columns': 'a list of columns for hicht the sum should be calculated, cant be None'}]\n"", ""function name:sum_multiple\nbase_api: http://127.0.0.1:5200/sum_multiple\ndescription: Calcuates summation of multiple data sources\nfilter_dict: [{'source_A': 'The data source which is added to source_B'}, {'source_B': 'The data source which is added to source_A'}]\n"", ""function name:mean\nbase_api: http://127.0.0.1:5200/sum\ndescription: Calcuates the mean of a dataframe based on a list of group_by columns and\nfilter_dict: [{'group_by': 'a list of coulmns in the dataframe, can be None'}, {'columns': 'a list of columns for hicht the mean should be calculated, cant be None'}]\n""]",1.0,1,0.25,1,0.4,1,1.0,1
74,1251,How many patients with an Ig G higher than normal?,simple,retrieve,thrombosis_prediction,retrieve Gender Dataset,retrieve,"[""function name:retrieve\ndescription: retrieves the specified data product, takes the data products name and a list of requested columns as arguments\nfilter_dict: [{'product': 'product url'}]\n"", ""function name:diffrence\nbase_api: http://127.0.0.1:5200/diffrence\ndescription: Calcuates diffrence between multiple data sources\nfilter_dict: [{'source_A': 'The data source from which source_B is subtracted'}, {'source_B': 'The data source which is subtracted from source_A'}]\n"", ""function name:getValues\nbase_api: http://127.0.0.1:5200/getValues\ndescription: Retrieves specififed data values in a list format\nfilter_dict: [{'columns': 'a column on wihich to match'}, {'values': 'a dict with a value to match if None returns the all columns from columns'}]\nexample: filter_dict:{'values':'None','column':'customer_id'}\n"", ""function name:multiplication\nbase_api: http://127.0.0.1:5200/multiplication\ndescription: Calcuates multiplication of multiple data sources\nfilter_dict: [{'source_A': 'The data source which is multiplied with source_B'}, {'source_B': 'The data source which is multiplied with source_A'}]\n""]",1.0,1,0.25,1,0.4,1,1.0,1
75,1251,How many patients with an Ig G higher than normal?,simple,combine,thrombosis_prediction,combine gender distribution from Gender Dataset with patient counts for additional insights,combine,"[""function name:combine\ndescription: combines to data products via a join\nfilter_dict: [{'columns_left': 'which columns of the first data product to match on'}, {'columns_right': 'which columns of the second data product to match on'}, {'type': 'equal or unequal'}]\n"", ""function name:sum_multiple\nbase_api: http://127.0.0.1:5200/sum_multiple\ndescription: Calcuates summation of multiple data sources\nfilter_dict: [{'source_A': 'The data source which is added to source_B'}, {'source_B': 'The data source which is added to source_A'}]\n"", ""function name:count\nbase_api: http://127.0.0.1:5200/count\ndescription: counts the occurences of a specific value or values\nfilter_dict: [{'columns': 'a column in which the value to count is present'}, {'value': 'the value to count '}]\n"", ""function name:mean\nbase_api: http://127.0.0.1:5200/sum\ndescription: Calcuates the mean of a dataframe based on a list of group_by columns and\nfilter_dict: [{'group_by': 'a list of coulmns in the dataframe, can be None'}, {'columns': 'a list of columns for hicht the mean should be calculated, cant be None'}]\n""]",1.0,1,0.25,1,0.4,1,1.0,1
76,1251,How many patients with an Ig G higher than normal?,simple,returnResult,thrombosis_prediction,return finished product,returnResult,"[""function name:retrieve\ndescription: retrieves the specified data product, takes the data products name and a list of requested columns as arguments\nfilter_dict: [{'product': 'product url'}]\n"", ""function name:combine\ndescription: combines to data products via a join\nfilter_dict: [{'columns_left': 'which columns of the first data product to match on'}, {'columns_right': 'which columns of the second data product to match on'}, {'type': 'equal or unequal'}]\n"", ""function name:filter\nbase_api: http://127.0.0.1:5200/filter\ndescription: filters a data product based on the provided filterdict, it filters row wise keeping all input columns\nfilter_dict: [{'conditions': 'a dict ith the corresponding columns and their values'}]\nexample: {'condition':{'location':'berlin','year':{'min':2002,'max':2007}}\n"", ""function name:returnResult\ndescription: retrieves or extracts  the previously computed data, specified  by the columns in a dataframe\nfilter_dict: [{'columns': 'which columns to retrun/extract'}]\n""]",0.25,1,0.25,1,0.4,1,1.0,1
77,537,How many posts does the user csgillespie own?,simple,retrieve,codebase_community,retrieve posts data,retrieve,"[""function name:retrieve\ndescription: retrieves the specified data product, takes the data products name and a list of requested columns as arguments\nfilter_dict: [{'product': 'product url'}]\n"", ""function name:getValues\nbase_api: http://127.0.0.1:5200/getValues\ndescription: Retrieves specififed data values in a list format\nfilter_dict: [{'columns': 'a column on wihich to match'}, {'values': 'a dict with a value to match if None returns the all columns from columns'}]\nexample: filter_dict:{'values':'None','column':'customer_id'}\n"", ""function name:diffrence\nbase_api: http://127.0.0.1:5200/diffrence\ndescription: Calcuates diffrence between multiple data sources\nfilter_dict: [{'source_A': 'The data source from which source_B is subtracted'}, {'source_B': 'The data source which is subtracted from source_A'}]\n"", ""function name:sum_multiple\nbase_api: http://127.0.0.1:5200/sum_multiple\ndescription: Calcuates summation of multiple data sources\nfilter_dict: [{'source_A': 'The data source which is added to source_B'}, {'source_B': 'The data source which is added to source_A'}]\n""]",1.0,1,0.25,1,0.4,1,1.0,1
78,537,How many posts does the user csgillespie own?,simple,filter,codebase_community,filter posts data for OwnerUserId corresponding to csgillespie,filter,"[""function name:filter\nbase_api: http://127.0.0.1:5200/filter\ndescription: filters a data product based on the provided filterdict, it filters row wise keeping all input columns\nfilter_dict: [{'conditions': 'a dict ith the corresponding columns and their values'}]\nexample: {'condition':{'location':'berlin','year':{'min':2002,'max':2007}}\n"", 'function name:sortby\nbase_api: http://127.0.0.1:5200/sortby\ndescription: sorts the data based on a the provided columns and either ascending or descending\nfilter_dict: [{\'columns\': \'a column on which the sorting is based on\'}, {\'ascending\': ""\'True\' if the data is sorted ascending, \'False\' for descending""}]\n', ""function name:division\nbase_api: http://127.0.0.1:5200/division\ndescription: Calcuates division of multiple data sources\nfilter_dict: [{'source_A': 'The data source which is divided by source_B'}, {'source_B': 'The data source which divides source_A'}]\n"", ""function name:getValues\nbase_api: http://127.0.0.1:5200/getValues\ndescription: Retrieves specififed data values in a list format\nfilter_dict: [{'columns': 'a column on wihich to match'}, {'values': 'a dict with a value to match if None returns the all columns from columns'}]\nexample: filter_dict:{'values':'None','column':'customer_id'}\n""]",1.0,1,0.25,1,0.4,1,1.0,1
79,537,How many posts does the user csgillespie own?,simple,count,codebase_community,count the number of posts from filtered posts data,count,"[""function name:count\nbase_api: http://127.0.0.1:5200/count\ndescription: counts the occurences of a specific value or values\nfilter_dict: [{'columns': 'a column in which the value to count is present'}, {'value': 'the value to count '}]\n"", ""function name:sum_multiple\nbase_api: http://127.0.0.1:5200/sum_multiple\ndescription: Calcuates summation of multiple data sources\nfilter_dict: [{'source_A': 'The data source which is added to source_B'}, {'source_B': 'The data source which is added to source_A'}]\n"", ""function name:diffrence\nbase_api: http://127.0.0.1:5200/diffrence\ndescription: Calcuates diffrence between multiple data sources\nfilter_dict: [{'source_A': 'The data source from which source_B is subtracted'}, {'source_B': 'The data source which is subtracted from source_A'}]\n"", ""function name:filter\nbase_api: http://127.0.0.1:5200/filter\ndescription: filters a data product based on the provided filterdict, it filters row wise keeping all input columns\nfilter_dict: [{'conditions': 'a dict ith the corresponding columns and their values'}]\nexample: {'condition':{'location':'berlin','year':{'min':2002,'max':2007}}\n""]",1.0,1,0.25,1,0.4,1,1.0,1
80,537,How many posts does the user csgillespie own?,simple,retrieve,codebase_community,retrieve postHistory data,retrieve,"[""function name:retrieve\ndescription: retrieves the specified data product, takes the data products name and a list of requested columns as arguments\nfilter_dict: [{'product': 'product url'}]\n"", ""function name:getValues\nbase_api: http://127.0.0.1:5200/getValues\ndescription: Retrieves specififed data values in a list format\nfilter_dict: [{'columns': 'a column on wihich to match'}, {'values': 'a dict with a value to match if None returns the all columns from columns'}]\nexample: filter_dict:{'values':'None','column':'customer_id'}\n"", ""function name:returnResult\ndescription: retrieves or extracts  the previously computed data, specified  by the columns in a dataframe\nfilter_dict: [{'columns': 'which columns to retrun/extract'}]\n"", ""function name:diffrence\nbase_api: http://127.0.0.1:5200/diffrence\ndescription: Calcuates diffrence between multiple data sources\nfilter_dict: [{'source_A': 'The data source from which source_B is subtracted'}, {'source_B': 'The data source which is subtracted from source_A'}]\n""]",1.0,1,0.25,1,0.4,1,1.0,1
81,537,How many posts does the user csgillespie own?,simple,filter,codebase_community,filter postHistory data for UserId corresponding to csgillespie,filter,"[""function name:filter\nbase_api: http://127.0.0.1:5200/filter\ndescription: filters a data product based on the provided filterdict, it filters row wise keeping all input columns\nfilter_dict: [{'conditions': 'a dict ith the corresponding columns and their values'}]\nexample: {'condition':{'location':'berlin','year':{'min':2002,'max':2007}}\n"", ""function name:getValues\nbase_api: http://127.0.0.1:5200/getValues\ndescription: Retrieves specififed data values in a list format\nfilter_dict: [{'columns': 'a column on wihich to match'}, {'values': 'a dict with a value to match if None returns the all columns from columns'}]\nexample: filter_dict:{'values':'None','column':'customer_id'}\n"", 'function name:sortby\nbase_api: http://127.0.0.1:5200/sortby\ndescription: sorts the data based on a the provided columns and either ascending or descending\nfilter_dict: [{\'columns\': \'a column on which the sorting is based on\'}, {\'ascending\': ""\'True\' if the data is sorted ascending, \'False\' for descending""}]\n', ""function name:diffrence\nbase_api: http://127.0.0.1:5200/diffrence\ndescription: Calcuates diffrence between multiple data sources\nfilter_dict: [{'source_A': 'The data source from which source_B is subtracted'}, {'source_B': 'The data source which is subtracted from source_A'}]\n""]",1.0,1,0.25,1,0.4,1,1.0,1
82,537,How many posts does the user csgillespie own?,simple,count,codebase_community,count the number of posts from filtered postHistory data,count,"[""function name:count\nbase_api: http://127.0.0.1:5200/count\ndescription: counts the occurences of a specific value or values\nfilter_dict: [{'columns': 'a column in which the value to count is present'}, {'value': 'the value to count '}]\n"", ""function name:sum_multiple\nbase_api: http://127.0.0.1:5200/sum_multiple\ndescription: Calcuates summation of multiple data sources\nfilter_dict: [{'source_A': 'The data source which is added to source_B'}, {'source_B': 'The data source which is added to source_A'}]\n"", ""function name:diffrence\nbase_api: http://127.0.0.1:5200/diffrence\ndescription: Calcuates diffrence between multiple data sources\nfilter_dict: [{'source_A': 'The data source from which source_B is subtracted'}, {'source_B': 'The data source which is subtracted from source_A'}]\n"", ""function name:filter\nbase_api: http://127.0.0.1:5200/filter\ndescription: filters a data product based on the provided filterdict, it filters row wise keeping all input columns\nfilter_dict: [{'conditions': 'a dict ith the corresponding columns and their values'}]\nexample: {'condition':{'location':'berlin','year':{'min':2002,'max':2007}}\n""]",1.0,1,0.25,1,0.4,1,1.0,1
83,537,How many posts does the user csgillespie own?,simple,combine,codebase_community,combine counts from posts and postHistory datasets,sum_multiple,"[""function name:count\nbase_api: http://127.0.0.1:5200/count\ndescription: counts the occurences of a specific value or values\nfilter_dict: [{'columns': 'a column in which the value to count is present'}, {'value': 'the value to count '}]\n"", ""function name:sum\nbase_api: http://127.0.0.1:5200/sum\ndescription: Calcuates the sum of a dataframe based on a list of group_by columns and\nfilter_dict: [{'group_by': 'a list of coulmns in the dataframe, can be None'}, {'columns': 'a list of columns for hicht the sum should be calculated, cant be None'}]\n"", ""function name:sum_multiple\nbase_api: http://127.0.0.1:5200/sum_multiple\ndescription: Calcuates summation of multiple data sources\nfilter_dict: [{'source_A': 'The data source which is added to source_B'}, {'source_B': 'The data source which is added to source_A'}]\n"", ""function name:mean\nbase_api: http://127.0.0.1:5200/sum\ndescription: Calcuates the mean of a dataframe based on a list of group_by columns and\nfilter_dict: [{'group_by': 'a list of coulmns in the dataframe, can be None'}, {'columns': 'a list of columns for hicht the mean should be calculated, cant be None'}]\n""]",0.0,0,0.0,0,0.0,0,0.0,0
84,537,How many posts does the user csgillespie own?,simple,returnResult,codebase_community,return finished product,returnResult,"[""function name:retrieve\ndescription: retrieves the specified data product, takes the data products name and a list of requested columns as arguments\nfilter_dict: [{'product': 'product url'}]\n"", ""function name:combine\ndescription: combines to data products via a join\nfilter_dict: [{'columns_left': 'which columns of the first data product to match on'}, {'columns_right': 'which columns of the second data product to match on'}, {'type': 'equal or unequal'}]\n"", ""function name:filter\nbase_api: http://127.0.0.1:5200/filter\ndescription: filters a data product based on the provided filterdict, it filters row wise keeping all input columns\nfilter_dict: [{'conditions': 'a dict ith the corresponding columns and their values'}]\nexample: {'condition':{'location':'berlin','year':{'min':2002,'max':2007}}\n"", ""function name:returnResult\ndescription: retrieves or extracts  the previously computed data, specified  by the columns in a dataframe\nfilter_dict: [{'columns': 'which columns to retrun/extract'}]\n""]",0.25,1,0.25,1,0.4,1,1.0,1
85,1331,What is the amount of the funds that the Vice President received?,simple,retrieve,student_club,retrieve Member Dataset,retrieve,"[""function name:retrieve\ndescription: retrieves the specified data product, takes the data products name and a list of requested columns as arguments\nfilter_dict: [{'product': 'product url'}]\n"", ""function name:getValues\nbase_api: http://127.0.0.1:5200/getValues\ndescription: Retrieves specififed data values in a list format\nfilter_dict: [{'columns': 'a column on wihich to match'}, {'values': 'a dict with a value to match if None returns the all columns from columns'}]\nexample: filter_dict:{'values':'None','column':'customer_id'}\n"", ""function name:diffrence\nbase_api: http://127.0.0.1:5200/diffrence\ndescription: Calcuates diffrence between multiple data sources\nfilter_dict: [{'source_A': 'The data source from which source_B is subtracted'}, {'source_B': 'The data source which is subtracted from source_A'}]\n"", ""function name:returnResult\ndescription: retrieves or extracts  the previously computed data, specified  by the columns in a dataframe\nfilter_dict: [{'columns': 'which columns to retrun/extract'}]\n""]",1.0,1,0.25,1,0.4,1,1.0,1
86,1331,What is the amount of the funds that the Vice President received?,simple,filter,student_club,filter for the Vice President,filter,"[""function name:filter\nbase_api: http://127.0.0.1:5200/filter\ndescription: filters a data product based on the provided filterdict, it filters row wise keeping all input columns\nfilter_dict: [{'conditions': 'a dict ith the corresponding columns and their values'}]\nexample: {'condition':{'location':'berlin','year':{'min':2002,'max':2007}}\n"", ""function name:division\nbase_api: http://127.0.0.1:5200/division\ndescription: Calcuates division of multiple data sources\nfilter_dict: [{'source_A': 'The data source which is divided by source_B'}, {'source_B': 'The data source which divides source_A'}]\n"", ""function name:count\nbase_api: http://127.0.0.1:5200/count\ndescription: counts the occurences of a specific value or values\nfilter_dict: [{'columns': 'a column in which the value to count is present'}, {'value': 'the value to count '}]\n"", ""function name:getValues\nbase_api: http://127.0.0.1:5200/getValues\ndescription: Retrieves specififed data values in a list format\nfilter_dict: [{'columns': 'a column on wihich to match'}, {'values': 'a dict with a value to match if None returns the all columns from columns'}]\nexample: filter_dict:{'values':'None','column':'customer_id'}\n""]",1.0,1,0.25,1,0.4,1,1.0,1
87,1331,What is the amount of the funds that the Vice President received?,simple,retrieve,student_club,retrieve Income Dataset,retrieve,"[""function name:retrieve\ndescription: retrieves the specified data product, takes the data products name and a list of requested columns as arguments\nfilter_dict: [{'product': 'product url'}]\n"", ""function name:returnResult\ndescription: retrieves or extracts  the previously computed data, specified  by the columns in a dataframe\nfilter_dict: [{'columns': 'which columns to retrun/extract'}]\n"", ""function name:diffrence\nbase_api: http://127.0.0.1:5200/diffrence\ndescription: Calcuates diffrence between multiple data sources\nfilter_dict: [{'source_A': 'The data source from which source_B is subtracted'}, {'source_B': 'The data source which is subtracted from source_A'}]\n"", ""function name:getValues\nbase_api: http://127.0.0.1:5200/getValues\ndescription: Retrieves specififed data values in a list format\nfilter_dict: [{'columns': 'a column on wihich to match'}, {'values': 'a dict with a value to match if None returns the all columns from columns'}]\nexample: filter_dict:{'values':'None','column':'customer_id'}\n""]",1.0,1,0.25,1,0.4,1,1.0,1
88,1331,What is the amount of the funds that the Vice President received?,simple,filter,student_club,filter for transactions linked to the Vice President,filter,"[""function name:filter\nbase_api: http://127.0.0.1:5200/filter\ndescription: filters a data product based on the provided filterdict, it filters row wise keeping all input columns\nfilter_dict: [{'conditions': 'a dict ith the corresponding columns and their values'}]\nexample: {'condition':{'location':'berlin','year':{'min':2002,'max':2007}}\n"", ""function name:count\nbase_api: http://127.0.0.1:5200/count\ndescription: counts the occurences of a specific value or values\nfilter_dict: [{'columns': 'a column in which the value to count is present'}, {'value': 'the value to count '}]\n"", ""function name:division\nbase_api: http://127.0.0.1:5200/division\ndescription: Calcuates division of multiple data sources\nfilter_dict: [{'source_A': 'The data source which is divided by source_B'}, {'source_B': 'The data source which divides source_A'}]\n"", 'function name:sortby\nbase_api: http://127.0.0.1:5200/sortby\ndescription: sorts the data based on a the provided columns and either ascending or descending\nfilter_dict: [{\'columns\': \'a column on which the sorting is based on\'}, {\'ascending\': ""\'True\' if the data is sorted ascending, \'False\' for descending""}]\n']",1.0,1,0.25,1,0.4,1,1.0,1
89,1331,What is the amount of the funds that the Vice President received?,simple,retrieve,student_club,retrieve Order Dataset,retrieve,"[""function name:retrieve\ndescription: retrieves the specified data product, takes the data products name and a list of requested columns as arguments\nfilter_dict: [{'product': 'product url'}]\n"", ""function name:diffrence\nbase_api: http://127.0.0.1:5200/diffrence\ndescription: Calcuates diffrence between multiple data sources\nfilter_dict: [{'source_A': 'The data source from which source_B is subtracted'}, {'source_B': 'The data source which is subtracted from source_A'}]\n"", 'function name:sortby\nbase_api: http://127.0.0.1:5200/sortby\ndescription: sorts the data based on a the provided columns and either ascending or descending\nfilter_dict: [{\'columns\': \'a column on which the sorting is based on\'}, {\'ascending\': ""\'True\' if the data is sorted ascending, \'False\' for descending""}]\n', ""function name:getValues\nbase_api: http://127.0.0.1:5200/getValues\ndescription: Retrieves specififed data values in a list format\nfilter_dict: [{'columns': 'a column on wihich to match'}, {'values': 'a dict with a value to match if None returns the all columns from columns'}]\nexample: filter_dict:{'values':'None','column':'customer_id'}\n""]",1.0,1,0.25,1,0.4,1,1.0,1
90,1331,What is the amount of the funds that the Vice President received?,simple,filter,student_club,filter for transactions linked to the Vice President,filter,"[""function name:filter\nbase_api: http://127.0.0.1:5200/filter\ndescription: filters a data product based on the provided filterdict, it filters row wise keeping all input columns\nfilter_dict: [{'conditions': 'a dict ith the corresponding columns and their values'}]\nexample: {'condition':{'location':'berlin','year':{'min':2002,'max':2007}}\n"", ""function name:count\nbase_api: http://127.0.0.1:5200/count\ndescription: counts the occurences of a specific value or values\nfilter_dict: [{'columns': 'a column in which the value to count is present'}, {'value': 'the value to count '}]\n"", ""function name:division\nbase_api: http://127.0.0.1:5200/division\ndescription: Calcuates division of multiple data sources\nfilter_dict: [{'source_A': 'The data source which is divided by source_B'}, {'source_B': 'The data source which divides source_A'}]\n"", 'function name:sortby\nbase_api: http://127.0.0.1:5200/sortby\ndescription: sorts the data based on a the provided columns and either ascending or descending\nfilter_dict: [{\'columns\': \'a column on which the sorting is based on\'}, {\'ascending\': ""\'True\' if the data is sorted ascending, \'False\' for descending""}]\n']",1.0,1,0.25,1,0.4,1,1.0,1
91,1331,What is the amount of the funds that the Vice President received?,simple,combine,student_club,combine amounts from Income Dataset and Order Dataset,combine,"[""function name:combine\ndescription: combines to data products via a join\nfilter_dict: [{'columns_left': 'which columns of the first data product to match on'}, {'columns_right': 'which columns of the second data product to match on'}, {'type': 'equal or unequal'}]\n"", ""function name:sum\nbase_api: http://127.0.0.1:5200/sum\ndescription: Calcuates the sum of a dataframe based on a list of group_by columns and\nfilter_dict: [{'group_by': 'a list of coulmns in the dataframe, can be None'}, {'columns': 'a list of columns for hicht the sum should be calculated, cant be None'}]\n"", ""function name:sum_multiple\nbase_api: http://127.0.0.1:5200/sum_multiple\ndescription: Calcuates summation of multiple data sources\nfilter_dict: [{'source_A': 'The data source which is added to source_B'}, {'source_B': 'The data source which is added to source_A'}]\n"", ""function name:diffrence\nbase_api: http://127.0.0.1:5200/diffrence\ndescription: Calcuates diffrence between multiple data sources\nfilter_dict: [{'source_A': 'The data source from which source_B is subtracted'}, {'source_B': 'The data source which is subtracted from source_A'}]\n""]",1.0,1,0.25,1,0.4,1,1.0,1
92,1331,What is the amount of the funds that the Vice President received?,simple,returnResult,student_club,return finished product,returnResult,"[""function name:retrieve\ndescription: retrieves the specified data product, takes the data products name and a list of requested columns as arguments\nfilter_dict: [{'product': 'product url'}]\n"", ""function name:combine\ndescription: combines to data products via a join\nfilter_dict: [{'columns_left': 'which columns of the first data product to match on'}, {'columns_right': 'which columns of the second data product to match on'}, {'type': 'equal or unequal'}]\n"", ""function name:filter\nbase_api: http://127.0.0.1:5200/filter\ndescription: filters a data product based on the provided filterdict, it filters row wise keeping all input columns\nfilter_dict: [{'conditions': 'a dict ith the corresponding columns and their values'}]\nexample: {'condition':{'location':'berlin','year':{'min':2002,'max':2007}}\n"", ""function name:returnResult\ndescription: retrieves or extracts  the previously computed data, specified  by the columns in a dataframe\nfilter_dict: [{'columns': 'which columns to retrun/extract'}]\n""]",0.25,1,0.25,1,0.4,1,1.0,1
93,1344,What was the notes of the fundraising on 2019/9/14?,simple,retrieve,student_club,retrieve income dataset,retrieve,"[""function name:retrieve\ndescription: retrieves the specified data product, takes the data products name and a list of requested columns as arguments\nfilter_dict: [{'product': 'product url'}]\n"", ""function name:returnResult\ndescription: retrieves or extracts  the previously computed data, specified  by the columns in a dataframe\nfilter_dict: [{'columns': 'which columns to retrun/extract'}]\n"", ""function name:diffrence\nbase_api: http://127.0.0.1:5200/diffrence\ndescription: Calcuates diffrence between multiple data sources\nfilter_dict: [{'source_A': 'The data source from which source_B is subtracted'}, {'source_B': 'The data source which is subtracted from source_A'}]\n"", ""function name:getValues\nbase_api: http://127.0.0.1:5200/getValues\ndescription: Retrieves specififed data values in a list format\nfilter_dict: [{'columns': 'a column on wihich to match'}, {'values': 'a dict with a value to match if None returns the all columns from columns'}]\nexample: filter_dict:{'values':'None','column':'customer_id'}\n""]",1.0,1,0.25,1,0.4,1,1.0,1
94,1344,What was the notes of the fundraising on 2019/9/14?,simple,filter,student_club,filter for entries on date 2019/9/14,filter,"[""function name:filter\nbase_api: http://127.0.0.1:5200/filter\ndescription: filters a data product based on the provided filterdict, it filters row wise keeping all input columns\nfilter_dict: [{'conditions': 'a dict ith the corresponding columns and their values'}]\nexample: {'condition':{'location':'berlin','year':{'min':2002,'max':2007}}\n"", ""function name:count\nbase_api: http://127.0.0.1:5200/count\ndescription: counts the occurences of a specific value or values\nfilter_dict: [{'columns': 'a column in which the value to count is present'}, {'value': 'the value to count '}]\n"", 'function name:sortby\nbase_api: http://127.0.0.1:5200/sortby\ndescription: sorts the data based on a the provided columns and either ascending or descending\nfilter_dict: [{\'columns\': \'a column on which the sorting is based on\'}, {\'ascending\': ""\'True\' if the data is sorted ascending, \'False\' for descending""}]\n', ""function name:diffrence\nbase_api: http://127.0.0.1:5200/diffrence\ndescription: Calcuates diffrence between multiple data sources\nfilter_dict: [{'source_A': 'The data source from which source_B is subtracted'}, {'source_B': 'The data source which is subtracted from source_A'}]\n""]",1.0,1,0.25,1,0.4,1,1.0,1
96,1344,What was the notes of the fundraising on 2019/9/14?,simple,retrieve,student_club,retrieve budget dataset,retrieve,"[""function name:retrieve\ndescription: retrieves the specified data product, takes the data products name and a list of requested columns as arguments\nfilter_dict: [{'product': 'product url'}]\n"", ""function name:diffrence\nbase_api: http://127.0.0.1:5200/diffrence\ndescription: Calcuates diffrence between multiple data sources\nfilter_dict: [{'source_A': 'The data source from which source_B is subtracted'}, {'source_B': 'The data source which is subtracted from source_A'}]\n"", ""function name:division\nbase_api: http://127.0.0.1:5200/division\ndescription: Calcuates division of multiple data sources\nfilter_dict: [{'source_A': 'The data source which is divided by source_B'}, {'source_B': 'The data source which divides source_A'}]\n"", ""function name:sum_multiple\nbase_api: http://127.0.0.1:5200/sum_multiple\ndescription: Calcuates summation of multiple data sources\nfilter_dict: [{'source_A': 'The data source which is added to source_B'}, {'source_B': 'The data source which is added to source_A'}]\n""]",1.0,1,0.25,1,0.4,1,1.0,1
97,1344,What was the notes of the fundraising on 2019/9/14?,simple,filter,student_club,filter for budget categories related to fundraising,filter,"[""function name:filter\nbase_api: http://127.0.0.1:5200/filter\ndescription: filters a data product based on the provided filterdict, it filters row wise keeping all input columns\nfilter_dict: [{'conditions': 'a dict ith the corresponding columns and their values'}]\nexample: {'condition':{'location':'berlin','year':{'min':2002,'max':2007}}\n"", ""function name:division\nbase_api: http://127.0.0.1:5200/division\ndescription: Calcuates division of multiple data sources\nfilter_dict: [{'source_A': 'The data source which is divided by source_B'}, {'source_B': 'The data source which divides source_A'}]\n"", ""function name:diffrence\nbase_api: http://127.0.0.1:5200/diffrence\ndescription: Calcuates diffrence between multiple data sources\nfilter_dict: [{'source_A': 'The data source from which source_B is subtracted'}, {'source_B': 'The data source which is subtracted from source_A'}]\n"", ""function name:sum_multiple\nbase_api: http://127.0.0.1:5200/sum_multiple\ndescription: Calcuates summation of multiple data sources\nfilter_dict: [{'source_A': 'The data source which is added to source_B'}, {'source_B': 'The data source which is added to source_A'}]\n""]",1.0,1,0.25,1,0.4,1,1.0,1
98,1344,What was the notes of the fundraising on 2019/9/14?,simple,combine,student_club,combine notes from income dataset and relevant budget information from budget dataset,combine,"[""function name:combine\ndescription: combines to data products via a join\nfilter_dict: [{'columns_left': 'which columns of the first data product to match on'}, {'columns_right': 'which columns of the second data product to match on'}, {'type': 'equal or unequal'}]\n"", ""function name:diffrence\nbase_api: http://127.0.0.1:5200/diffrence\ndescription: Calcuates diffrence between multiple data sources\nfilter_dict: [{'source_A': 'The data source from which source_B is subtracted'}, {'source_B': 'The data source which is subtracted from source_A'}]\n"", ""function name:sum_multiple\nbase_api: http://127.0.0.1:5200/sum_multiple\ndescription: Calcuates summation of multiple data sources\nfilter_dict: [{'source_A': 'The data source which is added to source_B'}, {'source_B': 'The data source which is added to source_A'}]\n"", ""function name:sum\nbase_api: http://127.0.0.1:5200/sum\ndescription: Calcuates the sum of a dataframe based on a list of group_by columns and\nfilter_dict: [{'group_by': 'a list of coulmns in the dataframe, can be None'}, {'columns': 'a list of columns for hicht the sum should be calculated, cant be None'}]\n""]",1.0,1,0.25,1,0.4,1,1.0,1
99,1344,What was the notes of the fundraising on 2019/9/14?,simple,returnResult,student_club,return finished product,returnResult,"[""function name:retrieve\ndescription: retrieves the specified data product, takes the data products name and a list of requested columns as arguments\nfilter_dict: [{'product': 'product url'}]\n"", ""function name:combine\ndescription: combines to data products via a join\nfilter_dict: [{'columns_left': 'which columns of the first data product to match on'}, {'columns_right': 'which columns of the second data product to match on'}, {'type': 'equal or unequal'}]\n"", ""function name:filter\nbase_api: http://127.0.0.1:5200/filter\ndescription: filters a data product based on the provided filterdict, it filters row wise keeping all input columns\nfilter_dict: [{'conditions': 'a dict ith the corresponding columns and their values'}]\nexample: {'condition':{'location':'berlin','year':{'min':2002,'max':2007}}\n"", ""function name:returnResult\ndescription: retrieves or extracts  the previously computed data, specified  by the columns in a dataframe\nfilter_dict: [{'columns': 'which columns to retrun/extract'}]\n""]",0.25,1,0.25,1,0.4,1,1.0,1
100,1484,"How many more ""discount"" gas stations does the Czech Republic have compared to Slovakia?",simple,retrieve,debit_card_specializing,retrieve gasstations dataset,retrieve,"[""function name:retrieve\ndescription: retrieves the specified data product, takes the data products name and a list of requested columns as arguments\nfilter_dict: [{'product': 'product url'}]\n"", ""function name:diffrence\nbase_api: http://127.0.0.1:5200/diffrence\ndescription: Calcuates diffrence between multiple data sources\nfilter_dict: [{'source_A': 'The data source from which source_B is subtracted'}, {'source_B': 'The data source which is subtracted from source_A'}]\n"", ""function name:getValues\nbase_api: http://127.0.0.1:5200/getValues\ndescription: Retrieves specififed data values in a list format\nfilter_dict: [{'columns': 'a column on wihich to match'}, {'values': 'a dict with a value to match if None returns the all columns from columns'}]\nexample: filter_dict:{'values':'None','column':'customer_id'}\n"", ""function name:returnResult\ndescription: retrieves or extracts  the previously computed data, specified  by the columns in a dataframe\nfilter_dict: [{'columns': 'which columns to retrun/extract'}]\n""]",1.0,1,0.25,1,0.4,1,1.0,1
101,1484,"How many more ""discount"" gas stations does the Czech Republic have compared to Slovakia?",simple,filter,debit_card_specializing,filter for gas stations in the Czech Republic and Slovakia,filter,"[""function name:filter\nbase_api: http://127.0.0.1:5200/filter\ndescription: filters a data product based on the provided filterdict, it filters row wise keeping all input columns\nfilter_dict: [{'conditions': 'a dict ith the corresponding columns and their values'}]\nexample: {'condition':{'location':'berlin','year':{'min':2002,'max':2007}}\n"", ""function name:count\nbase_api: http://127.0.0.1:5200/count\ndescription: counts the occurences of a specific value or values\nfilter_dict: [{'columns': 'a column in which the value to count is present'}, {'value': 'the value to count '}]\n"", ""function name:diffrence\nbase_api: http://127.0.0.1:5200/diffrence\ndescription: Calcuates diffrence between multiple data sources\nfilter_dict: [{'source_A': 'The data source from which source_B is subtracted'}, {'source_B': 'The data source which is subtracted from source_A'}]\n"", ""function name:division\nbase_api: http://127.0.0.1:5200/division\ndescription: Calcuates division of multiple data sources\nfilter_dict: [{'source_A': 'The data source which is divided by source_B'}, {'source_B': 'The data source which divides source_A'}]\n""]",1.0,1,0.25,1,0.4,1,1.0,1
102,1484,"How many more ""discount"" gas stations does the Czech Republic have compared to Slovakia?",simple,filter,debit_card_specializing,"filter for ""discount"" gas stations in both countries",filter,"[""function name:filter\nbase_api: http://127.0.0.1:5200/filter\ndescription: filters a data product based on the provided filterdict, it filters row wise keeping all input columns\nfilter_dict: [{'conditions': 'a dict ith the corresponding columns and their values'}]\nexample: {'condition':{'location':'berlin','year':{'min':2002,'max':2007}}\n"", ""function name:diffrence\nbase_api: http://127.0.0.1:5200/diffrence\ndescription: Calcuates diffrence between multiple data sources\nfilter_dict: [{'source_A': 'The data source from which source_B is subtracted'}, {'source_B': 'The data source which is subtracted from source_A'}]\n"", ""function name:division\nbase_api: http://127.0.0.1:5200/division\ndescription: Calcuates division of multiple data sources\nfilter_dict: [{'source_A': 'The data source which is divided by source_B'}, {'source_B': 'The data source which divides source_A'}]\n"", ""function name:count\nbase_api: http://127.0.0.1:5200/count\ndescription: counts the occurences of a specific value or values\nfilter_dict: [{'columns': 'a column in which the value to count is present'}, {'value': 'the value to count '}]\n""]",1.0,1,0.25,1,0.4,1,1.0,1
103,1484,"How many more ""discount"" gas stations does the Czech Republic have compared to Slovakia?",simple,count,debit_card_specializing,"count the number of ""discount"" gas stations in the Czech Republic",count,"[""function name:count\nbase_api: http://127.0.0.1:5200/count\ndescription: counts the occurences of a specific value or values\nfilter_dict: [{'columns': 'a column in which the value to count is present'}, {'value': 'the value to count '}]\n"", ""function name:diffrence\nbase_api: http://127.0.0.1:5200/diffrence\ndescription: Calcuates diffrence between multiple data sources\nfilter_dict: [{'source_A': 'The data source from which source_B is subtracted'}, {'source_B': 'The data source which is subtracted from source_A'}]\n"", ""function name:division\nbase_api: http://127.0.0.1:5200/division\ndescription: Calcuates division of multiple data sources\nfilter_dict: [{'source_A': 'The data source which is divided by source_B'}, {'source_B': 'The data source which divides source_A'}]\n"", ""function name:sum_multiple\nbase_api: http://127.0.0.1:5200/sum_multiple\ndescription: Calcuates summation of multiple data sources\nfilter_dict: [{'source_A': 'The data source which is added to source_B'}, {'source_B': 'The data source which is added to source_A'}]\n""]",1.0,1,0.25,1,0.4,1,1.0,1
104,1484,"How many more ""discount"" gas stations does the Czech Republic have compared to Slovakia?",simple,count,debit_card_specializing,"count the number of ""discount"" gas stations in Slovakia",count,"[""function name:count\nbase_api: http://127.0.0.1:5200/count\ndescription: counts the occurences of a specific value or values\nfilter_dict: [{'columns': 'a column in which the value to count is present'}, {'value': 'the value to count '}]\n"", ""function name:diffrence\nbase_api: http://127.0.0.1:5200/diffrence\ndescription: Calcuates diffrence between multiple data sources\nfilter_dict: [{'source_A': 'The data source from which source_B is subtracted'}, {'source_B': 'The data source which is subtracted from source_A'}]\n"", ""function name:division\nbase_api: http://127.0.0.1:5200/division\ndescription: Calcuates division of multiple data sources\nfilter_dict: [{'source_A': 'The data source which is divided by source_B'}, {'source_B': 'The data source which divides source_A'}]\n"", ""function name:sum_multiple\nbase_api: http://127.0.0.1:5200/sum_multiple\ndescription: Calcuates summation of multiple data sources\nfilter_dict: [{'source_A': 'The data source which is added to source_B'}, {'source_B': 'The data source which is added to source_A'}]\n""]",1.0,1,0.25,1,0.4,1,1.0,1
105,1484,"How many more ""discount"" gas stations does the Czech Republic have compared to Slovakia?",simple,diffrence,debit_card_specializing,"compute the difference between the counts of ""discount"" gas stations in the Czech Republic and Slovakia",diffrence,"[""function name:diffrence\nbase_api: http://127.0.0.1:5200/diffrence\ndescription: Calcuates diffrence between multiple data sources\nfilter_dict: [{'source_A': 'The data source from which source_B is subtracted'}, {'source_B': 'The data source which is subtracted from source_A'}]\n"", ""function name:count\nbase_api: http://127.0.0.1:5200/count\ndescription: counts the occurences of a specific value or values\nfilter_dict: [{'columns': 'a column in which the value to count is present'}, {'value': 'the value to count '}]\n"", ""function name:division\nbase_api: http://127.0.0.1:5200/division\ndescription: Calcuates division of multiple data sources\nfilter_dict: [{'source_A': 'The data source which is divided by source_B'}, {'source_B': 'The data source which divides source_A'}]\n"", ""function name:sum\nbase_api: http://127.0.0.1:5200/sum\ndescription: Calcuates the sum of a dataframe based on a list of group_by columns and\nfilter_dict: [{'group_by': 'a list of coulmns in the dataframe, can be None'}, {'columns': 'a list of columns for hicht the sum should be calculated, cant be None'}]\n""]",1.0,1,0.25,1,0.4,1,1.0,1
106,1484,"How many more ""discount"" gas stations does the Czech Republic have compared to Slovakia?",simple,returnResult,debit_card_specializing,return finished product,returnResult,"[""function name:retrieve\ndescription: retrieves the specified data product, takes the data products name and a list of requested columns as arguments\nfilter_dict: [{'product': 'product url'}]\n"", ""function name:combine\ndescription: combines to data products via a join\nfilter_dict: [{'columns_left': 'which columns of the first data product to match on'}, {'columns_right': 'which columns of the second data product to match on'}, {'type': 'equal or unequal'}]\n"", ""function name:filter\nbase_api: http://127.0.0.1:5200/filter\ndescription: filters a data product based on the provided filterdict, it filters row wise keeping all input columns\nfilter_dict: [{'conditions': 'a dict ith the corresponding columns and their values'}]\nexample: {'condition':{'location':'berlin','year':{'min':2002,'max':2007}}\n"", ""function name:returnResult\ndescription: retrieves or extracts  the previously computed data, specified  by the columns in a dataframe\nfilter_dict: [{'columns': 'which columns to retrun/extract'}]\n""]",0.25,1,0.25,1,0.4,1,1.0,1
107,39,What is the average number of test takers from Fresno schools that opened between 1/1/1980 and 12/31/1980?,simple,retrieve,california_schools,retrieve sat scores data,retrieve,"[""function name:retrieve\ndescription: retrieves the specified data product, takes the data products name and a list of requested columns as arguments\nfilter_dict: [{'product': 'product url'}]\n"", ""function name:getValues\nbase_api: http://127.0.0.1:5200/getValues\ndescription: Retrieves specififed data values in a list format\nfilter_dict: [{'columns': 'a column on wihich to match'}, {'values': 'a dict with a value to match if None returns the all columns from columns'}]\nexample: filter_dict:{'values':'None','column':'customer_id'}\n"", ""function name:returnResult\ndescription: retrieves or extracts  the previously computed data, specified  by the columns in a dataframe\nfilter_dict: [{'columns': 'which columns to retrun/extract'}]\n"", ""function name:diffrence\nbase_api: http://127.0.0.1:5200/diffrence\ndescription: Calcuates diffrence between multiple data sources\nfilter_dict: [{'source_A': 'The data source from which source_B is subtracted'}, {'source_B': 'The data source which is subtracted from source_A'}]\n""]",1.0,1,0.25,1,0.4,1,1.0,1
108,39,What is the average number of test takers from Fresno schools that opened between 1/1/1980 and 12/31/1980?,simple,filter,california_schools,filter for Fresno schools that opened between 1/1/1980 and 12/31/1980,filter,"[""function name:filter\nbase_api: http://127.0.0.1:5200/filter\ndescription: filters a data product based on the provided filterdict, it filters row wise keeping all input columns\nfilter_dict: [{'conditions': 'a dict ith the corresponding columns and their values'}]\nexample: {'condition':{'location':'berlin','year':{'min':2002,'max':2007}}\n"", ""function name:division\nbase_api: http://127.0.0.1:5200/division\ndescription: Calcuates division of multiple data sources\nfilter_dict: [{'source_A': 'The data source which is divided by source_B'}, {'source_B': 'The data source which divides source_A'}]\n"", ""function name:diffrence\nbase_api: http://127.0.0.1:5200/diffrence\ndescription: Calcuates diffrence between multiple data sources\nfilter_dict: [{'source_A': 'The data source from which source_B is subtracted'}, {'source_B': 'The data source which is subtracted from source_A'}]\n"", ""function name:count\nbase_api: http://127.0.0.1:5200/count\ndescription: counts the occurences of a specific value or values\nfilter_dict: [{'columns': 'a column in which the value to count is present'}, {'value': 'the value to count '}]\n""]",1.0,1,0.25,1,0.4,1,1.0,1
109,39,What is the average number of test takers from Fresno schools that opened between 1/1/1980 and 12/31/1980?,simple,mean,california_schools,calculate the average number of test takers from the filtered data,mean,"[""function name:mean\nbase_api: http://127.0.0.1:5200/sum\ndescription: Calcuates the mean of a dataframe based on a list of group_by columns and\nfilter_dict: [{'group_by': 'a list of coulmns in the dataframe, can be None'}, {'columns': 'a list of columns for hicht the mean should be calculated, cant be None'}]\n"", ""function name:sum_multiple\nbase_api: http://127.0.0.1:5200/sum_multiple\ndescription: Calcuates summation of multiple data sources\nfilter_dict: [{'source_A': 'The data source which is added to source_B'}, {'source_B': 'The data source which is added to source_A'}]\n"", ""function name:division\nbase_api: http://127.0.0.1:5200/division\ndescription: Calcuates division of multiple data sources\nfilter_dict: [{'source_A': 'The data source which is divided by source_B'}, {'source_B': 'The data source which divides source_A'}]\n"", ""function name:multiplication\nbase_api: http://127.0.0.1:5200/multiplication\ndescription: Calcuates multiplication of multiple data sources\nfilter_dict: [{'source_A': 'The data source which is multiplied with source_B'}, {'source_B': 'The data source which is multiplied with source_A'}]\n""]",1.0,1,0.25,1,0.4,1,1.0,1
110,39,What is the average number of test takers from Fresno schools that opened between 1/1/1980 and 12/31/1980?,simple,returnResult,california_schools,return finished product,returnResult,"[""function name:retrieve\ndescription: retrieves the specified data product, takes the data products name and a list of requested columns as arguments\nfilter_dict: [{'product': 'product url'}]\n"", ""function name:combine\ndescription: combines to data products via a join\nfilter_dict: [{'columns_left': 'which columns of the first data product to match on'}, {'columns_right': 'which columns of the second data product to match on'}, {'type': 'equal or unequal'}]\n"", ""function name:filter\nbase_api: http://127.0.0.1:5200/filter\ndescription: filters a data product based on the provided filterdict, it filters row wise keeping all input columns\nfilter_dict: [{'conditions': 'a dict ith the corresponding columns and their values'}]\nexample: {'condition':{'location':'berlin','year':{'min':2002,'max':2007}}\n"", ""function name:returnResult\ndescription: retrieves or extracts  the previously computed data, specified  by the columns in a dataframe\nfilter_dict: [{'columns': 'which columns to retrun/extract'}]\n""]",0.25,1,0.25,1,0.4,1,1.0,1
