Unnamed: 0,question_id,query,difficulty,function,collection,step,correct_context,response,retrieved_docs,mmr,precision,recall,f1,correctness_LLM,simple_match
0,967,State code numbers of top 3 yougest drivers. How many Netherlandic drivers among them?,simple,retrieve,formula_1,retrieve drivers dataset,"function name:retrieve
description: retrieves the specified data product, takes the data products name and a list of requested columns as arguments
filter_dict: [{'product': 'product url'}]
","The most fitting function for retrieving a dataset is:

**Function Name:** returnResult  
**Description:** retrieves or extracts the previously computed data, specified by the columns in a dataframe.  
**Filter Dictionary:** [{'columns': 'which columns to return/extract'}]","[""function name:count\nbase_api: http://127.0.0.1:5200/count\ndescription: counts the occurences of a specific value or values\nfilter_dict: [{'columns': 'a column in which the value to count is present'}, {'value': 'the value to count '}]\n"", ""function name:min\nbase_api: http://127.0.0.1:5200/min\ndescription: Retrieves the maximum value for a list of specified columns in a dataframe\nreturn_type: single value\nfilter_dict: [{'columns': 'a list of columns for which the minimum should be retrieved'}, {'rows': 'number of rows to be returned'}]\n"", ""function name:returnResult\ndescription: retrieves or extracts  the previously computed data, specified  by the columns in a dataframe\nfilter_dict: [{'columns': 'which columns to retrun/extract'}]\n"", ""function name:combine\ndescription: combines to data products via a join\nfilter_dict: [{'columns_left': 'which columns of the first data product to match on'}, {'columns_right': 'which columns of the second data product to match on'}, {'type': 'equal or unequal'}]\n""]",0.0,0.0,0.0,0.0,0,1.0
2,967,State code numbers of top 3 yougest drivers. How many Netherlandic drivers among them?,simple,sortby,formula_1,sort drivers by birth date to identify the top 3 youngest drivers,"function name:sortby
base_api: http://127.0.0.1:5200/sortby
description: sorts the data based on a the provided columns and either ascending or descending
filter_dict: [{'columns': 'a column on which the sorting is based on'}, {'ascending': ""'True' if the data is sorted ascending, 'False' for descending""}]
","The most fitting function for your problem is:

**Function Name:** min  
**Description:** Retrieves the maximum value for a list of specified columns in a dataframe. This function can be adapted to find the minimum birth dates, which will help identify the youngest drivers.  
**Filter Dictionary:** [{'columns': 'a list of columns for which the minimum should be retrieved'}, {'rows': 'number of rows to be returned'}]","[""function name:count\nbase_api: http://127.0.0.1:5200/count\ndescription: counts the occurences of a specific value or values\nfilter_dict: [{'columns': 'a column in which the value to count is present'}, {'value': 'the value to count '}]\n"", ""function name:min\nbase_api: http://127.0.0.1:5200/min\ndescription: Retrieves the maximum value for a list of specified columns in a dataframe\nreturn_type: single value\nfilter_dict: [{'columns': 'a list of columns for which the minimum should be retrieved'}, {'rows': 'number of rows to be returned'}]\n"", ""function name:returnResult\ndescription: retrieves or extracts  the previously computed data, specified  by the columns in a dataframe\nfilter_dict: [{'columns': 'which columns to retrun/extract'}]\n"", ""function name:combine\ndescription: combines to data products via a join\nfilter_dict: [{'columns_left': 'which columns of the first data product to match on'}, {'columns_right': 'which columns of the second data product to match on'}, {'type': 'equal or unequal'}]\n""]",0.0,0.0,0.0,0.0,0,0.0
3,967,State code numbers of top 3 yougest drivers. How many Netherlandic drivers among them?,simple,retrieve,formula_1,retrieve driver IDs of the top 3 youngest drivers from driverStandings dataset,"function name:retrieve
description: retrieves the specified data product, takes the data products name and a list of requested columns as arguments
filter_dict: [{'product': 'product url'}]
","The most fitting function for your problem is:

**Function Name:** returnResult  
**Description:** retrieves or extracts the previously computed data, specified by the columns in a dataframe.  
**Filter_dict:** [{'columns': 'which columns to return/extract'}]  

This function can be used to extract the driver IDs after you have computed the top 3 youngest drivers from the driverStandings dataset.","[""function name:count\nbase_api: http://127.0.0.1:5200/count\ndescription: counts the occurences of a specific value or values\nfilter_dict: [{'columns': 'a column in which the value to count is present'}, {'value': 'the value to count '}]\n"", ""function name:min\nbase_api: http://127.0.0.1:5200/min\ndescription: Retrieves the maximum value for a list of specified columns in a dataframe\nreturn_type: single value\nfilter_dict: [{'columns': 'a list of columns for which the minimum should be retrieved'}, {'rows': 'number of rows to be returned'}]\n"", ""function name:returnResult\ndescription: retrieves or extracts  the previously computed data, specified  by the columns in a dataframe\nfilter_dict: [{'columns': 'which columns to retrun/extract'}]\n"", ""function name:combine\ndescription: combines to data products via a join\nfilter_dict: [{'columns_left': 'which columns of the first data product to match on'}, {'columns_right': 'which columns of the second data product to match on'}, {'type': 'equal or unequal'}]\n""]",0.0,0.0,0.0,0.0,0,1.0
4,967,State code numbers of top 3 yougest drivers. How many Netherlandic drivers among them?,simple,combine,formula_1,combine top 3 youngest drivers from drivers dataset with their corresponding driver IDs from driverStandings dataset,"function name:combine
description: combines to data products via a join
filter_dict: [{'columns_left': 'which columns of the first data product to match on'}, {'columns_right': 'which columns of the second data product to match on'}, {'type': 'equal or unequal'}]
","The most fitting function for your problem is:

**Function Name:** combine  
**Description:** combines two data products via a join  
**Filter Dictionary:** [{'columns_left': 'which columns of the first data product to match on'}, {'columns_right': 'which columns of the second data product to match on'}, {'type': 'equal or unequal'}]  

This function can be used to join the drivers dataset with the driverStandings dataset based on the corresponding driver IDs.","[""function name:count\nbase_api: http://127.0.0.1:5200/count\ndescription: counts the occurences of a specific value or values\nfilter_dict: [{'columns': 'a column in which the value to count is present'}, {'value': 'the value to count '}]\n"", ""function name:min\nbase_api: http://127.0.0.1:5200/min\ndescription: Retrieves the maximum value for a list of specified columns in a dataframe\nreturn_type: single value\nfilter_dict: [{'columns': 'a list of columns for which the minimum should be retrieved'}, {'rows': 'number of rows to be returned'}]\n"", ""function name:returnResult\ndescription: retrieves or extracts  the previously computed data, specified  by the columns in a dataframe\nfilter_dict: [{'columns': 'which columns to retrun/extract'}]\n"", ""function name:combine\ndescription: combines to data products via a join\nfilter_dict: [{'columns_left': 'which columns of the first data product to match on'}, {'columns_right': 'which columns of the second data product to match on'}, {'type': 'equal or unequal'}]\n""]",0.0625,0.25,1.0,0.4,1,1.0
5,967,State code numbers of top 3 yougest drivers. How many Netherlandic drivers among them?,simple,count,formula_1,count how many of the top 3 youngest drivers are from the Netherlands using the nationality information,"function name:count
base_api: http://127.0.0.1:5200/count
description: counts the occurences of a specific value or values
filter_dict: [{'columns': 'a column in which the value to count is present'}, {'value': 'the value to count '}]
","The most fitting function for your problem is:

**Function Name:** count  
**Description:** Counts the occurrences of a specific value or values.  
**Filter Dictionary:** [{'columns': 'nationality'}, {'value': 'Netherlands'}]  

This function can be used to count how many of the top 3 youngest drivers are from the Netherlands by filtering the nationality column for the value ""Netherlands"".","[""function name:count\nbase_api: http://127.0.0.1:5200/count\ndescription: counts the occurences of a specific value or values\nfilter_dict: [{'columns': 'a column in which the value to count is present'}, {'value': 'the value to count '}]\n"", ""function name:min\nbase_api: http://127.0.0.1:5200/min\ndescription: Retrieves the maximum value for a list of specified columns in a dataframe\nreturn_type: single value\nfilter_dict: [{'columns': 'a list of columns for which the minimum should be retrieved'}, {'rows': 'number of rows to be returned'}]\n"", ""function name:returnResult\ndescription: retrieves or extracts  the previously computed data, specified  by the columns in a dataframe\nfilter_dict: [{'columns': 'which columns to retrun/extract'}]\n"", ""function name:combine\ndescription: combines to data products via a join\nfilter_dict: [{'columns_left': 'which columns of the first data product to match on'}, {'columns_right': 'which columns of the second data product to match on'}, {'type': 'equal or unequal'}]\n""]",0.25,0.25,1.0,0.4,1,1.0
6,967,State code numbers of top 3 yougest drivers. How many Netherlandic drivers among them?,simple,returnResult,formula_1,return finished product with state code numbers of top 3 youngest drivers and count of Netherlandic drivers,"function name:returnResult
description: retrieves or extracts  the previously computed data, specified  by the columns in a dataframe
filter_dict: [{'columns': 'which columns to retrun/extract'}]
","The most fitting function for your problem is:

**Function Name:** combine  
**Description:** combines two data products via a join  
**Filter Dictionary:** [{'columns_left': 'which columns of the first data product to match on'}, {'columns_right': 'which columns of the second data product to match on'}, {'type': 'equal or unequal'}]  

This function can be used to join the data related to the finished products with the data of drivers, allowing you to filter for the top 3 youngest drivers and count the Netherlandic drivers.","[""function name:count\nbase_api: http://127.0.0.1:5200/count\ndescription: counts the occurences of a specific value or values\nfilter_dict: [{'columns': 'a column in which the value to count is present'}, {'value': 'the value to count '}]\n"", ""function name:min\nbase_api: http://127.0.0.1:5200/min\ndescription: Retrieves the maximum value for a list of specified columns in a dataframe\nreturn_type: single value\nfilter_dict: [{'columns': 'a list of columns for which the minimum should be retrieved'}, {'rows': 'number of rows to be returned'}]\n"", ""function name:returnResult\ndescription: retrieves or extracts  the previously computed data, specified  by the columns in a dataframe\nfilter_dict: [{'columns': 'which columns to retrun/extract'}]\n"", ""function name:combine\ndescription: combines to data products via a join\nfilter_dict: [{'columns_left': 'which columns of the first data product to match on'}, {'columns_right': 'which columns of the second data product to match on'}, {'type': 'equal or unequal'}]\n""]",0.0833333333333333,0.25,1.0,0.4,0,0.0
7,872,"In the race No. 45, for the driver who had the Q3 time as 0:01:33, what is his abbreviated code?",simple,retrieve,formula_1,retrieve Qualifying Dataset,"function name:retrieve
description: retrieves the specified data product, takes the data products name and a list of requested columns as arguments
filter_dict: [{'product': 'product url'}]
","The most fitting function for retrieving a qualifying dataset is:

**Function Name:** returnResult  
**Description:** retrieves or extracts the previously computed data, specified by the columns in a dataframe.  
**Filter Dictionary:** [{'columns': 'which columns to return/extract'}]","[""function name:count\nbase_api: http://127.0.0.1:5200/count\ndescription: counts the occurences of a specific value or values\nfilter_dict: [{'columns': 'a column in which the value to count is present'}, {'value': 'the value to count '}]\n"", ""function name:min\nbase_api: http://127.0.0.1:5200/min\ndescription: Retrieves the maximum value for a list of specified columns in a dataframe\nreturn_type: single value\nfilter_dict: [{'columns': 'a list of columns for which the minimum should be retrieved'}, {'rows': 'number of rows to be returned'}]\n"", ""function name:returnResult\ndescription: retrieves or extracts  the previously computed data, specified  by the columns in a dataframe\nfilter_dict: [{'columns': 'which columns to retrun/extract'}]\n"", ""function name:combine\ndescription: combines to data products via a join\nfilter_dict: [{'columns_left': 'which columns of the first data product to match on'}, {'columns_right': 'which columns of the second data product to match on'}, {'type': 'equal or unequal'}]\n""]",0.0,0.0,0.0,0.0,0,1.0
8,872,"In the race No. 45, for the driver who had the Q3 time as 0:01:33, what is his abbreviated code?",simple,filter,formula_1,filter for race No. 45 and Q3 time of 0:01:33,"function name:filter
base_api: http://127.0.0.1:5200/filter
description: filters a data product based on the provided filterdict, it filters row wise keeping all input columns
filter_dict: [{'conditions': 'a dict ith the corresponding columns and their values'}]
example: {'condition':{'location':'berlin','year':{'min':2002,'max':2007}}
","The most fitting function for your problem is:

**Function Name:** combine  
**Description:** combines two data products via a join  
**Filter Dictionary:** [{'columns_left': 'which columns of the first data product to match on'}, {'columns_right': 'which columns of the second data product to match on'}, {'type': 'equal or unequal'}]  

This function can be used to filter and combine data based on specific criteria such as race number and Q3 time.","[""function name:count\nbase_api: http://127.0.0.1:5200/count\ndescription: counts the occurences of a specific value or values\nfilter_dict: [{'columns': 'a column in which the value to count is present'}, {'value': 'the value to count '}]\n"", ""function name:min\nbase_api: http://127.0.0.1:5200/min\ndescription: Retrieves the maximum value for a list of specified columns in a dataframe\nreturn_type: single value\nfilter_dict: [{'columns': 'a list of columns for which the minimum should be retrieved'}, {'rows': 'number of rows to be returned'}]\n"", ""function name:returnResult\ndescription: retrieves or extracts  the previously computed data, specified  by the columns in a dataframe\nfilter_dict: [{'columns': 'which columns to retrun/extract'}]\n"", ""function name:combine\ndescription: combines to data products via a join\nfilter_dict: [{'columns_left': 'which columns of the first data product to match on'}, {'columns_right': 'which columns of the second data product to match on'}, {'type': 'equal or unequal'}]\n""]",0.0,0.0,0.0,0.0,0,1.0
9,872,"In the race No. 45, for the driver who had the Q3 time as 0:01:33, what is his abbreviated code?",simple,getValues,formula_1,extract driverId from the filtered Qualifying Dataset,"function name:getValues
base_api: http://127.0.0.1:5200/getValues
description: Retrieves specififed data values in a list format
filter_dict: [{'columns': 'a column on wihich to match'}, {'values': 'a dict with a value to match if None returns the all columns from columns'}]
example: filter_dict:{'values':'None','column':'customer_id'}
","The most fitting function for your problem is:

**Function Name:** returnResult  
**Description:** retrieves or extracts the previously computed data, specified by the columns in a dataframe  
**Filter Dictionary:** [{'columns': 'which columns to return/extract'}]","[""function name:count\nbase_api: http://127.0.0.1:5200/count\ndescription: counts the occurences of a specific value or values\nfilter_dict: [{'columns': 'a column in which the value to count is present'}, {'value': 'the value to count '}]\n"", ""function name:min\nbase_api: http://127.0.0.1:5200/min\ndescription: Retrieves the maximum value for a list of specified columns in a dataframe\nreturn_type: single value\nfilter_dict: [{'columns': 'a list of columns for which the minimum should be retrieved'}, {'rows': 'number of rows to be returned'}]\n"", ""function name:returnResult\ndescription: retrieves or extracts  the previously computed data, specified  by the columns in a dataframe\nfilter_dict: [{'columns': 'which columns to retrun/extract'}]\n"", ""function name:combine\ndescription: combines to data products via a join\nfilter_dict: [{'columns_left': 'which columns of the first data product to match on'}, {'columns_right': 'which columns of the second data product to match on'}, {'type': 'equal or unequal'}]\n""]",0.0,0.0,0.0,0.0,0,0.0
10,872,"In the race No. 45, for the driver who had the Q3 time as 0:01:33, what is his abbreviated code?",simple,retrieve,formula_1,retrieve Results Dataset,"function name:retrieve
description: retrieves the specified data product, takes the data products name and a list of requested columns as arguments
filter_dict: [{'product': 'product url'}]
","The most fitting function for retrieving results from a dataset is:

**Function Name:** returnResult  
**Description:** retrieves or extracts the previously computed data, specified by the columns in a dataframe.  
**Filter Dictionary:** [{'columns': 'which columns to return/extract'}]","[""function name:count\nbase_api: http://127.0.0.1:5200/count\ndescription: counts the occurences of a specific value or values\nfilter_dict: [{'columns': 'a column in which the value to count is present'}, {'value': 'the value to count '}]\n"", ""function name:min\nbase_api: http://127.0.0.1:5200/min\ndescription: Retrieves the maximum value for a list of specified columns in a dataframe\nreturn_type: single value\nfilter_dict: [{'columns': 'a list of columns for which the minimum should be retrieved'}, {'rows': 'number of rows to be returned'}]\n"", ""function name:returnResult\ndescription: retrieves or extracts  the previously computed data, specified  by the columns in a dataframe\nfilter_dict: [{'columns': 'which columns to retrun/extract'}]\n"", ""function name:combine\ndescription: combines to data products via a join\nfilter_dict: [{'columns_left': 'which columns of the first data product to match on'}, {'columns_right': 'which columns of the second data product to match on'}, {'type': 'equal or unequal'}]\n""]",0.0,0.0,0.0,0.0,0,1.0
11,872,"In the race No. 45, for the driver who had the Q3 time as 0:01:33, what is his abbreviated code?",simple,filter,formula_1,filter for race No. 45 and match driverId from the previous step,"function name:filter
base_api: http://127.0.0.1:5200/filter
description: filters a data product based on the provided filterdict, it filters row wise keeping all input columns
filter_dict: [{'conditions': 'a dict ith the corresponding columns and their values'}]
example: {'condition':{'location':'berlin','year':{'min':2002,'max':2007}}
","The most fitting function for your problem is:

**Function Name:** combine  
**Description:** combines two data products via a join  
**Filter Dictionary:** [{'columns_left': 'which columns of the first data product to match on'}, {'columns_right': 'which columns of the second data product to match on'}, {'type': 'equal or unequal'}]  

This function allows you to match the driverId from the previous step with the race No. 45 by combining the relevant data products.","[""function name:count\nbase_api: http://127.0.0.1:5200/count\ndescription: counts the occurences of a specific value or values\nfilter_dict: [{'columns': 'a column in which the value to count is present'}, {'value': 'the value to count '}]\n"", ""function name:min\nbase_api: http://127.0.0.1:5200/min\ndescription: Retrieves the maximum value for a list of specified columns in a dataframe\nreturn_type: single value\nfilter_dict: [{'columns': 'a list of columns for which the minimum should be retrieved'}, {'rows': 'number of rows to be returned'}]\n"", ""function name:returnResult\ndescription: retrieves or extracts  the previously computed data, specified  by the columns in a dataframe\nfilter_dict: [{'columns': 'which columns to retrun/extract'}]\n"", ""function name:combine\ndescription: combines to data products via a join\nfilter_dict: [{'columns_left': 'which columns of the first data product to match on'}, {'columns_right': 'which columns of the second data product to match on'}, {'type': 'equal or unequal'}]\n""]",0.0,0.0,0.0,0.0,0,0.0
12,872,"In the race No. 45, for the driver who had the Q3 time as 0:01:33, what is his abbreviated code?",simple,getValues,formula_1,extract abbreviated code from the filtered Results Dataset,"function name:getValues
base_api: http://127.0.0.1:5200/getValues
description: Retrieves specififed data values in a list format
filter_dict: [{'columns': 'a column on wihich to match'}, {'values': 'a dict with a value to match if None returns the all columns from columns'}]
example: filter_dict:{'values':'None','column':'customer_id'}
","The most fitting function for extracting specific data from a dataset is:

**Function Name:** returnResult  
**Description:** retrieves or extracts the previously computed data, specified by the columns in a dataframe  
**Filter Dictionary:** [{'columns': 'which columns to return/extract'}]","[""function name:count\nbase_api: http://127.0.0.1:5200/count\ndescription: counts the occurences of a specific value or values\nfilter_dict: [{'columns': 'a column in which the value to count is present'}, {'value': 'the value to count '}]\n"", ""function name:min\nbase_api: http://127.0.0.1:5200/min\ndescription: Retrieves the maximum value for a list of specified columns in a dataframe\nreturn_type: single value\nfilter_dict: [{'columns': 'a list of columns for which the minimum should be retrieved'}, {'rows': 'number of rows to be returned'}]\n"", ""function name:returnResult\ndescription: retrieves or extracts  the previously computed data, specified  by the columns in a dataframe\nfilter_dict: [{'columns': 'which columns to retrun/extract'}]\n"", ""function name:combine\ndescription: combines to data products via a join\nfilter_dict: [{'columns_left': 'which columns of the first data product to match on'}, {'columns_right': 'which columns of the second data product to match on'}, {'type': 'equal or unequal'}]\n""]",0.0,0.0,0.0,0.0,0,0.0
13,872,"In the race No. 45, for the driver who had the Q3 time as 0:01:33, what is his abbreviated code?",simple,returnResult,formula_1,return finished product,"function name:returnResult
description: retrieves or extracts  the previously computed data, specified  by the columns in a dataframe
filter_dict: [{'columns': 'which columns to retrun/extract'}]
","The most fitting function for your request is:

**Function Name:** returnResult  
**Description:** retrieves or extracts the previously computed data, specified by the columns in a dataframe  
**Filter Dictionary:** [{'columns': 'which columns to return/extract'}]","[""function name:count\nbase_api: http://127.0.0.1:5200/count\ndescription: counts the occurences of a specific value or values\nfilter_dict: [{'columns': 'a column in which the value to count is present'}, {'value': 'the value to count '}]\n"", ""function name:min\nbase_api: http://127.0.0.1:5200/min\ndescription: Retrieves the maximum value for a list of specified columns in a dataframe\nreturn_type: single value\nfilter_dict: [{'columns': 'a list of columns for which the minimum should be retrieved'}, {'rows': 'number of rows to be returned'}]\n"", ""function name:returnResult\ndescription: retrieves or extracts  the previously computed data, specified  by the columns in a dataframe\nfilter_dict: [{'columns': 'which columns to retrun/extract'}]\n"", ""function name:combine\ndescription: combines to data products via a join\nfilter_dict: [{'columns_left': 'which columns of the first data product to match on'}, {'columns_right': 'which columns of the second data product to match on'}, {'type': 'equal or unequal'}]\n""]",0.0833333333333333,0.25,1.0,0.4,1,1.0
14,862,"For the Bahrain Grand Prix in 2007, how many drivers not finished the game?",simple,retrieve,formula_1,retrieve races data,"function name:retrieve
description: retrieves the specified data product, takes the data products name and a list of requested columns as arguments
filter_dict: [{'product': 'product url'}]
","The most fitting function for retrieving races data is:

**Function Name:** returnResult  
**Description:** retrieves or extracts the previously computed data, specified by the columns in a dataframe  
**Filter Dictionary:** [{'columns': 'which columns to return/extract'}]","[""function name:count\nbase_api: http://127.0.0.1:5200/count\ndescription: counts the occurences of a specific value or values\nfilter_dict: [{'columns': 'a column in which the value to count is present'}, {'value': 'the value to count '}]\n"", ""function name:min\nbase_api: http://127.0.0.1:5200/min\ndescription: Retrieves the maximum value for a list of specified columns in a dataframe\nreturn_type: single value\nfilter_dict: [{'columns': 'a list of columns for which the minimum should be retrieved'}, {'rows': 'number of rows to be returned'}]\n"", ""function name:returnResult\ndescription: retrieves or extracts  the previously computed data, specified  by the columns in a dataframe\nfilter_dict: [{'columns': 'which columns to retrun/extract'}]\n"", ""function name:combine\ndescription: combines to data products via a join\nfilter_dict: [{'columns_left': 'which columns of the first data product to match on'}, {'columns_right': 'which columns of the second data product to match on'}, {'type': 'equal or unequal'}]\n""]",0.0,0.0,0.0,0.0,0,1.0
15,862,"For the Bahrain Grand Prix in 2007, how many drivers not finished the game?",simple,filter,formula_1,filter for Bahrain Grand Prix in 2007,"function name:filter
base_api: http://127.0.0.1:5200/filter
description: filters a data product based on the provided filterdict, it filters row wise keeping all input columns
filter_dict: [{'conditions': 'a dict ith the corresponding columns and their values'}]
example: {'condition':{'location':'berlin','year':{'min':2002,'max':2007}}
","The most fitting function for filtering data related to the Bahrain Grand Prix in 2007 is the ""combine"" function.

**Function Name:** combine  
**Description:** combines two data products via a join  
**Filter Dictionary:** [{'columns_left': 'which columns of the first data product to match on'}, {'columns_right': 'which columns of the second data product to match on'}, {'type': 'equal or unequal'}]","[""function name:count\nbase_api: http://127.0.0.1:5200/count\ndescription: counts the occurences of a specific value or values\nfilter_dict: [{'columns': 'a column in which the value to count is present'}, {'value': 'the value to count '}]\n"", ""function name:min\nbase_api: http://127.0.0.1:5200/min\ndescription: Retrieves the maximum value for a list of specified columns in a dataframe\nreturn_type: single value\nfilter_dict: [{'columns': 'a list of columns for which the minimum should be retrieved'}, {'rows': 'number of rows to be returned'}]\n"", ""function name:returnResult\ndescription: retrieves or extracts  the previously computed data, specified  by the columns in a dataframe\nfilter_dict: [{'columns': 'which columns to retrun/extract'}]\n"", ""function name:combine\ndescription: combines to data products via a join\nfilter_dict: [{'columns_left': 'which columns of the first data product to match on'}, {'columns_right': 'which columns of the second data product to match on'}, {'type': 'equal or unequal'}]\n""]",0.0,0.0,0.0,0.0,0,1.0
16,862,"For the Bahrain Grand Prix in 2007, how many drivers not finished the game?",simple,getValues,formula_1,extract raceId for Bahrain Grand Prix in 2007,"function name:getValues
base_api: http://127.0.0.1:5200/getValues
description: Retrieves specififed data values in a list format
filter_dict: [{'columns': 'a column on wihich to match'}, {'values': 'a dict with a value to match if None returns the all columns from columns'}]
example: filter_dict:{'values':'None','column':'customer_id'}
","The most fitting function for your problem is:

**Function Name:** returnResult  
**Description:** retrieves or extracts the previously computed data, specified by the columns in a dataframe  
**Filter Dictionary:** [{'columns': 'which columns to return/extract'}]  

This function can be used to extract the specific raceId for the Bahrain Grand Prix in 2007 from the relevant dataset.","[""function name:count\nbase_api: http://127.0.0.1:5200/count\ndescription: counts the occurences of a specific value or values\nfilter_dict: [{'columns': 'a column in which the value to count is present'}, {'value': 'the value to count '}]\n"", ""function name:min\nbase_api: http://127.0.0.1:5200/min\ndescription: Retrieves the maximum value for a list of specified columns in a dataframe\nreturn_type: single value\nfilter_dict: [{'columns': 'a list of columns for which the minimum should be retrieved'}, {'rows': 'number of rows to be returned'}]\n"", ""function name:returnResult\ndescription: retrieves or extracts  the previously computed data, specified  by the columns in a dataframe\nfilter_dict: [{'columns': 'which columns to retrun/extract'}]\n"", ""function name:combine\ndescription: combines to data products via a join\nfilter_dict: [{'columns_left': 'which columns of the first data product to match on'}, {'columns_right': 'which columns of the second data product to match on'}, {'type': 'equal or unequal'}]\n""]",0.0,0.0,0.0,0.0,0,0.0
17,862,"For the Bahrain Grand Prix in 2007, how many drivers not finished the game?",simple,retrieve,formula_1,retrieve driverStandings data,"function name:retrieve
description: retrieves the specified data product, takes the data products name and a list of requested columns as arguments
filter_dict: [{'product': 'product url'}]
","The most fitting function for retrieving driverStandings data is:

**Function Name:** returnResult  
**Description:** retrieves or extracts the previously computed data, specified by the columns in a dataframe  
**Filter Dictionary:** [{'columns': 'which columns to return/extract'}]","[""function name:count\nbase_api: http://127.0.0.1:5200/count\ndescription: counts the occurences of a specific value or values\nfilter_dict: [{'columns': 'a column in which the value to count is present'}, {'value': 'the value to count '}]\n"", ""function name:min\nbase_api: http://127.0.0.1:5200/min\ndescription: Retrieves the maximum value for a list of specified columns in a dataframe\nreturn_type: single value\nfilter_dict: [{'columns': 'a list of columns for which the minimum should be retrieved'}, {'rows': 'number of rows to be returned'}]\n"", ""function name:returnResult\ndescription: retrieves or extracts  the previously computed data, specified  by the columns in a dataframe\nfilter_dict: [{'columns': 'which columns to retrun/extract'}]\n"", ""function name:combine\ndescription: combines to data products via a join\nfilter_dict: [{'columns_left': 'which columns of the first data product to match on'}, {'columns_right': 'which columns of the second data product to match on'}, {'type': 'equal or unequal'}]\n""]",0.0,0.0,0.0,0.0,0,1.0
18,862,"For the Bahrain Grand Prix in 2007, how many drivers not finished the game?",simple,filter,formula_1,filter for driverStandings related to the extracted raceId,"function name:filter
base_api: http://127.0.0.1:5200/filter
description: filters a data product based on the provided filterdict, it filters row wise keeping all input columns
filter_dict: [{'conditions': 'a dict ith the corresponding columns and their values'}]
example: {'condition':{'location':'berlin','year':{'min':2002,'max':2007}}
","The most fitting function for your problem is:

**Function Name:** `returnResult`  
**Description:** Retrieves or extracts the previously computed data, specified by the columns in a dataframe.  
**Filter Dictionary:** [{'columns': 'which columns to return/extract'}]  

This function can be used to filter and extract the driver standings related to the specified raceId.","[""function name:count\nbase_api: http://127.0.0.1:5200/count\ndescription: counts the occurences of a specific value or values\nfilter_dict: [{'columns': 'a column in which the value to count is present'}, {'value': 'the value to count '}]\n"", ""function name:min\nbase_api: http://127.0.0.1:5200/min\ndescription: Retrieves the maximum value for a list of specified columns in a dataframe\nreturn_type: single value\nfilter_dict: [{'columns': 'a list of columns for which the minimum should be retrieved'}, {'rows': 'number of rows to be returned'}]\n"", ""function name:returnResult\ndescription: retrieves or extracts  the previously computed data, specified  by the columns in a dataframe\nfilter_dict: [{'columns': 'which columns to retrun/extract'}]\n"", ""function name:combine\ndescription: combines to data products via a join\nfilter_dict: [{'columns_left': 'which columns of the first data product to match on'}, {'columns_right': 'which columns of the second data product to match on'}, {'type': 'equal or unequal'}]\n""]",0.0,0.0,0.0,0.0,0,1.0
19,862,"For the Bahrain Grand Prix in 2007, how many drivers not finished the game?",simple,filter,formula_1,"identify drivers with finishing positions indicating they did not finish (e.g., ""DNF"")","function name:filter
base_api: http://127.0.0.1:5200/filter
description: filters a data product based on the provided filterdict, it filters row wise keeping all input columns
filter_dict: [{'conditions': 'a dict ith the corresponding columns and their values'}]
example: {'condition':{'location':'berlin','year':{'min':2002,'max':2007}}
","The most fitting function for your problem is:

**Function Name:** count  
**Description:** Counts the occurrences of a specific value or values.  
**Filter Dictionary:** [{'columns': 'a column in which the value to count is present'}, {'value': 'the value to count '}]  
**Base API:** http://127.0.0.1:5200/count  

This function can be used to count the occurrences of ""DNF"" in the specified column, helping you identify drivers with finishing positions indicating they did not finish.","[""function name:count\nbase_api: http://127.0.0.1:5200/count\ndescription: counts the occurences of a specific value or values\nfilter_dict: [{'columns': 'a column in which the value to count is present'}, {'value': 'the value to count '}]\n"", ""function name:min\nbase_api: http://127.0.0.1:5200/min\ndescription: Retrieves the maximum value for a list of specified columns in a dataframe\nreturn_type: single value\nfilter_dict: [{'columns': 'a list of columns for which the minimum should be retrieved'}, {'rows': 'number of rows to be returned'}]\n"", ""function name:returnResult\ndescription: retrieves or extracts  the previously computed data, specified  by the columns in a dataframe\nfilter_dict: [{'columns': 'which columns to retrun/extract'}]\n"", ""function name:combine\ndescription: combines to data products via a join\nfilter_dict: [{'columns_left': 'which columns of the first data product to match on'}, {'columns_right': 'which columns of the second data product to match on'}, {'type': 'equal or unequal'}]\n""]",0.0,0.0,0.0,0.0,0,0.0
20,862,"For the Bahrain Grand Prix in 2007, how many drivers not finished the game?",simple,count,formula_1,count the number of drivers who did not finish,"function name:count
base_api: http://127.0.0.1:5200/count
description: counts the occurences of a specific value or values
filter_dict: [{'columns': 'a column in which the value to count is present'}, {'value': 'the value to count '}]
","The most fitting function for your problem is:

**Function Name:** count  
**Description:** counts the occurrences of a specific value or values  
**Base API:** http://127.0.0.1:5200/count  
**Filter Dictionary:** [{'columns': 'a column in which the value to count is present'}, {'value': 'the value to count '}]

This function can be used to count the number of drivers who did not finish by specifying the appropriate column and value.","[""function name:count\nbase_api: http://127.0.0.1:5200/count\ndescription: counts the occurences of a specific value or values\nfilter_dict: [{'columns': 'a column in which the value to count is present'}, {'value': 'the value to count '}]\n"", ""function name:min\nbase_api: http://127.0.0.1:5200/min\ndescription: Retrieves the maximum value for a list of specified columns in a dataframe\nreturn_type: single value\nfilter_dict: [{'columns': 'a list of columns for which the minimum should be retrieved'}, {'rows': 'number of rows to be returned'}]\n"", ""function name:returnResult\ndescription: retrieves or extracts  the previously computed data, specified  by the columns in a dataframe\nfilter_dict: [{'columns': 'which columns to retrun/extract'}]\n"", ""function name:combine\ndescription: combines to data products via a join\nfilter_dict: [{'columns_left': 'which columns of the first data product to match on'}, {'columns_right': 'which columns of the second data product to match on'}, {'type': 'equal or unequal'}]\n""]",0.25,0.25,1.0,0.4,1,1.0
21,862,"For the Bahrain Grand Prix in 2007, how many drivers not finished the game?",simple,returnResult,formula_1,return finished product,"function name:returnResult
description: retrieves or extracts  the previously computed data, specified  by the columns in a dataframe
filter_dict: [{'columns': 'which columns to retrun/extract'}]
","The most fitting function for your request is:

**Function Name:** returnResult  
**Description:** retrieves or extracts the previously computed data, specified by the columns in a dataframe  
**Filter Dictionary:** [{'columns': 'which columns to return/extract'}]","[""function name:count\nbase_api: http://127.0.0.1:5200/count\ndescription: counts the occurences of a specific value or values\nfilter_dict: [{'columns': 'a column in which the value to count is present'}, {'value': 'the value to count '}]\n"", ""function name:min\nbase_api: http://127.0.0.1:5200/min\ndescription: Retrieves the maximum value for a list of specified columns in a dataframe\nreturn_type: single value\nfilter_dict: [{'columns': 'a list of columns for which the minimum should be retrieved'}, {'rows': 'number of rows to be returned'}]\n"", ""function name:returnResult\ndescription: retrieves or extracts  the previously computed data, specified  by the columns in a dataframe\nfilter_dict: [{'columns': 'which columns to retrun/extract'}]\n"", ""function name:combine\ndescription: combines to data products via a join\nfilter_dict: [{'columns_left': 'which columns of the first data product to match on'}, {'columns_right': 'which columns of the second data product to match on'}, {'type': 'equal or unequal'}]\n""]",0.0833333333333333,0.25,1.0,0.4,1,1.0
22,875,Show me the season page of year when the race No. 901 took place.,simple,retrieve,formula_1,retrieve races dataset,"function name:retrieve
description: retrieves the specified data product, takes the data products name and a list of requested columns as arguments
filter_dict: [{'product': 'product url'}]
","The most fitting function for retrieving a dataset is:

**Function Name:** returnResult  
**Description:** retrieves or extracts the previously computed data, specified by the columns in a dataframe.  
**Filter Dictionary:** [{'columns': 'which columns to return/extract'}]","[""function name:count\nbase_api: http://127.0.0.1:5200/count\ndescription: counts the occurences of a specific value or values\nfilter_dict: [{'columns': 'a column in which the value to count is present'}, {'value': 'the value to count '}]\n"", 'function name:sortby\nbase_api: http://127.0.0.1:5200/sortby\ndescription: sorts the data based on a the provided columns and either ascending or descending\nfilter_dict: [{\'columns\': \'a column on which the sorting is based on\'}, {\'ascending\': ""\'True\' if the data is sorted ascending, \'False\' for descending""}]\n', ""function name:returnResult\ndescription: retrieves or extracts  the previously computed data, specified  by the columns in a dataframe\nfilter_dict: [{'columns': 'which columns to retrun/extract'}]\n"", ""function name:combine\ndescription: combines to data products via a join\nfilter_dict: [{'columns_left': 'which columns of the first data product to match on'}, {'columns_right': 'which columns of the second data product to match on'}, {'type': 'equal or unequal'}]\n""]",0.0,0.0,0.0,0.0,0,1.0
23,875,Show me the season page of year when the race No. 901 took place.,simple,filter,formula_1,filter for race No. 901 to identify the year,"function name:filter
base_api: http://127.0.0.1:5200/filter
description: filters a data product based on the provided filterdict, it filters row wise keeping all input columns
filter_dict: [{'conditions': 'a dict ith the corresponding columns and their values'}]
example: {'condition':{'location':'berlin','year':{'min':2002,'max':2007}}
","The most fitting function for your problem is:

**Function Name:** count  
**Description:** counts the occurrences of a specific value or values.  
**Filter Dictionary:** [{'columns': 'a column in which the value to count is present'}, {'value': 'the value to count '}].  

This function can be used to filter for race No. 901 and identify the year by counting occurrences in the relevant column.","[""function name:count\nbase_api: http://127.0.0.1:5200/count\ndescription: counts the occurences of a specific value or values\nfilter_dict: [{'columns': 'a column in which the value to count is present'}, {'value': 'the value to count '}]\n"", 'function name:sortby\nbase_api: http://127.0.0.1:5200/sortby\ndescription: sorts the data based on a the provided columns and either ascending or descending\nfilter_dict: [{\'columns\': \'a column on which the sorting is based on\'}, {\'ascending\': ""\'True\' if the data is sorted ascending, \'False\' for descending""}]\n', ""function name:returnResult\ndescription: retrieves or extracts  the previously computed data, specified  by the columns in a dataframe\nfilter_dict: [{'columns': 'which columns to retrun/extract'}]\n"", ""function name:combine\ndescription: combines to data products via a join\nfilter_dict: [{'columns_left': 'which columns of the first data product to match on'}, {'columns_right': 'which columns of the second data product to match on'}, {'type': 'equal or unequal'}]\n""]",0.0,0.0,0.0,0.0,0,1.0
24,875,Show me the season page of year when the race No. 901 took place.,simple,retrieve,formula_1,retrieve seasons dataset,"function name:retrieve
description: retrieves the specified data product, takes the data products name and a list of requested columns as arguments
filter_dict: [{'product': 'product url'}]
","The most fitting function for retrieving the seasons dataset is:

**Function Name:** returnResult  
**Description:** retrieves or extracts the previously computed data, specified by the columns in a dataframe.  
**Filter Dictionary:** [{'columns': 'which columns to return/extract'}]","[""function name:count\nbase_api: http://127.0.0.1:5200/count\ndescription: counts the occurences of a specific value or values\nfilter_dict: [{'columns': 'a column in which the value to count is present'}, {'value': 'the value to count '}]\n"", 'function name:sortby\nbase_api: http://127.0.0.1:5200/sortby\ndescription: sorts the data based on a the provided columns and either ascending or descending\nfilter_dict: [{\'columns\': \'a column on which the sorting is based on\'}, {\'ascending\': ""\'True\' if the data is sorted ascending, \'False\' for descending""}]\n', ""function name:returnResult\ndescription: retrieves or extracts  the previously computed data, specified  by the columns in a dataframe\nfilter_dict: [{'columns': 'which columns to retrun/extract'}]\n"", ""function name:combine\ndescription: combines to data products via a join\nfilter_dict: [{'columns_left': 'which columns of the first data product to match on'}, {'columns_right': 'which columns of the second data product to match on'}, {'type': 'equal or unequal'}]\n""]",0.0,0.0,0.0,0.0,0,1.0
25,875,Show me the season page of year when the race No. 901 took place.,simple,combine,formula_1,combine the year from races dataset with the seasons dataset to find the corresponding season page,"function name:combine
description: combines to data products via a join
filter_dict: [{'columns_left': 'which columns of the first data product to match on'}, {'columns_right': 'which columns of the second data product to match on'}, {'type': 'equal or unequal'}]
","The most fitting function for your problem is:

**Function Name:** combine  
**Description:** combines two data products via a join  
**Filter Dictionary:** [{'columns_left': 'which columns of the first data product to match on'}, {'columns_right': 'which columns of the second data product to match on'}, {'type': 'equal or unequal'}]  

This function allows you to combine the year from the races dataset with the seasons dataset to find the corresponding season page.","[""function name:count\nbase_api: http://127.0.0.1:5200/count\ndescription: counts the occurences of a specific value or values\nfilter_dict: [{'columns': 'a column in which the value to count is present'}, {'value': 'the value to count '}]\n"", 'function name:sortby\nbase_api: http://127.0.0.1:5200/sortby\ndescription: sorts the data based on a the provided columns and either ascending or descending\nfilter_dict: [{\'columns\': \'a column on which the sorting is based on\'}, {\'ascending\': ""\'True\' if the data is sorted ascending, \'False\' for descending""}]\n', ""function name:returnResult\ndescription: retrieves or extracts  the previously computed data, specified  by the columns in a dataframe\nfilter_dict: [{'columns': 'which columns to retrun/extract'}]\n"", ""function name:combine\ndescription: combines to data products via a join\nfilter_dict: [{'columns_left': 'which columns of the first data product to match on'}, {'columns_right': 'which columns of the second data product to match on'}, {'type': 'equal or unequal'}]\n""]",0.0625,0.25,1.0,0.4,1,1.0
26,875,Show me the season page of year when the race No. 901 took place.,simple,returnResult,formula_1,return finished product,"function name:returnResult
description: retrieves or extracts  the previously computed data, specified  by the columns in a dataframe
filter_dict: [{'columns': 'which columns to retrun/extract'}]
","The most fitting function for your request is:

**Function Name:** returnResult  
**Description:** retrieves or extracts the previously computed data, specified by the columns in a dataframe.  
**Filter Dictionary:** [{'columns': 'which columns to return/extract'}]","[""function name:count\nbase_api: http://127.0.0.1:5200/count\ndescription: counts the occurences of a specific value or values\nfilter_dict: [{'columns': 'a column in which the value to count is present'}, {'value': 'the value to count '}]\n"", 'function name:sortby\nbase_api: http://127.0.0.1:5200/sortby\ndescription: sorts the data based on a the provided columns and either ascending or descending\nfilter_dict: [{\'columns\': \'a column on which the sorting is based on\'}, {\'ascending\': ""\'True\' if the data is sorted ascending, \'False\' for descending""}]\n', ""function name:returnResult\ndescription: retrieves or extracts  the previously computed data, specified  by the columns in a dataframe\nfilter_dict: [{'columns': 'which columns to retrun/extract'}]\n"", ""function name:combine\ndescription: combines to data products via a join\nfilter_dict: [{'columns_left': 'which columns of the first data product to match on'}, {'columns_right': 'which columns of the second data product to match on'}, {'type': 'equal or unequal'}]\n""]",0.0833333333333333,0.25,1.0,0.4,1,1.0
27,951,How many Japanese constructors have 0 points in 2 races?,simple,retrieve,formula_1,retrieve constructorStandings data,"function name:retrieve
description: retrieves the specified data product, takes the data products name and a list of requested columns as arguments
filter_dict: [{'product': 'product url'}]
","The most fitting function for retrieving constructorStandings data is:

**Function Name:** returnResult  
**Description:** retrieves or extracts the previously computed data, specified by the columns in a dataframe  
**Filter Dictionary:** [{'columns': 'which columns to return/extract'}]","[""function name:count\nbase_api: http://127.0.0.1:5200/count\ndescription: counts the occurences of a specific value or values\nfilter_dict: [{'columns': 'a column in which the value to count is present'}, {'value': 'the value to count '}]\n"", ""function name:min\nbase_api: http://127.0.0.1:5200/min\ndescription: Retrieves the maximum value for a list of specified columns in a dataframe\nreturn_type: single value\nfilter_dict: [{'columns': 'a list of columns for which the minimum should be retrieved'}, {'rows': 'number of rows to be returned'}]\n"", ""function name:combine\ndescription: combines to data products via a join\nfilter_dict: [{'columns_left': 'which columns of the first data product to match on'}, {'columns_right': 'which columns of the second data product to match on'}, {'type': 'equal or unequal'}]\n"", ""function name:returnResult\ndescription: retrieves or extracts  the previously computed data, specified  by the columns in a dataframe\nfilter_dict: [{'columns': 'which columns to retrun/extract'}]\n""]",0.0,0.0,0.0,0.0,0,1.0
28,951,How many Japanese constructors have 0 points in 2 races?,simple,retrieve,formula_1,retrieve constructorResults data,"function name:retrieve
description: retrieves the specified data product, takes the data products name and a list of requested columns as arguments
filter_dict: [{'product': 'product url'}]
","The most fitting function for retrieving constructorResults data is:

**Function Name:** returnResult  
**Description:** retrieves or extracts the previously computed data, specified by the columns in a dataframe.  
**Filter Dictionary:** [{'columns': 'which columns to return/extract'}]","[""function name:count\nbase_api: http://127.0.0.1:5200/count\ndescription: counts the occurences of a specific value or values\nfilter_dict: [{'columns': 'a column in which the value to count is present'}, {'value': 'the value to count '}]\n"", ""function name:min\nbase_api: http://127.0.0.1:5200/min\ndescription: Retrieves the maximum value for a list of specified columns in a dataframe\nreturn_type: single value\nfilter_dict: [{'columns': 'a list of columns for which the minimum should be retrieved'}, {'rows': 'number of rows to be returned'}]\n"", ""function name:combine\ndescription: combines to data products via a join\nfilter_dict: [{'columns_left': 'which columns of the first data product to match on'}, {'columns_right': 'which columns of the second data product to match on'}, {'type': 'equal or unequal'}]\n"", ""function name:returnResult\ndescription: retrieves or extracts  the previously computed data, specified  by the columns in a dataframe\nfilter_dict: [{'columns': 'which columns to retrun/extract'}]\n""]",0.0,0.0,0.0,0.0,0,1.0
29,951,How many Japanese constructors have 0 points in 2 races?,simple,retrieve,formula_1,retrieve races data,"function name:retrieve
description: retrieves the specified data product, takes the data products name and a list of requested columns as arguments
filter_dict: [{'product': 'product url'}]
","The most fitting function for retrieving races data is:

**Function Name:** returnResult  
**Description:** retrieves or extracts the previously computed data, specified by the columns in a dataframe  
**Filter Dictionary:** [{'columns': 'which columns to return/extract'}]","[""function name:count\nbase_api: http://127.0.0.1:5200/count\ndescription: counts the occurences of a specific value or values\nfilter_dict: [{'columns': 'a column in which the value to count is present'}, {'value': 'the value to count '}]\n"", ""function name:min\nbase_api: http://127.0.0.1:5200/min\ndescription: Retrieves the maximum value for a list of specified columns in a dataframe\nreturn_type: single value\nfilter_dict: [{'columns': 'a list of columns for which the minimum should be retrieved'}, {'rows': 'number of rows to be returned'}]\n"", ""function name:combine\ndescription: combines to data products via a join\nfilter_dict: [{'columns_left': 'which columns of the first data product to match on'}, {'columns_right': 'which columns of the second data product to match on'}, {'type': 'equal or unequal'}]\n"", ""function name:returnResult\ndescription: retrieves or extracts  the previously computed data, specified  by the columns in a dataframe\nfilter_dict: [{'columns': 'which columns to retrun/extract'}]\n""]",0.0,0.0,0.0,0.0,0,1.0
30,951,How many Japanese constructors have 0 points in 2 races?,simple,filter,formula_1,filter constructorStandings for Japanese constructors,"function name:filter
base_api: http://127.0.0.1:5200/filter
description: filters a data product based on the provided filterdict, it filters row wise keeping all input columns
filter_dict: [{'conditions': 'a dict ith the corresponding columns and their values'}]
example: {'condition':{'location':'berlin','year':{'min':2002,'max':2007}}
","The most fitting function for your problem is:

**Function Name:** combine  
**Description:** Combines two data products via a join.  
**Filter Dictionary:** [{'columns_left': 'which columns of the first data product to match on'}, {'columns_right': 'which columns of the second data product to match on'}, {'type': 'equal or unequal'}]  

This function can be used to filter the constructor standings by joining relevant data products based on the Japanese constructors.","[""function name:count\nbase_api: http://127.0.0.1:5200/count\ndescription: counts the occurences of a specific value or values\nfilter_dict: [{'columns': 'a column in which the value to count is present'}, {'value': 'the value to count '}]\n"", ""function name:min\nbase_api: http://127.0.0.1:5200/min\ndescription: Retrieves the maximum value for a list of specified columns in a dataframe\nreturn_type: single value\nfilter_dict: [{'columns': 'a list of columns for which the minimum should be retrieved'}, {'rows': 'number of rows to be returned'}]\n"", ""function name:combine\ndescription: combines to data products via a join\nfilter_dict: [{'columns_left': 'which columns of the first data product to match on'}, {'columns_right': 'which columns of the second data product to match on'}, {'type': 'equal or unequal'}]\n"", ""function name:returnResult\ndescription: retrieves or extracts  the previously computed data, specified  by the columns in a dataframe\nfilter_dict: [{'columns': 'which columns to retrun/extract'}]\n""]",0.0,0.0,0.0,0.0,0,1.0
31,951,How many Japanese constructors have 0 points in 2 races?,simple,filter,formula_1,filter constructorResults for constructors with 0 points,"function name:filter
base_api: http://127.0.0.1:5200/filter
description: filters a data product based on the provided filterdict, it filters row wise keeping all input columns
filter_dict: [{'conditions': 'a dict ith the corresponding columns and their values'}]
example: {'condition':{'location':'berlin','year':{'min':2002,'max':2007}}
","The most fitting function for your problem is:

**Function Name:** count  
**Description:** Counts the occurrences of a specific value or values.  
**Filter Dictionary:** [{'columns': 'a column in which the value to count is present'}, {'value': 'the value to count '}].  

This function can be used to count the occurrences of constructors with 0 points in the specified column.","[""function name:count\nbase_api: http://127.0.0.1:5200/count\ndescription: counts the occurences of a specific value or values\nfilter_dict: [{'columns': 'a column in which the value to count is present'}, {'value': 'the value to count '}]\n"", ""function name:min\nbase_api: http://127.0.0.1:5200/min\ndescription: Retrieves the maximum value for a list of specified columns in a dataframe\nreturn_type: single value\nfilter_dict: [{'columns': 'a list of columns for which the minimum should be retrieved'}, {'rows': 'number of rows to be returned'}]\n"", ""function name:combine\ndescription: combines to data products via a join\nfilter_dict: [{'columns_left': 'which columns of the first data product to match on'}, {'columns_right': 'which columns of the second data product to match on'}, {'type': 'equal or unequal'}]\n"", ""function name:returnResult\ndescription: retrieves or extracts  the previously computed data, specified  by the columns in a dataframe\nfilter_dict: [{'columns': 'which columns to retrun/extract'}]\n""]",0.0,0.0,0.0,0.0,0,0.0
32,951,How many Japanese constructors have 0 points in 2 races?,simple,filter,formula_1,filter races to identify the two specific races,"function name:filter
base_api: http://127.0.0.1:5200/filter
description: filters a data product based on the provided filterdict, it filters row wise keeping all input columns
filter_dict: [{'conditions': 'a dict ith the corresponding columns and their values'}]
example: {'condition':{'location':'berlin','year':{'min':2002,'max':2007}}
","The most fitting function for your problem is:

**Function Name:** combine  
**Description:** combines two data products via a join  
**Filter Dictionary:** [{'columns_left': 'which columns of the first data product to match on'}, {'columns_right': 'which columns of the second data product to match on'}, {'type': 'equal or unequal'}]","[""function name:count\nbase_api: http://127.0.0.1:5200/count\ndescription: counts the occurences of a specific value or values\nfilter_dict: [{'columns': 'a column in which the value to count is present'}, {'value': 'the value to count '}]\n"", ""function name:min\nbase_api: http://127.0.0.1:5200/min\ndescription: Retrieves the maximum value for a list of specified columns in a dataframe\nreturn_type: single value\nfilter_dict: [{'columns': 'a list of columns for which the minimum should be retrieved'}, {'rows': 'number of rows to be returned'}]\n"", ""function name:combine\ndescription: combines to data products via a join\nfilter_dict: [{'columns_left': 'which columns of the first data product to match on'}, {'columns_right': 'which columns of the second data product to match on'}, {'type': 'equal or unequal'}]\n"", ""function name:returnResult\ndescription: retrieves or extracts  the previously computed data, specified  by the columns in a dataframe\nfilter_dict: [{'columns': 'which columns to retrun/extract'}]\n""]",0.0,0.0,0.0,0.0,0,0.0
33,951,How many Japanese constructors have 0 points in 2 races?,simple,combine,formula_1,combine filtered constructorStandings and constructorResults to identify Japanese constructors with 0 points in the two races,"function name:combine
description: combines to data products via a join
filter_dict: [{'columns_left': 'which columns of the first data product to match on'}, {'columns_right': 'which columns of the second data product to match on'}, {'type': 'equal or unequal'}]
","The most fitting function for your problem is:

**Function Name:** combine  
**Description:** combines two data products via a join  
**Filter Dictionary:** [{'columns_left': 'which columns of the first data product to match on'}, {'columns_right': 'which columns of the second data product to match on'}, {'type': 'equal or unequal'}]","[""function name:count\nbase_api: http://127.0.0.1:5200/count\ndescription: counts the occurences of a specific value or values\nfilter_dict: [{'columns': 'a column in which the value to count is present'}, {'value': 'the value to count '}]\n"", ""function name:min\nbase_api: http://127.0.0.1:5200/min\ndescription: Retrieves the maximum value for a list of specified columns in a dataframe\nreturn_type: single value\nfilter_dict: [{'columns': 'a list of columns for which the minimum should be retrieved'}, {'rows': 'number of rows to be returned'}]\n"", ""function name:combine\ndescription: combines to data products via a join\nfilter_dict: [{'columns_left': 'which columns of the first data product to match on'}, {'columns_right': 'which columns of the second data product to match on'}, {'type': 'equal or unequal'}]\n"", ""function name:returnResult\ndescription: retrieves or extracts  the previously computed data, specified  by the columns in a dataframe\nfilter_dict: [{'columns': 'which columns to retrun/extract'}]\n""]",0.0833333333333333,0.25,1.0,0.4,1,1.0
34,951,How many Japanese constructors have 0 points in 2 races?,simple,count,formula_1,count the number of Japanese constructors identified,"function name:count
base_api: http://127.0.0.1:5200/count
description: counts the occurences of a specific value or values
filter_dict: [{'columns': 'a column in which the value to count is present'}, {'value': 'the value to count '}]
","The most fitting function for your problem is:

**Function Name:** count  
**Description:** counts the occurrences of a specific value or values  
**Base API:** http://127.0.0.1:5200/count  
**Filter Dictionary:** [{'columns': 'a column in which the value to count is present'}, {'value': 'the value to count '}]

This function can be used to count the number of occurrences of Japanese constructors by specifying the appropriate column and value.","[""function name:count\nbase_api: http://127.0.0.1:5200/count\ndescription: counts the occurences of a specific value or values\nfilter_dict: [{'columns': 'a column in which the value to count is present'}, {'value': 'the value to count '}]\n"", ""function name:min\nbase_api: http://127.0.0.1:5200/min\ndescription: Retrieves the maximum value for a list of specified columns in a dataframe\nreturn_type: single value\nfilter_dict: [{'columns': 'a list of columns for which the minimum should be retrieved'}, {'rows': 'number of rows to be returned'}]\n"", ""function name:combine\ndescription: combines to data products via a join\nfilter_dict: [{'columns_left': 'which columns of the first data product to match on'}, {'columns_right': 'which columns of the second data product to match on'}, {'type': 'equal or unequal'}]\n"", ""function name:returnResult\ndescription: retrieves or extracts  the previously computed data, specified  by the columns in a dataframe\nfilter_dict: [{'columns': 'which columns to retrun/extract'}]\n""]",0.25,0.25,1.0,0.4,1,1.0
35,951,How many Japanese constructors have 0 points in 2 races?,simple,returnResult,formula_1,return finished product,"function name:returnResult
description: retrieves or extracts  the previously computed data, specified  by the columns in a dataframe
filter_dict: [{'columns': 'which columns to retrun/extract'}]
","The most fitting function for your request is:

**Function Name:** returnResult  
**Description:** retrieves or extracts the previously computed data, specified by the columns in a dataframe  
**Filter Dictionary:** [{'columns': 'which columns to return/extract'}]","[""function name:count\nbase_api: http://127.0.0.1:5200/count\ndescription: counts the occurences of a specific value or values\nfilter_dict: [{'columns': 'a column in which the value to count is present'}, {'value': 'the value to count '}]\n"", ""function name:min\nbase_api: http://127.0.0.1:5200/min\ndescription: Retrieves the maximum value for a list of specified columns in a dataframe\nreturn_type: single value\nfilter_dict: [{'columns': 'a list of columns for which the minimum should be retrieved'}, {'rows': 'number of rows to be returned'}]\n"", ""function name:combine\ndescription: combines to data products via a join\nfilter_dict: [{'columns_left': 'which columns of the first data product to match on'}, {'columns_right': 'which columns of the second data product to match on'}, {'type': 'equal or unequal'}]\n"", ""function name:returnResult\ndescription: retrieves or extracts  the previously computed data, specified  by the columns in a dataframe\nfilter_dict: [{'columns': 'which columns to retrun/extract'}]\n""]",0.0625,0.25,1.0,0.4,1,1.0
36,737,What is Copycat's race?,simple,retrieve,superhero,retrieve race dataset,"function name:retrieve
description: retrieves the specified data product, takes the data products name and a list of requested columns as arguments
filter_dict: [{'product': 'product url'}]
","The most fitting function for retrieving a race dataset is:

**Function Name:** returnResult  
**Description:** retrieves or extracts the previously computed data, specified by the columns in a dataframe.  
**Filter Dictionary:** [{'columns': 'which columns to return/extract'}]","[""function name:count\nbase_api: http://127.0.0.1:5200/count\ndescription: counts the occurences of a specific value or values\nfilter_dict: [{'columns': 'a column in which the value to count is present'}, {'value': 'the value to count '}]\n"", 'function name:sortby\nbase_api: http://127.0.0.1:5200/sortby\ndescription: sorts the data based on a the provided columns and either ascending or descending\nfilter_dict: [{\'columns\': \'a column on which the sorting is based on\'}, {\'ascending\': ""\'True\' if the data is sorted ascending, \'False\' for descending""}]\n', ""function name:returnResult\ndescription: retrieves or extracts  the previously computed data, specified  by the columns in a dataframe\nfilter_dict: [{'columns': 'which columns to retrun/extract'}]\n"", ""function name:combine\ndescription: combines to data products via a join\nfilter_dict: [{'columns_left': 'which columns of the first data product to match on'}, {'columns_right': 'which columns of the second data product to match on'}, {'type': 'equal or unequal'}]\n""]",0.0,0.0,0.0,0.0,0,1.0
37,737,What is Copycat's race?,simple,filter,superhero,filter for Copycat's race,"function name:filter
base_api: http://127.0.0.1:5200/filter
description: filters a data product based on the provided filterdict, it filters row wise keeping all input columns
filter_dict: [{'conditions': 'a dict ith the corresponding columns and their values'}]
example: {'condition':{'location':'berlin','year':{'min':2002,'max':2007}}
","The most fitting function for filtering for Copycat's race is:

**Function Name:** `returnResult`  
**Description:** Retrieves or extracts the previously computed data, specified by the columns in a dataframe.  
**Filter Dictionary:** [{'columns': 'which columns to return/extract'}]","[""function name:count\nbase_api: http://127.0.0.1:5200/count\ndescription: counts the occurences of a specific value or values\nfilter_dict: [{'columns': 'a column in which the value to count is present'}, {'value': 'the value to count '}]\n"", 'function name:sortby\nbase_api: http://127.0.0.1:5200/sortby\ndescription: sorts the data based on a the provided columns and either ascending or descending\nfilter_dict: [{\'columns\': \'a column on which the sorting is based on\'}, {\'ascending\': ""\'True\' if the data is sorted ascending, \'False\' for descending""}]\n', ""function name:returnResult\ndescription: retrieves or extracts  the previously computed data, specified  by the columns in a dataframe\nfilter_dict: [{'columns': 'which columns to retrun/extract'}]\n"", ""function name:combine\ndescription: combines to data products via a join\nfilter_dict: [{'columns_left': 'which columns of the first data product to match on'}, {'columns_right': 'which columns of the second data product to match on'}, {'type': 'equal or unequal'}]\n""]",0.0,0.0,0.0,0.0,0,1.0
38,737,What is Copycat's race?,simple,retrieve,superhero,retrieve foreign_data dataset,"function name:retrieve
description: retrieves the specified data product, takes the data products name and a list of requested columns as arguments
filter_dict: [{'product': 'product url'}]
","The most fitting function for retrieving the foreign_data dataset is:

**Function Name:** returnResult  
**Description:** retrieves or extracts the previously computed data, specified by the columns in a dataframe.  
**Filter Dictionary:** [{'columns': 'which columns to return/extract'}]","[""function name:count\nbase_api: http://127.0.0.1:5200/count\ndescription: counts the occurences of a specific value or values\nfilter_dict: [{'columns': 'a column in which the value to count is present'}, {'value': 'the value to count '}]\n"", 'function name:sortby\nbase_api: http://127.0.0.1:5200/sortby\ndescription: sorts the data based on a the provided columns and either ascending or descending\nfilter_dict: [{\'columns\': \'a column on which the sorting is based on\'}, {\'ascending\': ""\'True\' if the data is sorted ascending, \'False\' for descending""}]\n', ""function name:returnResult\ndescription: retrieves or extracts  the previously computed data, specified  by the columns in a dataframe\nfilter_dict: [{'columns': 'which columns to retrun/extract'}]\n"", ""function name:combine\ndescription: combines to data products via a join\nfilter_dict: [{'columns_left': 'which columns of the first data product to match on'}, {'columns_right': 'which columns of the second data product to match on'}, {'type': 'equal or unequal'}]\n""]",0.0,0.0,0.0,0.0,0,1.0
39,737,What is Copycat's race?,simple,filter,superhero,filter for Copycat's characteristics,"function name:filter
base_api: http://127.0.0.1:5200/filter
description: filters a data product based on the provided filterdict, it filters row wise keeping all input columns
filter_dict: [{'conditions': 'a dict ith the corresponding columns and their values'}]
example: {'condition':{'location':'berlin','year':{'min':2002,'max':2007}}
","The most fitting function for filtering based on specific characteristics is:

**Function Name:** `returnResult`  
**Description:** Retrieves or extracts the previously computed data, specified by the columns in a dataframe.  
**Filter Dictionary:** [{'columns': 'which columns to return/extract'}]","[""function name:count\nbase_api: http://127.0.0.1:5200/count\ndescription: counts the occurences of a specific value or values\nfilter_dict: [{'columns': 'a column in which the value to count is present'}, {'value': 'the value to count '}]\n"", 'function name:sortby\nbase_api: http://127.0.0.1:5200/sortby\ndescription: sorts the data based on a the provided columns and either ascending or descending\nfilter_dict: [{\'columns\': \'a column on which the sorting is based on\'}, {\'ascending\': ""\'True\' if the data is sorted ascending, \'False\' for descending""}]\n', ""function name:returnResult\ndescription: retrieves or extracts  the previously computed data, specified  by the columns in a dataframe\nfilter_dict: [{'columns': 'which columns to retrun/extract'}]\n"", ""function name:combine\ndescription: combines to data products via a join\nfilter_dict: [{'columns_left': 'which columns of the first data product to match on'}, {'columns_right': 'which columns of the second data product to match on'}, {'type': 'equal or unequal'}]\n""]",0.0,0.0,0.0,0.0,0,1.0
40,737,What is Copycat's race?,simple,combine,superhero,combine race from race dataset and characteristics from foreign_data dataset,"function name:combine
description: combines to data products via a join
filter_dict: [{'columns_left': 'which columns of the first data product to match on'}, {'columns_right': 'which columns of the second data product to match on'}, {'type': 'equal or unequal'}]
","The most fitting function for your problem is:

**Function Name:** combine  
**Description:** combines two data products via a join  
**Filter Dictionary:** [{'columns_left': 'which columns of the first data product to match on'}, {'columns_right': 'which columns of the second data product to match on'}, {'type': 'equal or unequal'}]","[""function name:count\nbase_api: http://127.0.0.1:5200/count\ndescription: counts the occurences of a specific value or values\nfilter_dict: [{'columns': 'a column in which the value to count is present'}, {'value': 'the value to count '}]\n"", 'function name:sortby\nbase_api: http://127.0.0.1:5200/sortby\ndescription: sorts the data based on a the provided columns and either ascending or descending\nfilter_dict: [{\'columns\': \'a column on which the sorting is based on\'}, {\'ascending\': ""\'True\' if the data is sorted ascending, \'False\' for descending""}]\n', ""function name:returnResult\ndescription: retrieves or extracts  the previously computed data, specified  by the columns in a dataframe\nfilter_dict: [{'columns': 'which columns to retrun/extract'}]\n"", ""function name:combine\ndescription: combines to data products via a join\nfilter_dict: [{'columns_left': 'which columns of the first data product to match on'}, {'columns_right': 'which columns of the second data product to match on'}, {'type': 'equal or unequal'}]\n""]",0.0625,0.25,1.0,0.4,1,1.0
41,737,What is Copycat's race?,simple,returnResult,superhero,return finished product,"function name:returnResult
description: retrieves or extracts  the previously computed data, specified  by the columns in a dataframe
filter_dict: [{'columns': 'which columns to retrun/extract'}]
","The most fitting function for your request is:

**Function Name:** returnResult  
**Description:** retrieves or extracts the previously computed data, specified by the columns in a dataframe.  
**Filter Dictionary:** [{'columns': 'which columns to return/extract'}]","[""function name:count\nbase_api: http://127.0.0.1:5200/count\ndescription: counts the occurences of a specific value or values\nfilter_dict: [{'columns': 'a column in which the value to count is present'}, {'value': 'the value to count '}]\n"", 'function name:sortby\nbase_api: http://127.0.0.1:5200/sortby\ndescription: sorts the data based on a the provided columns and either ascending or descending\nfilter_dict: [{\'columns\': \'a column on which the sorting is based on\'}, {\'ascending\': ""\'True\' if the data is sorted ascending, \'False\' for descending""}]\n', ""function name:returnResult\ndescription: retrieves or extracts  the previously computed data, specified  by the columns in a dataframe\nfilter_dict: [{'columns': 'which columns to retrun/extract'}]\n"", ""function name:combine\ndescription: combines to data products via a join\nfilter_dict: [{'columns_left': 'which columns of the first data product to match on'}, {'columns_right': 'which columns of the second data product to match on'}, {'type': 'equal or unequal'}]\n""]",0.0833333333333333,0.25,1.0,0.4,1,1.0
42,424,What proportion of cards do not have a text box with a normal layout?,simple,retrieve,card_games,retrieve card dataset,"function name:retrieve
description: retrieves the specified data product, takes the data products name and a list of requested columns as arguments
filter_dict: [{'product': 'product url'}]
","The most fitting function for retrieving a card dataset is:

**Function Name:** returnResult  
**Description:** retrieves or extracts the previously computed data, specified by the columns in a dataframe.  
**Filter Dictionary:** [{'columns': 'which columns to return/extract'}]","[""function name:count\nbase_api: http://127.0.0.1:5200/count\ndescription: counts the occurences of a specific value or values\nfilter_dict: [{'columns': 'a column in which the value to count is present'}, {'value': 'the value to count '}]\n"", ""function name:min\nbase_api: http://127.0.0.1:5200/min\ndescription: Retrieves the maximum value for a list of specified columns in a dataframe\nreturn_type: single value\nfilter_dict: [{'columns': 'a list of columns for which the minimum should be retrieved'}, {'rows': 'number of rows to be returned'}]\n"", ""function name:returnResult\ndescription: retrieves or extracts  the previously computed data, specified  by the columns in a dataframe\nfilter_dict: [{'columns': 'which columns to retrun/extract'}]\n"", ""function name:combine\ndescription: combines to data products via a join\nfilter_dict: [{'columns_left': 'which columns of the first data product to match on'}, {'columns_right': 'which columns of the second data product to match on'}, {'type': 'equal or unequal'}]\n""]",0.0,0.0,0.0,0.0,0,1.0
44,424,What proportion of cards do not have a text box with a normal layout?,simple,retrieve,card_games,retrieve posts dataset,"function name:retrieve
description: retrieves the specified data product, takes the data products name and a list of requested columns as arguments
filter_dict: [{'product': 'product url'}]
","The most fitting function for retrieving a posts dataset is:

**Function Name:** returnResult  
**Description:** retrieves or extracts the previously computed data, specified by the columns in a dataframe.  
**Filter Dictionary:** [{'columns': 'which columns to return/extract'}]","[""function name:count\nbase_api: http://127.0.0.1:5200/count\ndescription: counts the occurences of a specific value or values\nfilter_dict: [{'columns': 'a column in which the value to count is present'}, {'value': 'the value to count '}]\n"", ""function name:min\nbase_api: http://127.0.0.1:5200/min\ndescription: Retrieves the maximum value for a list of specified columns in a dataframe\nreturn_type: single value\nfilter_dict: [{'columns': 'a list of columns for which the minimum should be retrieved'}, {'rows': 'number of rows to be returned'}]\n"", ""function name:returnResult\ndescription: retrieves or extracts  the previously computed data, specified  by the columns in a dataframe\nfilter_dict: [{'columns': 'which columns to retrun/extract'}]\n"", ""function name:combine\ndescription: combines to data products via a join\nfilter_dict: [{'columns_left': 'which columns of the first data product to match on'}, {'columns_right': 'which columns of the second data product to match on'}, {'type': 'equal or unequal'}]\n""]",0.0,0.0,0.0,0.0,0,1.0
46,424,What proportion of cards do not have a text box with a normal layout?,simple,combine,card_games,combine results from card analysis and statistical methods,"function name:combine
description: combines to data products via a join
filter_dict: [{'columns_left': 'which columns of the first data product to match on'}, {'columns_right': 'which columns of the second data product to match on'}, {'type': 'equal or unequal'}]
","The most fitting function for your problem is:

**Function Name:** combine  
**Description:** Combines two data products via a join.  
**Filter Dictionary:** [{'columns_left': 'which columns of the first data product to match on'}, {'columns_right': 'which columns of the second data product to match on'}, {'type': 'equal or unequal'}]","[""function name:count\nbase_api: http://127.0.0.1:5200/count\ndescription: counts the occurences of a specific value or values\nfilter_dict: [{'columns': 'a column in which the value to count is present'}, {'value': 'the value to count '}]\n"", ""function name:min\nbase_api: http://127.0.0.1:5200/min\ndescription: Retrieves the maximum value for a list of specified columns in a dataframe\nreturn_type: single value\nfilter_dict: [{'columns': 'a list of columns for which the minimum should be retrieved'}, {'rows': 'number of rows to be returned'}]\n"", ""function name:returnResult\ndescription: retrieves or extracts  the previously computed data, specified  by the columns in a dataframe\nfilter_dict: [{'columns': 'which columns to retrun/extract'}]\n"", ""function name:combine\ndescription: combines to data products via a join\nfilter_dict: [{'columns_left': 'which columns of the first data product to match on'}, {'columns_right': 'which columns of the second data product to match on'}, {'type': 'equal or unequal'}]\n""]",0.0625,0.25,1.0,0.4,1,1.0
47,424,What proportion of cards do not have a text box with a normal layout?,simple,returnResult,card_games,return finished product,"function name:returnResult
description: retrieves or extracts  the previously computed data, specified  by the columns in a dataframe
filter_dict: [{'columns': 'which columns to retrun/extract'}]
","The most fitting function for your request is:

**Function Name:** returnResult  
**Description:** retrieves or extracts the previously computed data, specified by the columns in a dataframe  
**Filter Dictionary:** [{'columns': 'which columns to return/extract'}]","[""function name:count\nbase_api: http://127.0.0.1:5200/count\ndescription: counts the occurences of a specific value or values\nfilter_dict: [{'columns': 'a column in which the value to count is present'}, {'value': 'the value to count '}]\n"", ""function name:min\nbase_api: http://127.0.0.1:5200/min\ndescription: Retrieves the maximum value for a list of specified columns in a dataframe\nreturn_type: single value\nfilter_dict: [{'columns': 'a list of columns for which the minimum should be retrieved'}, {'rows': 'number of rows to be returned'}]\n"", ""function name:returnResult\ndescription: retrieves or extracts  the previously computed data, specified  by the columns in a dataframe\nfilter_dict: [{'columns': 'which columns to retrun/extract'}]\n"", ""function name:combine\ndescription: combines to data products via a join\nfilter_dict: [{'columns_left': 'which columns of the first data product to match on'}, {'columns_right': 'which columns of the second data product to match on'}, {'type': 'equal or unequal'}]\n""]",0.0833333333333333,0.25,1.0,0.4,1,1.0
48,341,What are the borderless cards available without powerful foils?,simple,retrieve,card_games,retrieve Magic: The Gathering Card Data,"function name:retrieve
description: retrieves the specified data product, takes the data products name and a list of requested columns as arguments
filter_dict: [{'product': 'product url'}]
","The most fitting function for retrieving Magic: The Gathering Card Data is:

**Function Name:** returnResult  
**Description:** Retrieves or extracts the previously computed data, specified by the columns in a dataframe.  
**Filter Dictionary:** [{'columns': 'which columns to return/extract'}]","[""function name:max\nbase_api: http://127.0.0.1:5200/max\ndescription: Retrieves the maximum value for a list of specified columns in a dataframe\nreturn_type: single value\nfilter_dict: [{'columns': 'a list of columns for which the maximum should be retrieved'}, {'rows': 'number of rows to be returned'}]\n"", ""function name:count\nbase_api: http://127.0.0.1:5200/count\ndescription: counts the occurences of a specific value or values\nfilter_dict: [{'columns': 'a column in which the value to count is present'}, {'value': 'the value to count '}]\n"", ""function name:combine\ndescription: combines to data products via a join\nfilter_dict: [{'columns_left': 'which columns of the first data product to match on'}, {'columns_right': 'which columns of the second data product to match on'}, {'type': 'equal or unequal'}]\n"", ""function name:returnResult\ndescription: retrieves or extracts  the previously computed data, specified  by the columns in a dataframe\nfilter_dict: [{'columns': 'which columns to retrun/extract'}]\n""]",0.0,0.0,0.0,0.0,0,0.0
49,341,What are the borderless cards available without powerful foils?,simple,filter,card_games,filter for borderless cards,"function name:filter
base_api: http://127.0.0.1:5200/filter
description: filters a data product based on the provided filterdict, it filters row wise keeping all input columns
filter_dict: [{'conditions': 'a dict ith the corresponding columns and their values'}]
example: {'condition':{'location':'berlin','year':{'min':2002,'max':2007}}
","The most fitting function for filtering borderless cards is the ""count"" function.

**Description:** The ""count"" function counts the occurrences of a specific value or values in a specified column of a dataframe. You can use it to count how many borderless cards exist by specifying the relevant column and the value that indicates a card is borderless. 

**Filter Dictionary:** 
- [{'columns': 'a column in which the value to count is present'}, 
- {'value': 'the value to count (e.g., 'borderless')}]

**Base API:** http://127.0.0.1:5200/count","[""function name:max\nbase_api: http://127.0.0.1:5200/max\ndescription: Retrieves the maximum value for a list of specified columns in a dataframe\nreturn_type: single value\nfilter_dict: [{'columns': 'a list of columns for which the maximum should be retrieved'}, {'rows': 'number of rows to be returned'}]\n"", ""function name:count\nbase_api: http://127.0.0.1:5200/count\ndescription: counts the occurences of a specific value or values\nfilter_dict: [{'columns': 'a column in which the value to count is present'}, {'value': 'the value to count '}]\n"", ""function name:combine\ndescription: combines to data products via a join\nfilter_dict: [{'columns_left': 'which columns of the first data product to match on'}, {'columns_right': 'which columns of the second data product to match on'}, {'type': 'equal or unequal'}]\n"", ""function name:returnResult\ndescription: retrieves or extracts  the previously computed data, specified  by the columns in a dataframe\nfilter_dict: [{'columns': 'which columns to retrun/extract'}]\n""]",0.0,0.0,0.0,0.0,0,1.0
50,341,What are the borderless cards available without powerful foils?,simple,filter,card_games,filter for non-foil cards,"function name:filter
base_api: http://127.0.0.1:5200/filter
description: filters a data product based on the provided filterdict, it filters row wise keeping all input columns
filter_dict: [{'conditions': 'a dict ith the corresponding columns and their values'}]
example: {'condition':{'location':'berlin','year':{'min':2002,'max':2007}}
","The most fitting function for filtering non-foil cards is the ""count"" function.

**Description**: The ""count"" function counts the occurrences of a specific value or values in a specified column of a dataframe. You can use it to count the number of non-foil cards by specifying the column that indicates whether a card is foil or non-foil and providing the value that represents non-foil cards. 

**Filter Dictionary**: 
- [{'columns': 'a column in which the value to count is present'}, 
- {'value': 'the value to count (non-foil)'}]","[""function name:max\nbase_api: http://127.0.0.1:5200/max\ndescription: Retrieves the maximum value for a list of specified columns in a dataframe\nreturn_type: single value\nfilter_dict: [{'columns': 'a list of columns for which the maximum should be retrieved'}, {'rows': 'number of rows to be returned'}]\n"", ""function name:count\nbase_api: http://127.0.0.1:5200/count\ndescription: counts the occurences of a specific value or values\nfilter_dict: [{'columns': 'a column in which the value to count is present'}, {'value': 'the value to count '}]\n"", ""function name:combine\ndescription: combines to data products via a join\nfilter_dict: [{'columns_left': 'which columns of the first data product to match on'}, {'columns_right': 'which columns of the second data product to match on'}, {'type': 'equal or unequal'}]\n"", ""function name:returnResult\ndescription: retrieves or extracts  the previously computed data, specified  by the columns in a dataframe\nfilter_dict: [{'columns': 'which columns to retrun/extract'}]\n""]",0.0,0.0,0.0,0.0,0,1.0
51,341,What are the borderless cards available without powerful foils?,simple,retrieve,card_games,retrieve Core Set Information,"function name:retrieve
description: retrieves the specified data product, takes the data products name and a list of requested columns as arguments
filter_dict: [{'product': 'product url'}]
","The most fitting function for retrieving Core Set Information is:

**Function Name:** returnResult  
**Description:** Retrieves or extracts the previously computed data, specified by the columns in a dataframe.  
**Filter Dictionary:** [{'columns': 'which columns to return/extract'}]","[""function name:max\nbase_api: http://127.0.0.1:5200/max\ndescription: Retrieves the maximum value for a list of specified columns in a dataframe\nreturn_type: single value\nfilter_dict: [{'columns': 'a list of columns for which the maximum should be retrieved'}, {'rows': 'number of rows to be returned'}]\n"", ""function name:count\nbase_api: http://127.0.0.1:5200/count\ndescription: counts the occurences of a specific value or values\nfilter_dict: [{'columns': 'a column in which the value to count is present'}, {'value': 'the value to count '}]\n"", ""function name:combine\ndescription: combines to data products via a join\nfilter_dict: [{'columns_left': 'which columns of the first data product to match on'}, {'columns_right': 'which columns of the second data product to match on'}, {'type': 'equal or unequal'}]\n"", ""function name:returnResult\ndescription: retrieves or extracts  the previously computed data, specified  by the columns in a dataframe\nfilter_dict: [{'columns': 'which columns to retrun/extract'}]\n""]",0.0,0.0,0.0,0.0,0,0.0
52,341,What are the borderless cards available without powerful foils?,simple,combine,card_games,combine results from Magic: The Gathering Card Data and Core Set Information,"function name:combine
description: combines to data products via a join
filter_dict: [{'columns_left': 'which columns of the first data product to match on'}, {'columns_right': 'which columns of the second data product to match on'}, {'type': 'equal or unequal'}]
","The most fitting function for your problem is:

**Function Name:** combine  
**Description:** Combines two data products via a join.  
**Filter Dictionary:** [{'columns_left': 'which columns of the first data product to match on'}, {'columns_right': 'which columns of the second data product to match on'}, {'type': 'equal or unequal'}]","[""function name:max\nbase_api: http://127.0.0.1:5200/max\ndescription: Retrieves the maximum value for a list of specified columns in a dataframe\nreturn_type: single value\nfilter_dict: [{'columns': 'a list of columns for which the maximum should be retrieved'}, {'rows': 'number of rows to be returned'}]\n"", ""function name:count\nbase_api: http://127.0.0.1:5200/count\ndescription: counts the occurences of a specific value or values\nfilter_dict: [{'columns': 'a column in which the value to count is present'}, {'value': 'the value to count '}]\n"", ""function name:combine\ndescription: combines to data products via a join\nfilter_dict: [{'columns_left': 'which columns of the first data product to match on'}, {'columns_right': 'which columns of the second data product to match on'}, {'type': 'equal or unequal'}]\n"", ""function name:returnResult\ndescription: retrieves or extracts  the previously computed data, specified  by the columns in a dataframe\nfilter_dict: [{'columns': 'which columns to retrun/extract'}]\n""]",0.0833333333333333,0.25,1.0,0.4,1,1.0
53,341,What are the borderless cards available without powerful foils?,simple,retrieve,card_games,retrieve Card Characteristics Dataset,"function name:retrieve
description: retrieves the specified data product, takes the data products name and a list of requested columns as arguments
filter_dict: [{'product': 'product url'}]
","The most fitting function for retrieving data is:

**Function Name:** returnResult  
**Description:** Retrieves or extracts the previously computed data, specified by the columns in a dataframe.  
**Filter Dictionary:** [{'columns': 'which columns to return/extract'}]","[""function name:max\nbase_api: http://127.0.0.1:5200/max\ndescription: Retrieves the maximum value for a list of specified columns in a dataframe\nreturn_type: single value\nfilter_dict: [{'columns': 'a list of columns for which the maximum should be retrieved'}, {'rows': 'number of rows to be returned'}]\n"", ""function name:count\nbase_api: http://127.0.0.1:5200/count\ndescription: counts the occurences of a specific value or values\nfilter_dict: [{'columns': 'a column in which the value to count is present'}, {'value': 'the value to count '}]\n"", ""function name:combine\ndescription: combines to data products via a join\nfilter_dict: [{'columns_left': 'which columns of the first data product to match on'}, {'columns_right': 'which columns of the second data product to match on'}, {'type': 'equal or unequal'}]\n"", ""function name:returnResult\ndescription: retrieves or extracts  the previously computed data, specified  by the columns in a dataframe\nfilter_dict: [{'columns': 'which columns to retrun/extract'}]\n""]",0.0,0.0,0.0,0.0,0,0.0
54,341,What are the borderless cards available without powerful foils?,simple,filter,card_games,filter for non-powerful foils,"function name:filter
base_api: http://127.0.0.1:5200/filter
description: filters a data product based on the provided filterdict, it filters row wise keeping all input columns
filter_dict: [{'conditions': 'a dict ith the corresponding columns and their values'}]
example: {'condition':{'location':'berlin','year':{'min':2002,'max':2007}}
","The most fitting function for filtering non-powerful foils is not explicitly listed in the provided context. However, based on the available functions, the ""combine"" function could potentially be adapted to join datasets that include information about foils, allowing for filtering based on specific criteria. 

Function: combine
Description: Combines two data products via a join.
Filter_dict: [{'columns_left': 'which columns of the first data product to match on'}, {'columns_right': 'which columns of the second data product to match on'}, {'type': 'equal or unequal'}]","[""function name:max\nbase_api: http://127.0.0.1:5200/max\ndescription: Retrieves the maximum value for a list of specified columns in a dataframe\nreturn_type: single value\nfilter_dict: [{'columns': 'a list of columns for which the maximum should be retrieved'}, {'rows': 'number of rows to be returned'}]\n"", ""function name:count\nbase_api: http://127.0.0.1:5200/count\ndescription: counts the occurences of a specific value or values\nfilter_dict: [{'columns': 'a column in which the value to count is present'}, {'value': 'the value to count '}]\n"", ""function name:combine\ndescription: combines to data products via a join\nfilter_dict: [{'columns_left': 'which columns of the first data product to match on'}, {'columns_right': 'which columns of the second data product to match on'}, {'type': 'equal or unequal'}]\n"", ""function name:returnResult\ndescription: retrieves or extracts  the previously computed data, specified  by the columns in a dataframe\nfilter_dict: [{'columns': 'which columns to retrun/extract'}]\n""]",0.0,0.0,0.0,0.0,0,1.0
55,341,What are the borderless cards available without powerful foils?,simple,combine,card_games,combine results from the previous combination and Card Characteristics Dataset,"function name:combine
description: combines to data products via a join
filter_dict: [{'columns_left': 'which columns of the first data product to match on'}, {'columns_right': 'which columns of the second data product to match on'}, {'type': 'equal or unequal'}]
","The most fitting function for your problem is:

**Function Name:** combine  
**Description:** Combines two data products via a join.  
**Filter Dictionary:** [{'columns_left': 'which columns of the first data product to match on'}, {'columns_right': 'which columns of the second data product to match on'}, {'type': 'equal or unequal'}]","[""function name:max\nbase_api: http://127.0.0.1:5200/max\ndescription: Retrieves the maximum value for a list of specified columns in a dataframe\nreturn_type: single value\nfilter_dict: [{'columns': 'a list of columns for which the maximum should be retrieved'}, {'rows': 'number of rows to be returned'}]\n"", ""function name:count\nbase_api: http://127.0.0.1:5200/count\ndescription: counts the occurences of a specific value or values\nfilter_dict: [{'columns': 'a column in which the value to count is present'}, {'value': 'the value to count '}]\n"", ""function name:combine\ndescription: combines to data products via a join\nfilter_dict: [{'columns_left': 'which columns of the first data product to match on'}, {'columns_right': 'which columns of the second data product to match on'}, {'type': 'equal or unequal'}]\n"", ""function name:returnResult\ndescription: retrieves or extracts  the previously computed data, specified  by the columns in a dataframe\nfilter_dict: [{'columns': 'which columns to retrun/extract'}]\n""]",0.0833333333333333,0.25,1.0,0.4,1,1.0
56,341,What are the borderless cards available without powerful foils?,simple,returnResult,card_games,return finished product,"function name:returnResult
description: retrieves or extracts  the previously computed data, specified  by the columns in a dataframe
filter_dict: [{'columns': 'which columns to retrun/extract'}]
","The most fitting function for your problem is:

**Function Name:** returnResult  
**Description:** Retrieves or extracts the previously computed data, specified by the columns in a dataframe.  
**Filter Dictionary:** [{'columns': 'which columns to return/extract'}]","[""function name:max\nbase_api: http://127.0.0.1:5200/max\ndescription: Retrieves the maximum value for a list of specified columns in a dataframe\nreturn_type: single value\nfilter_dict: [{'columns': 'a list of columns for which the maximum should be retrieved'}, {'rows': 'number of rows to be returned'}]\n"", ""function name:count\nbase_api: http://127.0.0.1:5200/count\ndescription: counts the occurences of a specific value or values\nfilter_dict: [{'columns': 'a column in which the value to count is present'}, {'value': 'the value to count '}]\n"", ""function name:combine\ndescription: combines to data products via a join\nfilter_dict: [{'columns_left': 'which columns of the first data product to match on'}, {'columns_right': 'which columns of the second data product to match on'}, {'type': 'equal or unequal'}]\n"", ""function name:returnResult\ndescription: retrieves or extracts  the previously computed data, specified  by the columns in a dataframe\nfilter_dict: [{'columns': 'which columns to retrun/extract'}]\n""]",0.0625,0.25,1.0,0.4,1,1.0
57,1145,Which top 4 leagues had the most games in the 2015-2016 season?,simple,retrieve,european_football_2,retrieve Match Dataset,"function name:retrieve
description: retrieves the specified data product, takes the data products name and a list of requested columns as arguments
filter_dict: [{'product': 'product url'}]
","The most fitting function for retrieving a match dataset is:

**Function Name:** returnResult  
**Description:** Retrieves or extracts the previously computed data, specified by the columns in a dataframe.  
**Filter Dictionary:** [{'columns': 'which columns to return/extract'}]","[""function name:max\nbase_api: http://127.0.0.1:5200/max\ndescription: Retrieves the maximum value for a list of specified columns in a dataframe\nreturn_type: single value\nfilter_dict: [{'columns': 'a list of columns for which the maximum should be retrieved'}, {'rows': 'number of rows to be returned'}]\n"", ""function name:count\nbase_api: http://127.0.0.1:5200/count\ndescription: counts the occurences of a specific value or values\nfilter_dict: [{'columns': 'a column in which the value to count is present'}, {'value': 'the value to count '}]\n"", ""function name:returnResult\ndescription: retrieves or extracts  the previously computed data, specified  by the columns in a dataframe\nfilter_dict: [{'columns': 'which columns to retrun/extract'}]\n"", ""function name:combine\ndescription: combines to data products via a join\nfilter_dict: [{'columns_left': 'which columns of the first data product to match on'}, {'columns_right': 'which columns of the second data product to match on'}, {'type': 'equal or unequal'}]\n""]",0.0,0.0,0.0,0.0,0,0.0
58,1145,Which top 4 leagues had the most games in the 2015-2016 season?,simple,filter,european_football_2,filter Match Dataset for the 2015-2016 season,"function name:filter
base_api: http://127.0.0.1:5200/filter
description: filters a data product based on the provided filterdict, it filters row wise keeping all input columns
filter_dict: [{'conditions': 'a dict ith the corresponding columns and their values'}]
example: {'condition':{'location':'berlin','year':{'min':2002,'max':2007}}
","The most fitting function for your problem is:

**Function Name:** combine  
**Description:** Combines two data products via a join.  
**Filter Dictionary:** [{'columns_left': 'which columns of the first data product to match on'}, {'columns_right': 'which columns of the second data product to match on'}, {'type': 'equal or unequal'}]","[""function name:max\nbase_api: http://127.0.0.1:5200/max\ndescription: Retrieves the maximum value for a list of specified columns in a dataframe\nreturn_type: single value\nfilter_dict: [{'columns': 'a list of columns for which the maximum should be retrieved'}, {'rows': 'number of rows to be returned'}]\n"", ""function name:count\nbase_api: http://127.0.0.1:5200/count\ndescription: counts the occurences of a specific value or values\nfilter_dict: [{'columns': 'a column in which the value to count is present'}, {'value': 'the value to count '}]\n"", ""function name:returnResult\ndescription: retrieves or extracts  the previously computed data, specified  by the columns in a dataframe\nfilter_dict: [{'columns': 'which columns to retrun/extract'}]\n"", ""function name:combine\ndescription: combines to data products via a join\nfilter_dict: [{'columns_left': 'which columns of the first data product to match on'}, {'columns_right': 'which columns of the second data product to match on'}, {'type': 'equal or unequal'}]\n""]",0.0,0.0,0.0,0.0,0,0.0
59,1145,Which top 4 leagues had the most games in the 2015-2016 season?,simple,count,european_football_2,count the number of games played in each league,"function name:count
base_api: http://127.0.0.1:5200/count
description: counts the occurences of a specific value or values
filter_dict: [{'columns': 'a column in which the value to count is present'}, {'value': 'the value to count '}]
","The most fitting function for your problem is:

**Function Name:** count  
**Description:** counts the occurrences of a specific value or values  
**Filter Dictionary:** [{'columns': 'a column in which the value to count is present'}, {'value': 'the value to count '}]

This function can be used to count the number of games played in each league by specifying the appropriate column and value.","[""function name:max\nbase_api: http://127.0.0.1:5200/max\ndescription: Retrieves the maximum value for a list of specified columns in a dataframe\nreturn_type: single value\nfilter_dict: [{'columns': 'a list of columns for which the maximum should be retrieved'}, {'rows': 'number of rows to be returned'}]\n"", ""function name:count\nbase_api: http://127.0.0.1:5200/count\ndescription: counts the occurences of a specific value or values\nfilter_dict: [{'columns': 'a column in which the value to count is present'}, {'value': 'the value to count '}]\n"", ""function name:returnResult\ndescription: retrieves or extracts  the previously computed data, specified  by the columns in a dataframe\nfilter_dict: [{'columns': 'which columns to retrun/extract'}]\n"", ""function name:combine\ndescription: combines to data products via a join\nfilter_dict: [{'columns_left': 'which columns of the first data product to match on'}, {'columns_right': 'which columns of the second data product to match on'}, {'type': 'equal or unequal'}]\n""]",0.125,0.25,1.0,0.4,1,1.0
60,1145,Which top 4 leagues had the most games in the 2015-2016 season?,simple,retrieve,european_football_2,retrieve League Dataset,"function name:retrieve
description: retrieves the specified data product, takes the data products name and a list of requested columns as arguments
filter_dict: [{'product': 'product url'}]
","The most fitting function for retrieving a League Dataset is:

**Function Name:** returnResult  
**Description:** Retrieves or extracts the previously computed data, specified by the columns in a dataframe.  
**Filter Dictionary:** [{'columns': 'which columns to return/extract'}]","[""function name:max\nbase_api: http://127.0.0.1:5200/max\ndescription: Retrieves the maximum value for a list of specified columns in a dataframe\nreturn_type: single value\nfilter_dict: [{'columns': 'a list of columns for which the maximum should be retrieved'}, {'rows': 'number of rows to be returned'}]\n"", ""function name:count\nbase_api: http://127.0.0.1:5200/count\ndescription: counts the occurences of a specific value or values\nfilter_dict: [{'columns': 'a column in which the value to count is present'}, {'value': 'the value to count '}]\n"", ""function name:returnResult\ndescription: retrieves or extracts  the previously computed data, specified  by the columns in a dataframe\nfilter_dict: [{'columns': 'which columns to retrun/extract'}]\n"", ""function name:combine\ndescription: combines to data products via a join\nfilter_dict: [{'columns_left': 'which columns of the first data product to match on'}, {'columns_right': 'which columns of the second data product to match on'}, {'type': 'equal or unequal'}]\n""]",0.0,0.0,0.0,0.0,0,0.0
61,1145,Which top 4 leagues had the most games in the 2015-2016 season?,simple,combine,european_football_2,combine league names with their corresponding game counts from the Match Dataset,"function name:combine
description: combines to data products via a join
filter_dict: [{'columns_left': 'which columns of the first data product to match on'}, {'columns_right': 'which columns of the second data product to match on'}, {'type': 'equal or unequal'}]
","The most fitting function for your problem is:

**Function Name:** combine  
**Description:** Combines two data products via a join.  
**Filter Dictionary:** [{'columns_left': 'which columns of the first data product to match on'}, {'columns_right': 'which columns of the second data product to match on'}, {'type': 'equal or unequal'}]","[""function name:max\nbase_api: http://127.0.0.1:5200/max\ndescription: Retrieves the maximum value for a list of specified columns in a dataframe\nreturn_type: single value\nfilter_dict: [{'columns': 'a list of columns for which the maximum should be retrieved'}, {'rows': 'number of rows to be returned'}]\n"", ""function name:count\nbase_api: http://127.0.0.1:5200/count\ndescription: counts the occurences of a specific value or values\nfilter_dict: [{'columns': 'a column in which the value to count is present'}, {'value': 'the value to count '}]\n"", ""function name:returnResult\ndescription: retrieves or extracts  the previously computed data, specified  by the columns in a dataframe\nfilter_dict: [{'columns': 'which columns to retrun/extract'}]\n"", ""function name:combine\ndescription: combines to data products via a join\nfilter_dict: [{'columns_left': 'which columns of the first data product to match on'}, {'columns_right': 'which columns of the second data product to match on'}, {'type': 'equal or unequal'}]\n""]",0.0625,0.25,1.0,0.4,1,1.0
62,1145,Which top 4 leagues had the most games in the 2015-2016 season?,simple,sortby,european_football_2,sort leagues by the number of games and select the top 4,"function name:sortby
base_api: http://127.0.0.1:5200/sortby
description: sorts the data based on a the provided columns and either ascending or descending
filter_dict: [{'columns': 'a column on which the sorting is based on'}, {'ascending': ""'True' if the data is sorted ascending, 'False' for descending""}]
","The most fitting function for your problem is:

**Function Name:** count  
**Description:** counts the occurrences of a specific value or values  
**Return Type:** single value  
**Filter Dictionary:** [{'columns': 'a column in which the value to count is present'}, {'value': 'the value to count '}]

This function can be used to count the number of games in each league, allowing you to sort and select the top 4 leagues based on the count.","[""function name:max\nbase_api: http://127.0.0.1:5200/max\ndescription: Retrieves the maximum value for a list of specified columns in a dataframe\nreturn_type: single value\nfilter_dict: [{'columns': 'a list of columns for which the maximum should be retrieved'}, {'rows': 'number of rows to be returned'}]\n"", ""function name:count\nbase_api: http://127.0.0.1:5200/count\ndescription: counts the occurences of a specific value or values\nfilter_dict: [{'columns': 'a column in which the value to count is present'}, {'value': 'the value to count '}]\n"", ""function name:returnResult\ndescription: retrieves or extracts  the previously computed data, specified  by the columns in a dataframe\nfilter_dict: [{'columns': 'which columns to retrun/extract'}]\n"", ""function name:combine\ndescription: combines to data products via a join\nfilter_dict: [{'columns_left': 'which columns of the first data product to match on'}, {'columns_right': 'which columns of the second data product to match on'}, {'type': 'equal or unequal'}]\n""]",0.0,0.0,0.0,0.0,0,0.0
63,1145,Which top 4 leagues had the most games in the 2015-2016 season?,simple,returnResult,european_football_2,return finished product,"function name:returnResult
description: retrieves or extracts  the previously computed data, specified  by the columns in a dataframe
filter_dict: [{'columns': 'which columns to retrun/extract'}]
","The most fitting function for your problem is:

**Function Name:** returnResult  
**Description:** Retrieves or extracts the previously computed data, specified by the columns in a dataframe.  
**Filter Dictionary:** [{'columns': 'which columns to return/extract'}]","[""function name:max\nbase_api: http://127.0.0.1:5200/max\ndescription: Retrieves the maximum value for a list of specified columns in a dataframe\nreturn_type: single value\nfilter_dict: [{'columns': 'a list of columns for which the maximum should be retrieved'}, {'rows': 'number of rows to be returned'}]\n"", ""function name:count\nbase_api: http://127.0.0.1:5200/count\ndescription: counts the occurences of a specific value or values\nfilter_dict: [{'columns': 'a column in which the value to count is present'}, {'value': 'the value to count '}]\n"", ""function name:returnResult\ndescription: retrieves or extracts  the previously computed data, specified  by the columns in a dataframe\nfilter_dict: [{'columns': 'which columns to retrun/extract'}]\n"", ""function name:combine\ndescription: combines to data products via a join\nfilter_dict: [{'columns_left': 'which columns of the first data product to match on'}, {'columns_right': 'which columns of the second data product to match on'}, {'type': 'equal or unequal'}]\n""]",0.0833333333333333,0.25,1.0,0.4,1,1.0
64,1039,Find the average number of long-shot done by Ahmed Samir Farag.,simple,retrieve,european_football_2,retrieve posts dataset,"function name:retrieve
description: retrieves the specified data product, takes the data products name and a list of requested columns as arguments
filter_dict: [{'product': 'product url'}]
","The most fitting function for retrieving a posts dataset is:

**Function Name:** returnResult  
**Description:** retrieves or extracts the previously computed data, specified by the columns in a dataframe.  
**Filter Dictionary:** [{'columns': 'which columns to return/extract'}]","[""function name:count\nbase_api: http://127.0.0.1:5200/count\ndescription: counts the occurences of a specific value or values\nfilter_dict: [{'columns': 'a column in which the value to count is present'}, {'value': 'the value to count '}]\n"", ""function name:mean\nbase_api: http://127.0.0.1:5200/sum\ndescription: Calcuates the mean of a dataframe based on a list of group_by columns and\nfilter_dict: [{'group_by': 'a list of coulmns in the dataframe, can be None'}, {'columns': 'a list of columns for hicht the mean should be calculated, cant be None'}]\n"", ""function name:combine\ndescription: combines to data products via a join\nfilter_dict: [{'columns_left': 'which columns of the first data product to match on'}, {'columns_right': 'which columns of the second data product to match on'}, {'type': 'equal or unequal'}]\n"", ""function name:returnResult\ndescription: retrieves or extracts  the previously computed data, specified  by the columns in a dataframe\nfilter_dict: [{'columns': 'which columns to retrun/extract'}]\n""]",0.0,0.0,0.0,0.0,0,1.0
65,1039,Find the average number of long-shot done by Ahmed Samir Farag.,simple,retrieve,european_football_2,retrieve Team dataset,"function name:retrieve
description: retrieves the specified data product, takes the data products name and a list of requested columns as arguments
filter_dict: [{'product': 'product url'}]
","The most fitting function for retrieving the Team dataset is:

**Function Name:** returnResult  
**Description:** retrieves or extracts the previously computed data, specified by the columns in a dataframe.  
**Filter Dictionary:** [{'columns': 'which columns to return/extract'}]","[""function name:count\nbase_api: http://127.0.0.1:5200/count\ndescription: counts the occurences of a specific value or values\nfilter_dict: [{'columns': 'a column in which the value to count is present'}, {'value': 'the value to count '}]\n"", ""function name:mean\nbase_api: http://127.0.0.1:5200/sum\ndescription: Calcuates the mean of a dataframe based on a list of group_by columns and\nfilter_dict: [{'group_by': 'a list of coulmns in the dataframe, can be None'}, {'columns': 'a list of columns for hicht the mean should be calculated, cant be None'}]\n"", ""function name:combine\ndescription: combines to data products via a join\nfilter_dict: [{'columns_left': 'which columns of the first data product to match on'}, {'columns_right': 'which columns of the second data product to match on'}, {'type': 'equal or unequal'}]\n"", ""function name:returnResult\ndescription: retrieves or extracts  the previously computed data, specified  by the columns in a dataframe\nfilter_dict: [{'columns': 'which columns to retrun/extract'}]\n""]",0.0,0.0,0.0,0.0,0,1.0
66,1039,Find the average number of long-shot done by Ahmed Samir Farag.,simple,retrieve,european_football_2,retrieve constructorStandings dataset,"function name:retrieve
description: retrieves the specified data product, takes the data products name and a list of requested columns as arguments
filter_dict: [{'product': 'product url'}]
","The most fitting function for retrieving the constructorStandings dataset is:

**Function Name:** returnResult  
**Description:** retrieves or extracts the previously computed data, specified by the columns in a dataframe.  
**Filter Dictionary:** [{'columns': 'which columns to return/extract'}]","[""function name:count\nbase_api: http://127.0.0.1:5200/count\ndescription: counts the occurences of a specific value or values\nfilter_dict: [{'columns': 'a column in which the value to count is present'}, {'value': 'the value to count '}]\n"", ""function name:mean\nbase_api: http://127.0.0.1:5200/sum\ndescription: Calcuates the mean of a dataframe based on a list of group_by columns and\nfilter_dict: [{'group_by': 'a list of coulmns in the dataframe, can be None'}, {'columns': 'a list of columns for hicht the mean should be calculated, cant be None'}]\n"", ""function name:combine\ndescription: combines to data products via a join\nfilter_dict: [{'columns_left': 'which columns of the first data product to match on'}, {'columns_right': 'which columns of the second data product to match on'}, {'type': 'equal or unequal'}]\n"", ""function name:returnResult\ndescription: retrieves or extracts  the previously computed data, specified  by the columns in a dataframe\nfilter_dict: [{'columns': 'which columns to retrun/extract'}]\n""]",0.0,0.0,0.0,0.0,0,1.0
68,1039,Find the average number of long-shot done by Ahmed Samir Farag.,simple,returnResult,european_football_2,return finished product,"function name:returnResult
description: retrieves or extracts  the previously computed data, specified  by the columns in a dataframe
filter_dict: [{'columns': 'which columns to retrun/extract'}]
","The most fitting function for your problem is:

**Function Name:** returnResult  
**Description:** retrieves or extracts the previously computed data, specified by the columns in a dataframe.  
**Filter Dictionary:** [{'columns': 'which columns to return/extract'}]","[""function name:count\nbase_api: http://127.0.0.1:5200/count\ndescription: counts the occurences of a specific value or values\nfilter_dict: [{'columns': 'a column in which the value to count is present'}, {'value': 'the value to count '}]\n"", ""function name:mean\nbase_api: http://127.0.0.1:5200/sum\ndescription: Calcuates the mean of a dataframe based on a list of group_by columns and\nfilter_dict: [{'group_by': 'a list of coulmns in the dataframe, can be None'}, {'columns': 'a list of columns for hicht the mean should be calculated, cant be None'}]\n"", ""function name:combine\ndescription: combines to data products via a join\nfilter_dict: [{'columns_left': 'which columns of the first data product to match on'}, {'columns_right': 'which columns of the second data product to match on'}, {'type': 'equal or unequal'}]\n"", ""function name:returnResult\ndescription: retrieves or extracts  the previously computed data, specified  by the columns in a dataframe\nfilter_dict: [{'columns': 'which columns to retrun/extract'}]\n""]",0.0625,0.25,1.0,0.4,1,1.0
69,1251,How many patients with an Ig G higher than normal?,simple,retrieve,thrombosis_prediction,retrieve Examination Dataset,"function name:retrieve
description: retrieves the specified data product, takes the data products name and a list of requested columns as arguments
filter_dict: [{'product': 'product url'}]
","The most fitting function for retrieving data is:

**Function Name:** returnResult  
**Description:** retrieves or extracts the previously computed data, specified by the columns in a dataframe  
**Filter Dictionary:** [{'columns': 'which columns to return/extract'}]","[""function name:count\nbase_api: http://127.0.0.1:5200/count\ndescription: counts the occurences of a specific value or values\nfilter_dict: [{'columns': 'a column in which the value to count is present'}, {'value': 'the value to count '}]\n"", ""function name:max\nbase_api: http://127.0.0.1:5200/max\ndescription: Retrieves the maximum value for a list of specified columns in a dataframe\nreturn_type: single value\nfilter_dict: [{'columns': 'a list of columns for which the maximum should be retrieved'}, {'rows': 'number of rows to be returned'}]\n"", ""function name:combine\ndescription: combines to data products via a join\nfilter_dict: [{'columns_left': 'which columns of the first data product to match on'}, {'columns_right': 'which columns of the second data product to match on'}, {'type': 'equal or unequal'}]\n"", ""function name:returnResult\ndescription: retrieves or extracts  the previously computed data, specified  by the columns in a dataframe\nfilter_dict: [{'columns': 'which columns to retrun/extract'}]\n""]",0.0,0.0,0.0,0.0,0,1.0
70,1251,How many patients with an Ig G higher than normal?,simple,filter,thrombosis_prediction,filter for patients with IgG levels higher than normal,"function name:filter
base_api: http://127.0.0.1:5200/filter
description: filters a data product based on the provided filterdict, it filters row wise keeping all input columns
filter_dict: [{'conditions': 'a dict ith the corresponding columns and their values'}]
example: {'condition':{'location':'berlin','year':{'min':2002,'max':2007}}
","The most fitting function for your problem is:

**Function Name:** count  
**Description:** counts the occurrences of a specific value or values  
**Filter Dictionary:** [{'columns': 'a column in which the value to count is present'}, {'value': 'the value to count '}]

This function can be used to filter and count the occurrences of patients with IgG levels higher than normal by specifying the appropriate column and value.","[""function name:count\nbase_api: http://127.0.0.1:5200/count\ndescription: counts the occurences of a specific value or values\nfilter_dict: [{'columns': 'a column in which the value to count is present'}, {'value': 'the value to count '}]\n"", ""function name:max\nbase_api: http://127.0.0.1:5200/max\ndescription: Retrieves the maximum value for a list of specified columns in a dataframe\nreturn_type: single value\nfilter_dict: [{'columns': 'a list of columns for which the maximum should be retrieved'}, {'rows': 'number of rows to be returned'}]\n"", ""function name:combine\ndescription: combines to data products via a join\nfilter_dict: [{'columns_left': 'which columns of the first data product to match on'}, {'columns_right': 'which columns of the second data product to match on'}, {'type': 'equal or unequal'}]\n"", ""function name:returnResult\ndescription: retrieves or extracts  the previously computed data, specified  by the columns in a dataframe\nfilter_dict: [{'columns': 'which columns to retrun/extract'}]\n""]",0.0,0.0,0.0,0.0,0,1.0
71,1251,How many patients with an Ig G higher than normal?,simple,count,thrombosis_prediction,count the number of patients with elevated IgG levels,"function name:count
base_api: http://127.0.0.1:5200/count
description: counts the occurences of a specific value or values
filter_dict: [{'columns': 'a column in which the value to count is present'}, {'value': 'the value to count '}]
","The most fitting function for your problem is:

**Function Name:** count  
**Description:** counts the occurrences of a specific value or values  
**Base API:** http://127.0.0.1:5200/count  
**Filter Dictionary:** [{'columns': 'a column in which the value to count is present'}, {'value': 'the value to count '}]

This function can be used to count the number of patients with elevated IgG levels by specifying the appropriate column and value.","[""function name:count\nbase_api: http://127.0.0.1:5200/count\ndescription: counts the occurences of a specific value or values\nfilter_dict: [{'columns': 'a column in which the value to count is present'}, {'value': 'the value to count '}]\n"", ""function name:max\nbase_api: http://127.0.0.1:5200/max\ndescription: Retrieves the maximum value for a list of specified columns in a dataframe\nreturn_type: single value\nfilter_dict: [{'columns': 'a list of columns for which the maximum should be retrieved'}, {'rows': 'number of rows to be returned'}]\n"", ""function name:combine\ndescription: combines to data products via a join\nfilter_dict: [{'columns_left': 'which columns of the first data product to match on'}, {'columns_right': 'which columns of the second data product to match on'}, {'type': 'equal or unequal'}]\n"", ""function name:returnResult\ndescription: retrieves or extracts  the previously computed data, specified  by the columns in a dataframe\nfilter_dict: [{'columns': 'which columns to retrun/extract'}]\n""]",0.25,0.25,1.0,0.4,1,1.0
72,1251,How many patients with an Ig G higher than normal?,simple,retrieve,thrombosis_prediction,retrieve Member Dataset,"function name:retrieve
description: retrieves the specified data product, takes the data products name and a list of requested columns as arguments
filter_dict: [{'product': 'product url'}]
","The most fitting function for retrieving a dataset is:

**Function Name:** returnResult  
**Description:** retrieves or extracts the previously computed data, specified by the columns in a dataframe  
**Filter Dictionary:** [{'columns': 'which columns to return/extract'}]","[""function name:count\nbase_api: http://127.0.0.1:5200/count\ndescription: counts the occurences of a specific value or values\nfilter_dict: [{'columns': 'a column in which the value to count is present'}, {'value': 'the value to count '}]\n"", ""function name:max\nbase_api: http://127.0.0.1:5200/max\ndescription: Retrieves the maximum value for a list of specified columns in a dataframe\nreturn_type: single value\nfilter_dict: [{'columns': 'a list of columns for which the maximum should be retrieved'}, {'rows': 'number of rows to be returned'}]\n"", ""function name:combine\ndescription: combines to data products via a join\nfilter_dict: [{'columns_left': 'which columns of the first data product to match on'}, {'columns_right': 'which columns of the second data product to match on'}, {'type': 'equal or unequal'}]\n"", ""function name:returnResult\ndescription: retrieves or extracts  the previously computed data, specified  by the columns in a dataframe\nfilter_dict: [{'columns': 'which columns to retrun/extract'}]\n""]",0.0,0.0,0.0,0.0,0,1.0
73,1251,How many patients with an Ig G higher than normal?,simple,combine,thrombosis_prediction,combine patient counts from Examination Dataset with Member Dataset for demographic context,"function name:combine
description: combines to data products via a join
filter_dict: [{'columns_left': 'which columns of the first data product to match on'}, {'columns_right': 'which columns of the second data product to match on'}, {'type': 'equal or unequal'}]
","The most fitting function for your problem is:

**Function Name:** combine  
**Description:** combines two data products via a join  
**Filter Dictionary:** [{'columns_left': 'which columns of the first data product to match on'}, {'columns_right': 'which columns of the second data product to match on'}, {'type': 'equal or unequal'}]","[""function name:count\nbase_api: http://127.0.0.1:5200/count\ndescription: counts the occurences of a specific value or values\nfilter_dict: [{'columns': 'a column in which the value to count is present'}, {'value': 'the value to count '}]\n"", ""function name:max\nbase_api: http://127.0.0.1:5200/max\ndescription: Retrieves the maximum value for a list of specified columns in a dataframe\nreturn_type: single value\nfilter_dict: [{'columns': 'a list of columns for which the maximum should be retrieved'}, {'rows': 'number of rows to be returned'}]\n"", ""function name:combine\ndescription: combines to data products via a join\nfilter_dict: [{'columns_left': 'which columns of the first data product to match on'}, {'columns_right': 'which columns of the second data product to match on'}, {'type': 'equal or unequal'}]\n"", ""function name:returnResult\ndescription: retrieves or extracts  the previously computed data, specified  by the columns in a dataframe\nfilter_dict: [{'columns': 'which columns to retrun/extract'}]\n""]",0.0833333333333333,0.25,1.0,0.4,1,1.0
74,1251,How many patients with an Ig G higher than normal?,simple,retrieve,thrombosis_prediction,retrieve Gender Dataset,"function name:retrieve
description: retrieves the specified data product, takes the data products name and a list of requested columns as arguments
filter_dict: [{'product': 'product url'}]
","The most fitting function for retrieving a dataset would be:

**Function Name:** returnResult  
**Description:** retrieves or extracts the previously computed data, specified by the columns in a dataframe  
**Filter Dictionary:** [{'columns': 'which columns to return/extract'}]","[""function name:count\nbase_api: http://127.0.0.1:5200/count\ndescription: counts the occurences of a specific value or values\nfilter_dict: [{'columns': 'a column in which the value to count is present'}, {'value': 'the value to count '}]\n"", ""function name:max\nbase_api: http://127.0.0.1:5200/max\ndescription: Retrieves the maximum value for a list of specified columns in a dataframe\nreturn_type: single value\nfilter_dict: [{'columns': 'a list of columns for which the maximum should be retrieved'}, {'rows': 'number of rows to be returned'}]\n"", ""function name:combine\ndescription: combines to data products via a join\nfilter_dict: [{'columns_left': 'which columns of the first data product to match on'}, {'columns_right': 'which columns of the second data product to match on'}, {'type': 'equal or unequal'}]\n"", ""function name:returnResult\ndescription: retrieves or extracts  the previously computed data, specified  by the columns in a dataframe\nfilter_dict: [{'columns': 'which columns to retrun/extract'}]\n""]",0.0,0.0,0.0,0.0,0,1.0
75,1251,How many patients with an Ig G higher than normal?,simple,combine,thrombosis_prediction,combine gender distribution from Gender Dataset with patient counts for additional insights,"function name:combine
description: combines to data products via a join
filter_dict: [{'columns_left': 'which columns of the first data product to match on'}, {'columns_right': 'which columns of the second data product to match on'}, {'type': 'equal or unequal'}]
","The most fitting function for your problem is:

**Function Name:** combine  
**Description:** Combines two data products via a join.  
**Filter Dictionary:** [{'columns_left': 'which columns of the first data product to match on'}, {'columns_right': 'which columns of the second data product to match on'}, {'type': 'equal or unequal'}]","[""function name:count\nbase_api: http://127.0.0.1:5200/count\ndescription: counts the occurences of a specific value or values\nfilter_dict: [{'columns': 'a column in which the value to count is present'}, {'value': 'the value to count '}]\n"", ""function name:max\nbase_api: http://127.0.0.1:5200/max\ndescription: Retrieves the maximum value for a list of specified columns in a dataframe\nreturn_type: single value\nfilter_dict: [{'columns': 'a list of columns for which the maximum should be retrieved'}, {'rows': 'number of rows to be returned'}]\n"", ""function name:combine\ndescription: combines to data products via a join\nfilter_dict: [{'columns_left': 'which columns of the first data product to match on'}, {'columns_right': 'which columns of the second data product to match on'}, {'type': 'equal or unequal'}]\n"", ""function name:returnResult\ndescription: retrieves or extracts  the previously computed data, specified  by the columns in a dataframe\nfilter_dict: [{'columns': 'which columns to retrun/extract'}]\n""]",0.0833333333333333,0.25,1.0,0.4,1,1.0
76,1251,How many patients with an Ig G higher than normal?,simple,returnResult,thrombosis_prediction,return finished product,"function name:returnResult
description: retrieves or extracts  the previously computed data, specified  by the columns in a dataframe
filter_dict: [{'columns': 'which columns to retrun/extract'}]
","The most fitting function for your problem is:

**Function Name:** returnResult  
**Description:** retrieves or extracts the previously computed data, specified by the columns in a dataframe  
**Filter Dictionary:** [{'columns': 'which columns to return/extract'}]","[""function name:count\nbase_api: http://127.0.0.1:5200/count\ndescription: counts the occurences of a specific value or values\nfilter_dict: [{'columns': 'a column in which the value to count is present'}, {'value': 'the value to count '}]\n"", ""function name:max\nbase_api: http://127.0.0.1:5200/max\ndescription: Retrieves the maximum value for a list of specified columns in a dataframe\nreturn_type: single value\nfilter_dict: [{'columns': 'a list of columns for which the maximum should be retrieved'}, {'rows': 'number of rows to be returned'}]\n"", ""function name:combine\ndescription: combines to data products via a join\nfilter_dict: [{'columns_left': 'which columns of the first data product to match on'}, {'columns_right': 'which columns of the second data product to match on'}, {'type': 'equal or unequal'}]\n"", ""function name:returnResult\ndescription: retrieves or extracts  the previously computed data, specified  by the columns in a dataframe\nfilter_dict: [{'columns': 'which columns to retrun/extract'}]\n""]",0.0625,0.25,1.0,0.4,1,1.0
77,537,How many posts does the user csgillespie own?,simple,retrieve,codebase_community,retrieve posts data,"function name:retrieve
description: retrieves the specified data product, takes the data products name and a list of requested columns as arguments
filter_dict: [{'product': 'product url'}]
","The most fitting function for retrieving posts data is:

**Function Name:** returnResult  
**Description:** retrieves or extracts the previously computed data, specified by the columns in a dataframe  
**Filter Dictionary:** [{'columns': 'which columns to return/extract'}]","[""function name:count\nbase_api: http://127.0.0.1:5200/count\ndescription: counts the occurences of a specific value or values\nfilter_dict: [{'columns': 'a column in which the value to count is present'}, {'value': 'the value to count '}]\n"", ""function name:min\nbase_api: http://127.0.0.1:5200/min\ndescription: Retrieves the maximum value for a list of specified columns in a dataframe\nreturn_type: single value\nfilter_dict: [{'columns': 'a list of columns for which the minimum should be retrieved'}, {'rows': 'number of rows to be returned'}]\n"", ""function name:returnResult\ndescription: retrieves or extracts  the previously computed data, specified  by the columns in a dataframe\nfilter_dict: [{'columns': 'which columns to retrun/extract'}]\n"", ""function name:combine\ndescription: combines to data products via a join\nfilter_dict: [{'columns_left': 'which columns of the first data product to match on'}, {'columns_right': 'which columns of the second data product to match on'}, {'type': 'equal or unequal'}]\n""]",0.0,0.0,0.0,0.0,0,1.0
78,537,How many posts does the user csgillespie own?,simple,filter,codebase_community,filter posts data for OwnerUserId corresponding to csgillespie,"function name:filter
base_api: http://127.0.0.1:5200/filter
description: filters a data product based on the provided filterdict, it filters row wise keeping all input columns
filter_dict: [{'conditions': 'a dict ith the corresponding columns and their values'}]
example: {'condition':{'location':'berlin','year':{'min':2002,'max':2007}}
","The most fitting function for your problem is:

**Function Name:** `count`  
**Description:** Counts the occurrences of a specific value or values.  
**Filter Dictionary:** [{'columns': 'OwnerUserId'}, {'value': 'csgillespie'}]  
**Base API:** http://127.0.0.1:5200/count","[""function name:count\nbase_api: http://127.0.0.1:5200/count\ndescription: counts the occurences of a specific value or values\nfilter_dict: [{'columns': 'a column in which the value to count is present'}, {'value': 'the value to count '}]\n"", ""function name:min\nbase_api: http://127.0.0.1:5200/min\ndescription: Retrieves the maximum value for a list of specified columns in a dataframe\nreturn_type: single value\nfilter_dict: [{'columns': 'a list of columns for which the minimum should be retrieved'}, {'rows': 'number of rows to be returned'}]\n"", ""function name:returnResult\ndescription: retrieves or extracts  the previously computed data, specified  by the columns in a dataframe\nfilter_dict: [{'columns': 'which columns to retrun/extract'}]\n"", ""function name:combine\ndescription: combines to data products via a join\nfilter_dict: [{'columns_left': 'which columns of the first data product to match on'}, {'columns_right': 'which columns of the second data product to match on'}, {'type': 'equal or unequal'}]\n""]",0.0,0.0,0.0,0.0,0,0.0
79,537,How many posts does the user csgillespie own?,simple,count,codebase_community,count the number of posts from filtered posts data,"function name:count
base_api: http://127.0.0.1:5200/count
description: counts the occurences of a specific value or values
filter_dict: [{'columns': 'a column in which the value to count is present'}, {'value': 'the value to count '}]
","The most fitting function for your problem is:

**Function Name:** count  
**Description:** counts the occurrences of a specific value or values  
**Filter Dictionary:** [{'columns': 'a column in which the value to count is present'}, {'value': 'the value to count '}]

This function will allow you to count the number of posts based on your filtered posts data.","[""function name:count\nbase_api: http://127.0.0.1:5200/count\ndescription: counts the occurences of a specific value or values\nfilter_dict: [{'columns': 'a column in which the value to count is present'}, {'value': 'the value to count '}]\n"", ""function name:min\nbase_api: http://127.0.0.1:5200/min\ndescription: Retrieves the maximum value for a list of specified columns in a dataframe\nreturn_type: single value\nfilter_dict: [{'columns': 'a list of columns for which the minimum should be retrieved'}, {'rows': 'number of rows to be returned'}]\n"", ""function name:returnResult\ndescription: retrieves or extracts  the previously computed data, specified  by the columns in a dataframe\nfilter_dict: [{'columns': 'which columns to retrun/extract'}]\n"", ""function name:combine\ndescription: combines to data products via a join\nfilter_dict: [{'columns_left': 'which columns of the first data product to match on'}, {'columns_right': 'which columns of the second data product to match on'}, {'type': 'equal or unequal'}]\n""]",0.25,0.25,1.0,0.4,1,1.0
80,537,How many posts does the user csgillespie own?,simple,retrieve,codebase_community,retrieve postHistory data,"function name:retrieve
description: retrieves the specified data product, takes the data products name and a list of requested columns as arguments
filter_dict: [{'product': 'product url'}]
","The most fitting function for retrieving postHistory data is:

**Function Name:** returnResult  
**Description:** retrieves or extracts the previously computed data, specified by the columns in a dataframe  
**Filter Dictionary:** [{'columns': 'which columns to return/extract'}]","[""function name:count\nbase_api: http://127.0.0.1:5200/count\ndescription: counts the occurences of a specific value or values\nfilter_dict: [{'columns': 'a column in which the value to count is present'}, {'value': 'the value to count '}]\n"", ""function name:min\nbase_api: http://127.0.0.1:5200/min\ndescription: Retrieves the maximum value for a list of specified columns in a dataframe\nreturn_type: single value\nfilter_dict: [{'columns': 'a list of columns for which the minimum should be retrieved'}, {'rows': 'number of rows to be returned'}]\n"", ""function name:returnResult\ndescription: retrieves or extracts  the previously computed data, specified  by the columns in a dataframe\nfilter_dict: [{'columns': 'which columns to retrun/extract'}]\n"", ""function name:combine\ndescription: combines to data products via a join\nfilter_dict: [{'columns_left': 'which columns of the first data product to match on'}, {'columns_right': 'which columns of the second data product to match on'}, {'type': 'equal or unequal'}]\n""]",0.0,0.0,0.0,0.0,0,1.0
81,537,How many posts does the user csgillespie own?,simple,filter,codebase_community,filter postHistory data for UserId corresponding to csgillespie,"function name:filter
base_api: http://127.0.0.1:5200/filter
description: filters a data product based on the provided filterdict, it filters row wise keeping all input columns
filter_dict: [{'conditions': 'a dict ith the corresponding columns and their values'}]
example: {'condition':{'location':'berlin','year':{'min':2002,'max':2007}}
","The most fitting function for your problem is:

**Function Name:** `returnResult`  
**Description:** Retrieves or extracts the previously computed data, specified by the columns in a dataframe.  
**Filter Dictionary:** [{'columns': 'which columns to return/extract'}]  

This function can be used to filter the postHistory data for the specific UserId you mentioned.","[""function name:count\nbase_api: http://127.0.0.1:5200/count\ndescription: counts the occurences of a specific value or values\nfilter_dict: [{'columns': 'a column in which the value to count is present'}, {'value': 'the value to count '}]\n"", ""function name:min\nbase_api: http://127.0.0.1:5200/min\ndescription: Retrieves the maximum value for a list of specified columns in a dataframe\nreturn_type: single value\nfilter_dict: [{'columns': 'a list of columns for which the minimum should be retrieved'}, {'rows': 'number of rows to be returned'}]\n"", ""function name:returnResult\ndescription: retrieves or extracts  the previously computed data, specified  by the columns in a dataframe\nfilter_dict: [{'columns': 'which columns to retrun/extract'}]\n"", ""function name:combine\ndescription: combines to data products via a join\nfilter_dict: [{'columns_left': 'which columns of the first data product to match on'}, {'columns_right': 'which columns of the second data product to match on'}, {'type': 'equal or unequal'}]\n""]",0.0,0.0,0.0,0.0,0,1.0
82,537,How many posts does the user csgillespie own?,simple,count,codebase_community,count the number of posts from filtered postHistory data,"function name:count
base_api: http://127.0.0.1:5200/count
description: counts the occurences of a specific value or values
filter_dict: [{'columns': 'a column in which the value to count is present'}, {'value': 'the value to count '}]
","The most fitting function for your problem is:

**Function Name:** count  
**Description:** counts the occurrences of a specific value or values  
**Base API:** http://127.0.0.1:5200/count  
**Filter Dictionary:** [{'columns': 'a column in which the value to count is present'}, {'value': 'the value to count '}]

This function will allow you to count the number of posts from your filtered postHistory data.","[""function name:count\nbase_api: http://127.0.0.1:5200/count\ndescription: counts the occurences of a specific value or values\nfilter_dict: [{'columns': 'a column in which the value to count is present'}, {'value': 'the value to count '}]\n"", ""function name:min\nbase_api: http://127.0.0.1:5200/min\ndescription: Retrieves the maximum value for a list of specified columns in a dataframe\nreturn_type: single value\nfilter_dict: [{'columns': 'a list of columns for which the minimum should be retrieved'}, {'rows': 'number of rows to be returned'}]\n"", ""function name:returnResult\ndescription: retrieves or extracts  the previously computed data, specified  by the columns in a dataframe\nfilter_dict: [{'columns': 'which columns to retrun/extract'}]\n"", ""function name:combine\ndescription: combines to data products via a join\nfilter_dict: [{'columns_left': 'which columns of the first data product to match on'}, {'columns_right': 'which columns of the second data product to match on'}, {'type': 'equal or unequal'}]\n""]",0.25,0.25,1.0,0.4,1,1.0
83,537,How many posts does the user csgillespie own?,simple,combine,codebase_community,combine counts from posts and postHistory datasets,"function name:combine
description: combines to data products via a join
filter_dict: [{'columns_left': 'which columns of the first data product to match on'}, {'columns_right': 'which columns of the second data product to match on'}, {'type': 'equal or unequal'}]
","The most fitting function for your problem is:

**Function Name:** combine  
**Description:** Combines two data products via a join.  
**Filter Dictionary:** [{'columns_left': 'which columns of the first data product to match on'}, {'columns_right': 'which columns of the second data product to match on'}, {'type': 'equal or unequal'}]","[""function name:count\nbase_api: http://127.0.0.1:5200/count\ndescription: counts the occurences of a specific value or values\nfilter_dict: [{'columns': 'a column in which the value to count is present'}, {'value': 'the value to count '}]\n"", ""function name:min\nbase_api: http://127.0.0.1:5200/min\ndescription: Retrieves the maximum value for a list of specified columns in a dataframe\nreturn_type: single value\nfilter_dict: [{'columns': 'a list of columns for which the minimum should be retrieved'}, {'rows': 'number of rows to be returned'}]\n"", ""function name:returnResult\ndescription: retrieves or extracts  the previously computed data, specified  by the columns in a dataframe\nfilter_dict: [{'columns': 'which columns to retrun/extract'}]\n"", ""function name:combine\ndescription: combines to data products via a join\nfilter_dict: [{'columns_left': 'which columns of the first data product to match on'}, {'columns_right': 'which columns of the second data product to match on'}, {'type': 'equal or unequal'}]\n""]",0.0625,0.25,1.0,0.4,1,1.0
84,537,How many posts does the user csgillespie own?,simple,returnResult,codebase_community,return finished product,"function name:returnResult
description: retrieves or extracts  the previously computed data, specified  by the columns in a dataframe
filter_dict: [{'columns': 'which columns to retrun/extract'}]
","The most fitting function for your request is:

**Function Name:** returnResult  
**Description:** retrieves or extracts the previously computed data, specified by the columns in a dataframe  
**Filter Dictionary:** [{'columns': 'which columns to return/extract'}]","[""function name:count\nbase_api: http://127.0.0.1:5200/count\ndescription: counts the occurences of a specific value or values\nfilter_dict: [{'columns': 'a column in which the value to count is present'}, {'value': 'the value to count '}]\n"", ""function name:min\nbase_api: http://127.0.0.1:5200/min\ndescription: Retrieves the maximum value for a list of specified columns in a dataframe\nreturn_type: single value\nfilter_dict: [{'columns': 'a list of columns for which the minimum should be retrieved'}, {'rows': 'number of rows to be returned'}]\n"", ""function name:returnResult\ndescription: retrieves or extracts  the previously computed data, specified  by the columns in a dataframe\nfilter_dict: [{'columns': 'which columns to retrun/extract'}]\n"", ""function name:combine\ndescription: combines to data products via a join\nfilter_dict: [{'columns_left': 'which columns of the first data product to match on'}, {'columns_right': 'which columns of the second data product to match on'}, {'type': 'equal or unequal'}]\n""]",0.0833333333333333,0.25,1.0,0.4,1,1.0
85,1331,What is the amount of the funds that the Vice President received?,simple,retrieve,student_club,retrieve Member Dataset,"function name:retrieve
description: retrieves the specified data product, takes the data products name and a list of requested columns as arguments
filter_dict: [{'product': 'product url'}]
","The most fitting function for retrieving a dataset is:

**Function Name:** returnResult  
**Description:** retrieves or extracts the previously computed data, specified by the columns in a dataframe.  
**Filter Dictionary:** [{'columns': 'which columns to return/extract'}]","[""function name:count\nbase_api: http://127.0.0.1:5200/count\ndescription: counts the occurences of a specific value or values\nfilter_dict: [{'columns': 'a column in which the value to count is present'}, {'value': 'the value to count '}]\n"", ""function name:min\nbase_api: http://127.0.0.1:5200/min\ndescription: Retrieves the maximum value for a list of specified columns in a dataframe\nreturn_type: single value\nfilter_dict: [{'columns': 'a list of columns for which the minimum should be retrieved'}, {'rows': 'number of rows to be returned'}]\n"", ""function name:returnResult\ndescription: retrieves or extracts  the previously computed data, specified  by the columns in a dataframe\nfilter_dict: [{'columns': 'which columns to retrun/extract'}]\n"", ""function name:combine\ndescription: combines to data products via a join\nfilter_dict: [{'columns_left': 'which columns of the first data product to match on'}, {'columns_right': 'which columns of the second data product to match on'}, {'type': 'equal or unequal'}]\n""]",0.0,0.0,0.0,0.0,0,1.0
86,1331,What is the amount of the funds that the Vice President received?,simple,filter,student_club,filter for the Vice President,"function name:filter
base_api: http://127.0.0.1:5200/filter
description: filters a data product based on the provided filterdict, it filters row wise keeping all input columns
filter_dict: [{'conditions': 'a dict ith the corresponding columns and their values'}]
example: {'condition':{'location':'berlin','year':{'min':2002,'max':2007}}
","The most fitting function for filtering for the Vice President is:

**Function Name:** `returnResult`  
**Description:** Retrieves or extracts the previously computed data, specified by the columns in a dataframe.  
**Filter Dictionary:** [{'columns': 'which columns to return/extract'}]","[""function name:count\nbase_api: http://127.0.0.1:5200/count\ndescription: counts the occurences of a specific value or values\nfilter_dict: [{'columns': 'a column in which the value to count is present'}, {'value': 'the value to count '}]\n"", ""function name:min\nbase_api: http://127.0.0.1:5200/min\ndescription: Retrieves the maximum value for a list of specified columns in a dataframe\nreturn_type: single value\nfilter_dict: [{'columns': 'a list of columns for which the minimum should be retrieved'}, {'rows': 'number of rows to be returned'}]\n"", ""function name:returnResult\ndescription: retrieves or extracts  the previously computed data, specified  by the columns in a dataframe\nfilter_dict: [{'columns': 'which columns to retrun/extract'}]\n"", ""function name:combine\ndescription: combines to data products via a join\nfilter_dict: [{'columns_left': 'which columns of the first data product to match on'}, {'columns_right': 'which columns of the second data product to match on'}, {'type': 'equal or unequal'}]\n""]",0.0,0.0,0.0,0.0,0,1.0
87,1331,What is the amount of the funds that the Vice President received?,simple,retrieve,student_club,retrieve Income Dataset,"function name:retrieve
description: retrieves the specified data product, takes the data products name and a list of requested columns as arguments
filter_dict: [{'product': 'product url'}]
","The most fitting function for retrieving the Income Dataset is:

**Function Name:** returnResult  
**Description:** retrieves or extracts the previously computed data, specified by the columns in a dataframe.  
**Filter Dictionary:** [{'columns': 'which columns to return/extract'}]","[""function name:count\nbase_api: http://127.0.0.1:5200/count\ndescription: counts the occurences of a specific value or values\nfilter_dict: [{'columns': 'a column in which the value to count is present'}, {'value': 'the value to count '}]\n"", ""function name:min\nbase_api: http://127.0.0.1:5200/min\ndescription: Retrieves the maximum value for a list of specified columns in a dataframe\nreturn_type: single value\nfilter_dict: [{'columns': 'a list of columns for which the minimum should be retrieved'}, {'rows': 'number of rows to be returned'}]\n"", ""function name:returnResult\ndescription: retrieves or extracts  the previously computed data, specified  by the columns in a dataframe\nfilter_dict: [{'columns': 'which columns to retrun/extract'}]\n"", ""function name:combine\ndescription: combines to data products via a join\nfilter_dict: [{'columns_left': 'which columns of the first data product to match on'}, {'columns_right': 'which columns of the second data product to match on'}, {'type': 'equal or unequal'}]\n""]",0.0,0.0,0.0,0.0,0,1.0
88,1331,What is the amount of the funds that the Vice President received?,simple,filter,student_club,filter for transactions linked to the Vice President,"function name:filter
base_api: http://127.0.0.1:5200/filter
description: filters a data product based on the provided filterdict, it filters row wise keeping all input columns
filter_dict: [{'conditions': 'a dict ith the corresponding columns and their values'}]
example: {'condition':{'location':'berlin','year':{'min':2002,'max':2007}}
","The most fitting function for your problem is:

**Function Name:** combine  
**Description:** combines two data products via a join  
**Filter Dictionary:** [{'columns_left': 'which columns of the first data product to match on'}, {'columns_right': 'which columns of the second data product to match on'}, {'type': 'equal or unequal'}]  

This function can be used to filter transactions by linking them to the relevant data associated with the Vice President.","[""function name:count\nbase_api: http://127.0.0.1:5200/count\ndescription: counts the occurences of a specific value or values\nfilter_dict: [{'columns': 'a column in which the value to count is present'}, {'value': 'the value to count '}]\n"", ""function name:min\nbase_api: http://127.0.0.1:5200/min\ndescription: Retrieves the maximum value for a list of specified columns in a dataframe\nreturn_type: single value\nfilter_dict: [{'columns': 'a list of columns for which the minimum should be retrieved'}, {'rows': 'number of rows to be returned'}]\n"", ""function name:returnResult\ndescription: retrieves or extracts  the previously computed data, specified  by the columns in a dataframe\nfilter_dict: [{'columns': 'which columns to retrun/extract'}]\n"", ""function name:combine\ndescription: combines to data products via a join\nfilter_dict: [{'columns_left': 'which columns of the first data product to match on'}, {'columns_right': 'which columns of the second data product to match on'}, {'type': 'equal or unequal'}]\n""]",0.0,0.0,0.0,0.0,0,1.0
89,1331,What is the amount of the funds that the Vice President received?,simple,retrieve,student_club,retrieve Order Dataset,"function name:retrieve
description: retrieves the specified data product, takes the data products name and a list of requested columns as arguments
filter_dict: [{'product': 'product url'}]
","The most fitting function for retrieving data is:

**Function Name:** returnResult  
**Description:** retrieves or extracts the previously computed data, specified by the columns in a dataframe.  
**Filter Dictionary:** [{'columns': 'which columns to return/extract'}]","[""function name:count\nbase_api: http://127.0.0.1:5200/count\ndescription: counts the occurences of a specific value or values\nfilter_dict: [{'columns': 'a column in which the value to count is present'}, {'value': 'the value to count '}]\n"", ""function name:min\nbase_api: http://127.0.0.1:5200/min\ndescription: Retrieves the maximum value for a list of specified columns in a dataframe\nreturn_type: single value\nfilter_dict: [{'columns': 'a list of columns for which the minimum should be retrieved'}, {'rows': 'number of rows to be returned'}]\n"", ""function name:returnResult\ndescription: retrieves or extracts  the previously computed data, specified  by the columns in a dataframe\nfilter_dict: [{'columns': 'which columns to retrun/extract'}]\n"", ""function name:combine\ndescription: combines to data products via a join\nfilter_dict: [{'columns_left': 'which columns of the first data product to match on'}, {'columns_right': 'which columns of the second data product to match on'}, {'type': 'equal or unequal'}]\n""]",0.0,0.0,0.0,0.0,0,1.0
90,1331,What is the amount of the funds that the Vice President received?,simple,filter,student_club,filter for transactions linked to the Vice President,"function name:filter
base_api: http://127.0.0.1:5200/filter
description: filters a data product based on the provided filterdict, it filters row wise keeping all input columns
filter_dict: [{'conditions': 'a dict ith the corresponding columns and their values'}]
example: {'condition':{'location':'berlin','year':{'min':2002,'max':2007}}
","The most fitting function for your problem is:

**Function Name:** combine  
**Description:** combines two data products via a join  
**Filter Dictionary:** [{'columns_left': 'which columns of the first data product to match on'}, {'columns_right': 'which columns of the second data product to match on'}, {'type': 'equal or unequal'}]  

This function can be used to filter transactions by joining relevant data products based on the Vice President's identifier.","[""function name:count\nbase_api: http://127.0.0.1:5200/count\ndescription: counts the occurences of a specific value or values\nfilter_dict: [{'columns': 'a column in which the value to count is present'}, {'value': 'the value to count '}]\n"", ""function name:min\nbase_api: http://127.0.0.1:5200/min\ndescription: Retrieves the maximum value for a list of specified columns in a dataframe\nreturn_type: single value\nfilter_dict: [{'columns': 'a list of columns for which the minimum should be retrieved'}, {'rows': 'number of rows to be returned'}]\n"", ""function name:returnResult\ndescription: retrieves or extracts  the previously computed data, specified  by the columns in a dataframe\nfilter_dict: [{'columns': 'which columns to retrun/extract'}]\n"", ""function name:combine\ndescription: combines to data products via a join\nfilter_dict: [{'columns_left': 'which columns of the first data product to match on'}, {'columns_right': 'which columns of the second data product to match on'}, {'type': 'equal or unequal'}]\n""]",0.0,0.0,0.0,0.0,0,1.0
91,1331,What is the amount of the funds that the Vice President received?,simple,combine,student_club,combine amounts from Income Dataset and Order Dataset,"function name:combine
description: combines to data products via a join
filter_dict: [{'columns_left': 'which columns of the first data product to match on'}, {'columns_right': 'which columns of the second data product to match on'}, {'type': 'equal or unequal'}]
","The most fitting function for your problem is:

**Function Name:** combine  
**Description:** combines two data products via a join  
**Filter Dictionary:** [{'columns_left': 'which columns of the first data product to match on'}, {'columns_right': 'which columns of the second data product to match on'}, {'type': 'equal or unequal'}]","[""function name:count\nbase_api: http://127.0.0.1:5200/count\ndescription: counts the occurences of a specific value or values\nfilter_dict: [{'columns': 'a column in which the value to count is present'}, {'value': 'the value to count '}]\n"", ""function name:min\nbase_api: http://127.0.0.1:5200/min\ndescription: Retrieves the maximum value for a list of specified columns in a dataframe\nreturn_type: single value\nfilter_dict: [{'columns': 'a list of columns for which the minimum should be retrieved'}, {'rows': 'number of rows to be returned'}]\n"", ""function name:returnResult\ndescription: retrieves or extracts  the previously computed data, specified  by the columns in a dataframe\nfilter_dict: [{'columns': 'which columns to retrun/extract'}]\n"", ""function name:combine\ndescription: combines to data products via a join\nfilter_dict: [{'columns_left': 'which columns of the first data product to match on'}, {'columns_right': 'which columns of the second data product to match on'}, {'type': 'equal or unequal'}]\n""]",0.0625,0.25,1.0,0.4,1,1.0
92,1331,What is the amount of the funds that the Vice President received?,simple,returnResult,student_club,return finished product,"function name:returnResult
description: retrieves or extracts  the previously computed data, specified  by the columns in a dataframe
filter_dict: [{'columns': 'which columns to retrun/extract'}]
","The most fitting function for your request is:

**Function Name:** returnResult  
**Description:** retrieves or extracts the previously computed data, specified by the columns in a dataframe  
**Filter Dictionary:** [{'columns': 'which columns to return/extract'}]","[""function name:count\nbase_api: http://127.0.0.1:5200/count\ndescription: counts the occurences of a specific value or values\nfilter_dict: [{'columns': 'a column in which the value to count is present'}, {'value': 'the value to count '}]\n"", ""function name:min\nbase_api: http://127.0.0.1:5200/min\ndescription: Retrieves the maximum value for a list of specified columns in a dataframe\nreturn_type: single value\nfilter_dict: [{'columns': 'a list of columns for which the minimum should be retrieved'}, {'rows': 'number of rows to be returned'}]\n"", ""function name:returnResult\ndescription: retrieves or extracts  the previously computed data, specified  by the columns in a dataframe\nfilter_dict: [{'columns': 'which columns to retrun/extract'}]\n"", ""function name:combine\ndescription: combines to data products via a join\nfilter_dict: [{'columns_left': 'which columns of the first data product to match on'}, {'columns_right': 'which columns of the second data product to match on'}, {'type': 'equal or unequal'}]\n""]",0.0833333333333333,0.25,1.0,0.4,1,1.0
93,1344,What was the notes of the fundraising on 2019/9/14?,simple,retrieve,student_club,retrieve income dataset,"function name:retrieve
description: retrieves the specified data product, takes the data products name and a list of requested columns as arguments
filter_dict: [{'product': 'product url'}]
","The most fitting function for retrieving data is:

**Function Name:** returnResult  
**Description:** retrieves or extracts the previously computed data, specified by the columns in a dataframe  
**Filter Dictionary:** [{'columns': 'which columns to return/extract'}]","[""function name:count\nbase_api: http://127.0.0.1:5200/count\ndescription: counts the occurences of a specific value or values\nfilter_dict: [{'columns': 'a column in which the value to count is present'}, {'value': 'the value to count '}]\n"", ""function name:returnResult\ndescription: retrieves or extracts  the previously computed data, specified  by the columns in a dataframe\nfilter_dict: [{'columns': 'which columns to retrun/extract'}]\n"", ""function name:min\nbase_api: http://127.0.0.1:5200/min\ndescription: Retrieves the maximum value for a list of specified columns in a dataframe\nreturn_type: single value\nfilter_dict: [{'columns': 'a list of columns for which the minimum should be retrieved'}, {'rows': 'number of rows to be returned'}]\n"", ""function name:combine\ndescription: combines to data products via a join\nfilter_dict: [{'columns_left': 'which columns of the first data product to match on'}, {'columns_right': 'which columns of the second data product to match on'}, {'type': 'equal or unequal'}]\n""]",0.0,0.0,0.0,0.0,0,1.0
94,1344,What was the notes of the fundraising on 2019/9/14?,simple,filter,student_club,filter for entries on date 2019/9/14,"function name:filter
base_api: http://127.0.0.1:5200/filter
description: filters a data product based on the provided filterdict, it filters row wise keeping all input columns
filter_dict: [{'conditions': 'a dict ith the corresponding columns and their values'}]
example: {'condition':{'location':'berlin','year':{'min':2002,'max':2007}}
","The most fitting function for filtering entries based on a specific date is the ""combine"" function. 

Description: The ""combine"" function allows you to join two data products based on specified columns, which can include date columns. By matching on the date column, you can effectively filter for entries on the date 2019/9/14. 

Filter_dict: [{'columns_left': 'which columns of the first data product to match on'}, {'columns_right': 'which columns of the second data product to match on'}, {'type': 'equal or unequal'}]","[""function name:count\nbase_api: http://127.0.0.1:5200/count\ndescription: counts the occurences of a specific value or values\nfilter_dict: [{'columns': 'a column in which the value to count is present'}, {'value': 'the value to count '}]\n"", ""function name:returnResult\ndescription: retrieves or extracts  the previously computed data, specified  by the columns in a dataframe\nfilter_dict: [{'columns': 'which columns to retrun/extract'}]\n"", ""function name:min\nbase_api: http://127.0.0.1:5200/min\ndescription: Retrieves the maximum value for a list of specified columns in a dataframe\nreturn_type: single value\nfilter_dict: [{'columns': 'a list of columns for which the minimum should be retrieved'}, {'rows': 'number of rows to be returned'}]\n"", ""function name:combine\ndescription: combines to data products via a join\nfilter_dict: [{'columns_left': 'which columns of the first data product to match on'}, {'columns_right': 'which columns of the second data product to match on'}, {'type': 'equal or unequal'}]\n""]",0.0,0.0,0.0,0.0,0,1.0
95,1344,What was the notes of the fundraising on 2019/9/14?,simple,getValues,student_club,extract notes from filtered income dataset,"function name:getValues
base_api: http://127.0.0.1:5200/getValues
description: Retrieves specififed data values in a list format
filter_dict: [{'columns': 'a column on wihich to match'}, {'values': 'a dict with a value to match if None returns the all columns from columns'}]
example: filter_dict:{'values':'None','column':'customer_id'}
","The most fitting function for extracting notes from a filtered income dataset is:

**Function Name:** returnResult  
**Description:** retrieves or extracts the previously computed data, specified by the columns in a dataframe  
**Filter Dictionary:** [{'columns': 'which columns to return/extract'}]","[""function name:count\nbase_api: http://127.0.0.1:5200/count\ndescription: counts the occurences of a specific value or values\nfilter_dict: [{'columns': 'a column in which the value to count is present'}, {'value': 'the value to count '}]\n"", ""function name:returnResult\ndescription: retrieves or extracts  the previously computed data, specified  by the columns in a dataframe\nfilter_dict: [{'columns': 'which columns to retrun/extract'}]\n"", ""function name:min\nbase_api: http://127.0.0.1:5200/min\ndescription: Retrieves the maximum value for a list of specified columns in a dataframe\nreturn_type: single value\nfilter_dict: [{'columns': 'a list of columns for which the minimum should be retrieved'}, {'rows': 'number of rows to be returned'}]\n"", ""function name:combine\ndescription: combines to data products via a join\nfilter_dict: [{'columns_left': 'which columns of the first data product to match on'}, {'columns_right': 'which columns of the second data product to match on'}, {'type': 'equal or unequal'}]\n""]",0.0,0.0,0.0,0.0,0,0.0
96,1344,What was the notes of the fundraising on 2019/9/14?,simple,retrieve,student_club,retrieve budget dataset,"function name:retrieve
description: retrieves the specified data product, takes the data products name and a list of requested columns as arguments
filter_dict: [{'product': 'product url'}]
","The most fitting function for retrieving a budget dataset is:

**Function Name:** returnResult  
**Description:** retrieves or extracts the previously computed data, specified by the columns in a dataframe  
**Filter Dictionary:** [{'columns': 'which columns to return/extract'}]","[""function name:count\nbase_api: http://127.0.0.1:5200/count\ndescription: counts the occurences of a specific value or values\nfilter_dict: [{'columns': 'a column in which the value to count is present'}, {'value': 'the value to count '}]\n"", ""function name:returnResult\ndescription: retrieves or extracts  the previously computed data, specified  by the columns in a dataframe\nfilter_dict: [{'columns': 'which columns to retrun/extract'}]\n"", ""function name:min\nbase_api: http://127.0.0.1:5200/min\ndescription: Retrieves the maximum value for a list of specified columns in a dataframe\nreturn_type: single value\nfilter_dict: [{'columns': 'a list of columns for which the minimum should be retrieved'}, {'rows': 'number of rows to be returned'}]\n"", ""function name:combine\ndescription: combines to data products via a join\nfilter_dict: [{'columns_left': 'which columns of the first data product to match on'}, {'columns_right': 'which columns of the second data product to match on'}, {'type': 'equal or unequal'}]\n""]",0.0,0.0,0.0,0.0,0,1.0
97,1344,What was the notes of the fundraising on 2019/9/14?,simple,filter,student_club,filter for budget categories related to fundraising,"function name:filter
base_api: http://127.0.0.1:5200/filter
description: filters a data product based on the provided filterdict, it filters row wise keeping all input columns
filter_dict: [{'conditions': 'a dict ith the corresponding columns and their values'}]
example: {'condition':{'location':'berlin','year':{'min':2002,'max':2007}}
","The most fitting function for your problem is:

**Function Name:** `count`  
**Description:** Counts the occurrences of a specific value or values.  
**Filter Dictionary:** [{'columns': 'a column in which the value to count is present'}, {'value': 'the value to count '}].  

This function can be used to filter and count the occurrences of budget categories related to fundraising.","[""function name:count\nbase_api: http://127.0.0.1:5200/count\ndescription: counts the occurences of a specific value or values\nfilter_dict: [{'columns': 'a column in which the value to count is present'}, {'value': 'the value to count '}]\n"", ""function name:returnResult\ndescription: retrieves or extracts  the previously computed data, specified  by the columns in a dataframe\nfilter_dict: [{'columns': 'which columns to retrun/extract'}]\n"", ""function name:min\nbase_api: http://127.0.0.1:5200/min\ndescription: Retrieves the maximum value for a list of specified columns in a dataframe\nreturn_type: single value\nfilter_dict: [{'columns': 'a list of columns for which the minimum should be retrieved'}, {'rows': 'number of rows to be returned'}]\n"", ""function name:combine\ndescription: combines to data products via a join\nfilter_dict: [{'columns_left': 'which columns of the first data product to match on'}, {'columns_right': 'which columns of the second data product to match on'}, {'type': 'equal or unequal'}]\n""]",0.0,0.0,0.0,0.0,0,1.0
98,1344,What was the notes of the fundraising on 2019/9/14?,simple,combine,student_club,combine notes from income dataset and relevant budget information from budget dataset,"function name:combine
description: combines to data products via a join
filter_dict: [{'columns_left': 'which columns of the first data product to match on'}, {'columns_right': 'which columns of the second data product to match on'}, {'type': 'equal or unequal'}]
","The most fitting function for your problem is:

**Function Name:** combine  
**Description:** combines two data products via a join  
**Filter Dictionary:** [{'columns_left': 'which columns of the first data product to match on'}, {'columns_right': 'which columns of the second data product to match on'}, {'type': 'equal or unequal'}]","[""function name:count\nbase_api: http://127.0.0.1:5200/count\ndescription: counts the occurences of a specific value or values\nfilter_dict: [{'columns': 'a column in which the value to count is present'}, {'value': 'the value to count '}]\n"", ""function name:returnResult\ndescription: retrieves or extracts  the previously computed data, specified  by the columns in a dataframe\nfilter_dict: [{'columns': 'which columns to retrun/extract'}]\n"", ""function name:min\nbase_api: http://127.0.0.1:5200/min\ndescription: Retrieves the maximum value for a list of specified columns in a dataframe\nreturn_type: single value\nfilter_dict: [{'columns': 'a list of columns for which the minimum should be retrieved'}, {'rows': 'number of rows to be returned'}]\n"", ""function name:combine\ndescription: combines to data products via a join\nfilter_dict: [{'columns_left': 'which columns of the first data product to match on'}, {'columns_right': 'which columns of the second data product to match on'}, {'type': 'equal or unequal'}]\n""]",0.0625,0.25,1.0,0.4,1,1.0
99,1344,What was the notes of the fundraising on 2019/9/14?,simple,returnResult,student_club,return finished product,"function name:returnResult
description: retrieves or extracts  the previously computed data, specified  by the columns in a dataframe
filter_dict: [{'columns': 'which columns to retrun/extract'}]
","The most fitting function for your problem is:

**Function Name:** `returnResult`  
**Description:** Retrieves or extracts the previously computed data, specified by the columns in a dataframe.  
**Filter Dictionary:** [{'columns': 'which columns to return/extract'}]","[""function name:count\nbase_api: http://127.0.0.1:5200/count\ndescription: counts the occurences of a specific value or values\nfilter_dict: [{'columns': 'a column in which the value to count is present'}, {'value': 'the value to count '}]\n"", ""function name:returnResult\ndescription: retrieves or extracts  the previously computed data, specified  by the columns in a dataframe\nfilter_dict: [{'columns': 'which columns to retrun/extract'}]\n"", ""function name:min\nbase_api: http://127.0.0.1:5200/min\ndescription: Retrieves the maximum value for a list of specified columns in a dataframe\nreturn_type: single value\nfilter_dict: [{'columns': 'a list of columns for which the minimum should be retrieved'}, {'rows': 'number of rows to be returned'}]\n"", ""function name:combine\ndescription: combines to data products via a join\nfilter_dict: [{'columns_left': 'which columns of the first data product to match on'}, {'columns_right': 'which columns of the second data product to match on'}, {'type': 'equal or unequal'}]\n""]",0.125,0.25,1.0,0.4,1,1.0
100,1484,"How many more ""discount"" gas stations does the Czech Republic have compared to Slovakia?",simple,retrieve,debit_card_specializing,retrieve gasstations dataset,"function name:retrieve
description: retrieves the specified data product, takes the data products name and a list of requested columns as arguments
filter_dict: [{'product': 'product url'}]
","The most fitting function for retrieving a dataset is:

**Function Name:** returnResult  
**Description:** retrieves or extracts the previously computed data, specified by the columns in a dataframe  
**Filter Dictionary:** [{'columns': 'which columns to return/extract'}]","[""function name:count\nbase_api: http://127.0.0.1:5200/count\ndescription: counts the occurences of a specific value or values\nfilter_dict: [{'columns': 'a column in which the value to count is present'}, {'value': 'the value to count '}]\n"", ""function name:min\nbase_api: http://127.0.0.1:5200/min\ndescription: Retrieves the maximum value for a list of specified columns in a dataframe\nreturn_type: single value\nfilter_dict: [{'columns': 'a list of columns for which the minimum should be retrieved'}, {'rows': 'number of rows to be returned'}]\n"", ""function name:combine\ndescription: combines to data products via a join\nfilter_dict: [{'columns_left': 'which columns of the first data product to match on'}, {'columns_right': 'which columns of the second data product to match on'}, {'type': 'equal or unequal'}]\n"", ""function name:returnResult\ndescription: retrieves or extracts  the previously computed data, specified  by the columns in a dataframe\nfilter_dict: [{'columns': 'which columns to retrun/extract'}]\n""]",0.0,0.0,0.0,0.0,0,1.0
101,1484,"How many more ""discount"" gas stations does the Czech Republic have compared to Slovakia?",simple,filter,debit_card_specializing,filter for gas stations in the Czech Republic and Slovakia,"function name:filter
base_api: http://127.0.0.1:5200/filter
description: filters a data product based on the provided filterdict, it filters row wise keeping all input columns
filter_dict: [{'conditions': 'a dict ith the corresponding columns and their values'}]
example: {'condition':{'location':'berlin','year':{'min':2002,'max':2007}}
","The most fitting function for your problem is:

**Function Name:** combine  
**Description:** combines two data products via a join  
**Filter Dictionary:** [{'columns_left': 'which columns of the first data product to match on'}, {'columns_right': 'which columns of the second data product to match on'}, {'type': 'equal or unequal'}]  

This function can be used to join datasets containing information about gas stations in the Czech Republic and Slovakia based on matching columns.","[""function name:count\nbase_api: http://127.0.0.1:5200/count\ndescription: counts the occurences of a specific value or values\nfilter_dict: [{'columns': 'a column in which the value to count is present'}, {'value': 'the value to count '}]\n"", ""function name:min\nbase_api: http://127.0.0.1:5200/min\ndescription: Retrieves the maximum value for a list of specified columns in a dataframe\nreturn_type: single value\nfilter_dict: [{'columns': 'a list of columns for which the minimum should be retrieved'}, {'rows': 'number of rows to be returned'}]\n"", ""function name:combine\ndescription: combines to data products via a join\nfilter_dict: [{'columns_left': 'which columns of the first data product to match on'}, {'columns_right': 'which columns of the second data product to match on'}, {'type': 'equal or unequal'}]\n"", ""function name:returnResult\ndescription: retrieves or extracts  the previously computed data, specified  by the columns in a dataframe\nfilter_dict: [{'columns': 'which columns to retrun/extract'}]\n""]",0.0,0.0,0.0,0.0,0,0.0
102,1484,"How many more ""discount"" gas stations does the Czech Republic have compared to Slovakia?",simple,filter,debit_card_specializing,"filter for ""discount"" gas stations in both countries","function name:filter
base_api: http://127.0.0.1:5200/filter
description: filters a data product based on the provided filterdict, it filters row wise keeping all input columns
filter_dict: [{'conditions': 'a dict ith the corresponding columns and their values'}]
example: {'condition':{'location':'berlin','year':{'min':2002,'max':2007}}
","The most fitting function for your problem is:

**Function Name:** combine  
**Description:** combines two data products via a join  
**Filter Dictionary:** [{'columns_left': 'which columns of the first data product to match on'}, {'columns_right': 'which columns of the second data product to match on'}, {'type': 'equal or unequal'}]  

This function can be used to filter and combine data from both countries based on the criteria for ""discount"" gas stations.","[""function name:count\nbase_api: http://127.0.0.1:5200/count\ndescription: counts the occurences of a specific value or values\nfilter_dict: [{'columns': 'a column in which the value to count is present'}, {'value': 'the value to count '}]\n"", ""function name:min\nbase_api: http://127.0.0.1:5200/min\ndescription: Retrieves the maximum value for a list of specified columns in a dataframe\nreturn_type: single value\nfilter_dict: [{'columns': 'a list of columns for which the minimum should be retrieved'}, {'rows': 'number of rows to be returned'}]\n"", ""function name:combine\ndescription: combines to data products via a join\nfilter_dict: [{'columns_left': 'which columns of the first data product to match on'}, {'columns_right': 'which columns of the second data product to match on'}, {'type': 'equal or unequal'}]\n"", ""function name:returnResult\ndescription: retrieves or extracts  the previously computed data, specified  by the columns in a dataframe\nfilter_dict: [{'columns': 'which columns to retrun/extract'}]\n""]",0.0,0.0,0.0,0.0,0,1.0
103,1484,"How many more ""discount"" gas stations does the Czech Republic have compared to Slovakia?",simple,count,debit_card_specializing,"count the number of ""discount"" gas stations in the Czech Republic","function name:count
base_api: http://127.0.0.1:5200/count
description: counts the occurences of a specific value or values
filter_dict: [{'columns': 'a column in which the value to count is present'}, {'value': 'the value to count '}]
","The most fitting function for your problem is:

**Function Name:** count  
**Description:** counts the occurrences of a specific value or values  
**Base API:** http://127.0.0.1:5200/count  
**Filter Dictionary:** [{'columns': 'a column in which the value to count is present'}, {'value': 'the value to count '}]

You would use this function to count the occurrences of ""discount"" in the relevant column that lists gas stations in the Czech Republic.","[""function name:count\nbase_api: http://127.0.0.1:5200/count\ndescription: counts the occurences of a specific value or values\nfilter_dict: [{'columns': 'a column in which the value to count is present'}, {'value': 'the value to count '}]\n"", ""function name:min\nbase_api: http://127.0.0.1:5200/min\ndescription: Retrieves the maximum value for a list of specified columns in a dataframe\nreturn_type: single value\nfilter_dict: [{'columns': 'a list of columns for which the minimum should be retrieved'}, {'rows': 'number of rows to be returned'}]\n"", ""function name:combine\ndescription: combines to data products via a join\nfilter_dict: [{'columns_left': 'which columns of the first data product to match on'}, {'columns_right': 'which columns of the second data product to match on'}, {'type': 'equal or unequal'}]\n"", ""function name:returnResult\ndescription: retrieves or extracts  the previously computed data, specified  by the columns in a dataframe\nfilter_dict: [{'columns': 'which columns to retrun/extract'}]\n""]",0.25,0.25,1.0,0.4,1,1.0
104,1484,"How many more ""discount"" gas stations does the Czech Republic have compared to Slovakia?",simple,count,debit_card_specializing,"count the number of ""discount"" gas stations in Slovakia","function name:count
base_api: http://127.0.0.1:5200/count
description: counts the occurences of a specific value or values
filter_dict: [{'columns': 'a column in which the value to count is present'}, {'value': 'the value to count '}]
","The most fitting function for your problem is:

**Function Name:** count  
**Description:** counts the occurrences of a specific value or values  
**Base API:** http://127.0.0.1:5200/count  
**Filter Dictionary:** [{'columns': 'a column in which the value to count is present'}, {'value': 'the value to count '}]

You would use this function to count the occurrences of ""discount"" in the relevant column for gas stations in Slovakia.","[""function name:count\nbase_api: http://127.0.0.1:5200/count\ndescription: counts the occurences of a specific value or values\nfilter_dict: [{'columns': 'a column in which the value to count is present'}, {'value': 'the value to count '}]\n"", ""function name:min\nbase_api: http://127.0.0.1:5200/min\ndescription: Retrieves the maximum value for a list of specified columns in a dataframe\nreturn_type: single value\nfilter_dict: [{'columns': 'a list of columns for which the minimum should be retrieved'}, {'rows': 'number of rows to be returned'}]\n"", ""function name:combine\ndescription: combines to data products via a join\nfilter_dict: [{'columns_left': 'which columns of the first data product to match on'}, {'columns_right': 'which columns of the second data product to match on'}, {'type': 'equal or unequal'}]\n"", ""function name:returnResult\ndescription: retrieves or extracts  the previously computed data, specified  by the columns in a dataframe\nfilter_dict: [{'columns': 'which columns to retrun/extract'}]\n""]",0.25,0.25,1.0,0.4,1,1.0
105,1484,"How many more ""discount"" gas stations does the Czech Republic have compared to Slovakia?",simple,diffrence,debit_card_specializing,"compute the difference between the counts of ""discount"" gas stations in the Czech Republic and Slovakia","function name:diffrence
base_api: http://127.0.0.1:5200/diffrence
description: Calcuates diffrence between multiple data sources
filter_dict: [{'source_A': 'The data source from which source_B is subtracted'}, {'source_B': 'The data source which is subtracted from source_A'}]
","The most fitting function for your problem is:

**Function Name:** count  
**Description:** Counts the occurrences of a specific value or values.  
**Filter Dict:** [{'columns': 'a column in which the value to count is present'}, {'value': 'the value to count '}].  

You can use this function to count the occurrences of ""discount"" gas stations in both the Czech Republic and Slovakia, and then compute the difference between the two counts.","[""function name:count\nbase_api: http://127.0.0.1:5200/count\ndescription: counts the occurences of a specific value or values\nfilter_dict: [{'columns': 'a column in which the value to count is present'}, {'value': 'the value to count '}]\n"", ""function name:min\nbase_api: http://127.0.0.1:5200/min\ndescription: Retrieves the maximum value for a list of specified columns in a dataframe\nreturn_type: single value\nfilter_dict: [{'columns': 'a list of columns for which the minimum should be retrieved'}, {'rows': 'number of rows to be returned'}]\n"", ""function name:combine\ndescription: combines to data products via a join\nfilter_dict: [{'columns_left': 'which columns of the first data product to match on'}, {'columns_right': 'which columns of the second data product to match on'}, {'type': 'equal or unequal'}]\n"", ""function name:returnResult\ndescription: retrieves or extracts  the previously computed data, specified  by the columns in a dataframe\nfilter_dict: [{'columns': 'which columns to retrun/extract'}]\n""]",0.0,0.0,0.0,0.0,0,0.0
106,1484,"How many more ""discount"" gas stations does the Czech Republic have compared to Slovakia?",simple,returnResult,debit_card_specializing,return finished product,"function name:returnResult
description: retrieves or extracts  the previously computed data, specified  by the columns in a dataframe
filter_dict: [{'columns': 'which columns to retrun/extract'}]
","The most fitting function for your request is:

**Function Name:** returnResult  
**Description:** retrieves or extracts the previously computed data, specified by the columns in a dataframe  
**Filter Dictionary:** [{'columns': 'which columns to return/extract'}]","[""function name:count\nbase_api: http://127.0.0.1:5200/count\ndescription: counts the occurences of a specific value or values\nfilter_dict: [{'columns': 'a column in which the value to count is present'}, {'value': 'the value to count '}]\n"", ""function name:min\nbase_api: http://127.0.0.1:5200/min\ndescription: Retrieves the maximum value for a list of specified columns in a dataframe\nreturn_type: single value\nfilter_dict: [{'columns': 'a list of columns for which the minimum should be retrieved'}, {'rows': 'number of rows to be returned'}]\n"", ""function name:combine\ndescription: combines to data products via a join\nfilter_dict: [{'columns_left': 'which columns of the first data product to match on'}, {'columns_right': 'which columns of the second data product to match on'}, {'type': 'equal or unequal'}]\n"", ""function name:returnResult\ndescription: retrieves or extracts  the previously computed data, specified  by the columns in a dataframe\nfilter_dict: [{'columns': 'which columns to retrun/extract'}]\n""]",0.0625,0.25,1.0,0.4,1,1.0
107,39,What is the average number of test takers from Fresno schools that opened between 1/1/1980 and 12/31/1980?,simple,retrieve,california_schools,retrieve sat scores data,"function name:retrieve
description: retrieves the specified data product, takes the data products name and a list of requested columns as arguments
filter_dict: [{'product': 'product url'}]
","The most fitting function for retrieving sat scores data is:

**Function Name:** returnResult  
**Description:** retrieves or extracts the previously computed data, specified by the columns in a dataframe  
**Filter Dictionary:** [{'columns': 'which columns to return/extract'}]","[""function name:count\nbase_api: http://127.0.0.1:5200/count\ndescription: counts the occurences of a specific value or values\nfilter_dict: [{'columns': 'a column in which the value to count is present'}, {'value': 'the value to count '}]\n"", ""function name:mean\nbase_api: http://127.0.0.1:5200/sum\ndescription: Calcuates the mean of a dataframe based on a list of group_by columns and\nfilter_dict: [{'group_by': 'a list of coulmns in the dataframe, can be None'}, {'columns': 'a list of columns for hicht the mean should be calculated, cant be None'}]\n"", ""function name:returnResult\ndescription: retrieves or extracts  the previously computed data, specified  by the columns in a dataframe\nfilter_dict: [{'columns': 'which columns to retrun/extract'}]\n"", ""function name:combine\ndescription: combines to data products via a join\nfilter_dict: [{'columns_left': 'which columns of the first data product to match on'}, {'columns_right': 'which columns of the second data product to match on'}, {'type': 'equal or unequal'}]\n""]",0.0,0.0,0.0,0.0,0,1.0
108,39,What is the average number of test takers from Fresno schools that opened between 1/1/1980 and 12/31/1980?,simple,filter,california_schools,filter for Fresno schools that opened between 1/1/1980 and 12/31/1980,"function name:filter
base_api: http://127.0.0.1:5200/filter
description: filters a data product based on the provided filterdict, it filters row wise keeping all input columns
filter_dict: [{'conditions': 'a dict ith the corresponding columns and their values'}]
example: {'condition':{'location':'berlin','year':{'min':2002,'max':2007}}
","The most fitting function for your problem is:

**Function Name:** combine  
**Description:** combines two data products via a join  
**Filter Dictionary:** [{'columns_left': 'which columns of the first data product to match on'}, {'columns_right': 'which columns of the second data product to match on'}, {'type': 'equal or unequal'}]  

This function can be used to filter and combine data related to Fresno schools based on the specified opening dates.","[""function name:count\nbase_api: http://127.0.0.1:5200/count\ndescription: counts the occurences of a specific value or values\nfilter_dict: [{'columns': 'a column in which the value to count is present'}, {'value': 'the value to count '}]\n"", ""function name:mean\nbase_api: http://127.0.0.1:5200/sum\ndescription: Calcuates the mean of a dataframe based on a list of group_by columns and\nfilter_dict: [{'group_by': 'a list of coulmns in the dataframe, can be None'}, {'columns': 'a list of columns for hicht the mean should be calculated, cant be None'}]\n"", ""function name:returnResult\ndescription: retrieves or extracts  the previously computed data, specified  by the columns in a dataframe\nfilter_dict: [{'columns': 'which columns to retrun/extract'}]\n"", ""function name:combine\ndescription: combines to data products via a join\nfilter_dict: [{'columns_left': 'which columns of the first data product to match on'}, {'columns_right': 'which columns of the second data product to match on'}, {'type': 'equal or unequal'}]\n""]",0.0,0.0,0.0,0.0,0,1.0
109,39,What is the average number of test takers from Fresno schools that opened between 1/1/1980 and 12/31/1980?,simple,mean,california_schools,calculate the average number of test takers from the filtered data,"function name:mean
base_api: http://127.0.0.1:5200/sum
description: Calcuates the mean of a dataframe based on a list of group_by columns and
filter_dict: [{'group_by': 'a list of coulmns in the dataframe, can be None'}, {'columns': 'a list of columns for hicht the mean should be calculated, cant be None'}]
","The most fitting function for your problem is:

**Function Name:** mean  
**Description:** Calculates the mean of a dataframe based on a list of group_by columns and specific columns for which the mean should be calculated.  
**Filter Dictionary:** [{'group_by': 'a list of columns in the dataframe, can be None'}, {'columns': 'a list of columns for which the mean should be calculated, can't be None'}]","[""function name:count\nbase_api: http://127.0.0.1:5200/count\ndescription: counts the occurences of a specific value or values\nfilter_dict: [{'columns': 'a column in which the value to count is present'}, {'value': 'the value to count '}]\n"", ""function name:mean\nbase_api: http://127.0.0.1:5200/sum\ndescription: Calcuates the mean of a dataframe based on a list of group_by columns and\nfilter_dict: [{'group_by': 'a list of coulmns in the dataframe, can be None'}, {'columns': 'a list of columns for hicht the mean should be calculated, cant be None'}]\n"", ""function name:returnResult\ndescription: retrieves or extracts  the previously computed data, specified  by the columns in a dataframe\nfilter_dict: [{'columns': 'which columns to retrun/extract'}]\n"", ""function name:combine\ndescription: combines to data products via a join\nfilter_dict: [{'columns_left': 'which columns of the first data product to match on'}, {'columns_right': 'which columns of the second data product to match on'}, {'type': 'equal or unequal'}]\n""]",0.125,0.25,1.0,0.4,1,1.0
110,39,What is the average number of test takers from Fresno schools that opened between 1/1/1980 and 12/31/1980?,simple,returnResult,california_schools,return finished product,"function name:returnResult
description: retrieves or extracts  the previously computed data, specified  by the columns in a dataframe
filter_dict: [{'columns': 'which columns to retrun/extract'}]
","The most fitting function for your request is:

**Function Name:** returnResult  
**Description:** retrieves or extracts the previously computed data, specified by the columns in a dataframe.  
**Filter Dictionary:** [{'columns': 'which columns to return/extract'}]","[""function name:count\nbase_api: http://127.0.0.1:5200/count\ndescription: counts the occurences of a specific value or values\nfilter_dict: [{'columns': 'a column in which the value to count is present'}, {'value': 'the value to count '}]\n"", ""function name:mean\nbase_api: http://127.0.0.1:5200/sum\ndescription: Calcuates the mean of a dataframe based on a list of group_by columns and\nfilter_dict: [{'group_by': 'a list of coulmns in the dataframe, can be None'}, {'columns': 'a list of columns for hicht the mean should be calculated, cant be None'}]\n"", ""function name:returnResult\ndescription: retrieves or extracts  the previously computed data, specified  by the columns in a dataframe\nfilter_dict: [{'columns': 'which columns to retrun/extract'}]\n"", ""function name:combine\ndescription: combines to data products via a join\nfilter_dict: [{'columns_left': 'which columns of the first data product to match on'}, {'columns_right': 'which columns of the second data product to match on'}, {'type': 'equal or unequal'}]\n""]",0.0833333333333333,0.25,1.0,0.4,1,1.0
